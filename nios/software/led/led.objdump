
led.elf:     file format elf32-littlenios2
led.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000818c

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001e24 memsz 0x00001e24 flags r-x
    LOAD off    0x00002e44 vaddr 0x00009e44 paddr 0x0000a124 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003404 vaddr 0x0000a404 paddr 0x0000a404 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001bb8  0000818c  0000818c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000100  00009d44  00009d44  00002d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00009e44  0000a124  00002e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0000a404  0000a404  00003404  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000a52c  0000a52c  00003124  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000668  00000000  00000000  00003148  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000097e5  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003595  00000000  00000000  0000cf95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000037b5  00000000  00000000  0001052a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a44  00000000  00000000  00013ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e62  00000000  00000000  00014724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000021c2  00000000  00000000  00016586  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00018748  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000338  00000000  00000000  00018798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a6c9  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001a6cc  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a6cf  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a6d0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001a6d1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001a6d5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001a6d9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001a6dd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001a6e6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001a6ef  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0001a6f8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000014  00000000  00000000  0001a6fe  2**0
                  CONTENTS, READONLY
 29 .jdi          00003a5b  00000000  00000000  0001a712  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003c50b  00000000  00000000  0001e16d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
0000818c l    d  .text	00000000 .text
00009d44 l    d  .rodata	00000000 .rodata
00009e44 l    d  .rwdata	00000000 .rwdata
0000a404 l    d  .bss	00000000 .bss
0000a52c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../led_bsp//obj/HAL/src/crt0.o
000081c4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 count_binary.c
0000a404 l     O .bss	00000001 count
000081c8 l     F .text	00000020 lcd_init
000081e8 l     F .text	00000054 initial_message
0000823c l     F .text	00000030 count_led
0000826c l     F .text	0000001c count_sevenseg
00008288 l     F .text	00000028 count_lcd
000082b0 l     F .text	00000050 count_all
00008300 l     F .text	00000138 handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008538 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000087bc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009e44 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000908c l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009f24 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009248 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009414 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000095a4 l     F .text	00000078 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a428 g     O .bss	00000004 alt_instruction_exception_handler
000086f4 g     F .text	00000018 putchar
00009038 g     F .text	00000050 alt_main
0000870c g     F .text	00000080 _puts_r
0000a42c g     O .bss	00000100 alt_irq
0000a124 g       *ABS*	00000000 __flash_rwdata_start
000086a0 g     F .text	0000004c printf
00009924 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
0000a408 g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a40c g     O .bss	00000004 errno
0000a414 g     O .bss	00000004 alt_argv
000120f8 g       *ABS*	00000000 _gp
00009088 g     F .text	00000004 usleep
00009f50 g     O .rwdata	00000180 alt_fd_list
000086ec g     F .text	00000008 _putchar_r
0000992c g     F .text	00000074 alt_find_dev
0000961c g     F .text	00000078 alt_io_redirect
0000878c g     F .text	00000014 puts
00009ad0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000091b8 g     F .text	0000005c altera_avalon_jtag_uart_read
00008664 g     F .text	0000003c _printf_r
00008654 g     F .text	00000008 .hidden __udivsi3
00009a98 g     F .text	00000038 alt_icache_flush
0000a100 g     O .rwdata	00000004 alt_max_fd
0000a0f8 g     O .rwdata	00000004 _global_impure_ptr
0000a52c g       *ABS*	00000000 __bss_end
0000953c g     F .text	00000068 alt_iic_isr_register
0000986c g     F .text	000000b8 alt_tick
00009524 g     F .text	00000018 alt_ic_irq_enabled
00009838 g     F .text	00000034 alt_alarm_stop
0000a41c g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	00000064 alt_irq_handler
0000a0d0 g     O .rwdata	00000028 alt_dev_null
00009410 g     F .text	00000004 alt_dcache_flush_all
0000a124 g       *ABS*	00000000 __ram_rwdata_end
0000a104 g     O .rwdata	00000008 alt_dev_list
000090ac g     F .text	00000088 write
00008e90 g     F .text	00000058 _putc_r
00009e44 g       *ABS*	00000000 __ram_rodata_end
0000865c g     F .text	00000008 .hidden __umodsi3
0000a52c g       *ABS*	00000000 end
00008160 g     F .exceptions	0000002c alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009284 g     F .text	00000050 alt_avalon_timer_sc_init
00009214 g     F .text	00000034 altera_avalon_jtag_uart_write
00008828 g     F .text	00000544 ___vfprintf_internal_r
00009b94 g     F .text	0000019c __call_exitprocs
0000818c g     F .text	0000003c _start
0000a424 g     O .bss	00000004 _alt_tick_rate
0000a420 g     O .bss	00000004 _alt_nticks
00009154 g     F .text	0000003c alt_sys_init
00009e44 g       *ABS*	00000000 __ram_rwdata_start
00009d44 g       *ABS*	00000000 __ram_rodata_start
00009190 g     F .text	00000014 altera_avalon_jtag_uart_read_fd
00009a4c g     F .text	0000004c alt_get_fd
000092d4 g     F .text	00000078 alt_busy_sleep
00009b64 g     F .text	00000030 memcmp
0000a52c g       *ABS*	00000000 __alt_stack_base
000099a0 g     F .text	000000ac alt_find_file
0000941c g     F .text	00000078 alt_dev_llist_insert
00008d90 g     F .text	000000ac __sfvwrite_small_dev
0000a404 g       *ABS*	00000000 __bss_start
00008438 g     F .text	00000100 main
0000a410 g     O .bss	00000004 alt_envp
000091a4 g     F .text	00000014 altera_avalon_jtag_uart_write_fd
0000a114 g     O .rwdata	00000004 alt_errno
00008e3c g     F .text	00000054 putc
000085a4 g     F .text	00000054 .hidden __divsi3
00009d44 g       *ABS*	00000000 __flash_rodata_start
00009134 g     F .text	00000020 alt_irq_init
00009814 g     F .text	00000024 alt_release_fd
00008ee8 g     F .text	00000058 _write_r
0000a0fc g     O .rwdata	00000004 _impure_ptr
0000a418 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000a10c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000094a0 g     F .text	00000004 alt_ic_isr_register
0000a124 g       *ABS*	00000000 _edata
0000a52c g       *ABS*	00000000 _end
0000818c g       *ABS*	00000000 __ram_exceptions_end
000094e4 g     F .text	00000040 alt_ic_irq_disable
00009b44 g     F .text	00000020 exit
000085f8 g     F .text	0000005c .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009d30 g     F .text	00000014 _exit
000087a0 g     F .text	0000001c strlen
00009694 g     F .text	00000180 open
00009494 g     F .text	0000000c alt_icache_flush_all
0000a118 g     O .rwdata	00000004 alt_priority_mask
000094a4 g     F .text	00000040 alt_ic_irq_enable
00008d6c g     F .text	00000024 __vfprintf_internal
0000a11c g     O .rwdata	00000008 alt_alarm_list
0000934c g     F .text	000000c4 close
00008f40 g     F .text	000000f8 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606314 	ori	at,at,33164
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081600 	call	8160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defffe04 	addi	sp,sp,-8
    8100:	dfc00115 	stw	ra,4(sp)
    8104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    810c:	04000074 	movhi	r16,1
    8110:	84290b04 	addi	r16,r16,-23508

  active = alt_irq_pending ();

  do
  {
    i = 0;
    8114:	0005883a 	mov	r2,zero
    mask = 1;
    8118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	190a703a 	and	r5,r3,r4
    8120:	28000c26 	beq	r5,zero,8154 <alt_irq_handler+0x58>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    8124:	100490fa 	slli	r2,r2,3
    8128:	8087883a 	add	r3,r16,r2
    812c:	1805883a 	mov	r2,r3
    8130:	11000117 	ldw	r4,4(r2)
    8134:	18c00017 	ldw	r3,0(r3)
    8138:	183ee83a 	callr	r3
    813c:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    8140:	203ff41e 	bne	r4,zero,8114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8144:	dfc00117 	ldw	ra,4(sp)
    8148:	dc000017 	ldw	r16,0(sp)
    814c:	dec00204 	addi	sp,sp,8
    8150:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8154:	18c7883a 	add	r3,r3,r3
      i++;
    8158:	10800044 	addi	r2,r2,1

    } while (1);
    815c:	003fef06 	br	811c <alt_irq_handler+0x20>

00008160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    8160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    8164:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    8168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    816c:	d0e0cc17 	ldw	r3,-31952(gp)
    8170:	18000326 	beq	r3,zero,8180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    8174:	11001f0c 	andi	r4,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8178:	2008d0ba 	srli	r4,r4,2
    817c:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    8184:	0005883a 	mov	r2,zero
    8188:	f800283a 	ret

Disassembly of section .text:

0000818c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    818c:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8190:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8194:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8198:	d6883e14 	ori	gp,gp,8440
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    819c:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81a0:	10a90114 	ori	r2,r2,41988

    movhi r3, %hi(__bss_end)
    81a4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81a8:	18e94b14 	ori	r3,r3,42284

    beq r2, r3, 1f
    81ac:	10c00326 	beq	r2,r3,81bc <_start+0x30>

0:
    stw zero, (r2)
    81b0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81b4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81b8:	10fffd36 	bltu	r2,r3,81b0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81bc:	0008f400 	call	8f40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81c0:	00090380 	call	9038 <alt_main>

000081c4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81c4:	003fff06 	br	81c4 <alt_after_alt_main>

000081c8 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
    81c8:	defffe04 	addi	sp,sp,-8
    81cc:	df000115 	stw	fp,4(sp)
    81d0:	df000104 	addi	fp,sp,4
    81d4:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
    81d8:	e037883a 	mov	sp,fp
    81dc:	df000017 	ldw	fp,0(sp)
    81e0:	dec00104 	addi	sp,sp,4
    81e4:	f800283a 	ret

000081e8 <initial_message>:

static void initial_message()
{
    81e8:	defffe04 	addi	sp,sp,-8
    81ec:	dfc00115 	stw	ra,4(sp)
    81f0:	df000015 	stw	fp,0(sp)
    81f4:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
    81f8:	01000074 	movhi	r4,1
    81fc:	21275104 	addi	r4,r4,-25276
    8200:	000878c0 	call	878c <puts>
    printf("* Hello from Nios II!    *\n");
    8204:	01000074 	movhi	r4,1
    8208:	21275904 	addi	r4,r4,-25244
    820c:	000878c0 	call	878c <puts>
    printf("* Counting from 00 to ff *\n");
    8210:	01000074 	movhi	r4,1
    8214:	21276004 	addi	r4,r4,-25216
    8218:	000878c0 	call	878c <puts>
    printf("**************************\n");
    821c:	01000074 	movhi	r4,1
    8220:	21276704 	addi	r4,r4,-25188
    8224:	000878c0 	call	878c <puts>
}
    8228:	e037883a 	mov	sp,fp
    822c:	dfc00117 	ldw	ra,4(sp)
    8230:	df000017 	ldw	fp,0(sp)
    8234:	dec00204 	addi	sp,sp,8
    8238:	f800283a 	ret

0000823c <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
    823c:	deffff04 	addi	sp,sp,-4
    8240:	df000015 	stw	fp,0(sp)
    8244:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
    8248:	d0a0c303 	ldbu	r2,-31988(gp)
    824c:	10c03fcc 	andi	r3,r2,255
    8250:	00800074 	movhi	r2,1
    8254:	10840804 	addi	r2,r2,4128
    8258:	10c00035 	stwio	r3,0(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
    825c:	e037883a 	mov	sp,fp
    8260:	df000017 	ldw	fp,0(sp)
    8264:	dec00104 	addi	sp,sp,4
    8268:	f800283a 	ret

0000826c <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
    826c:	deffff04 	addi	sp,sp,-4
    8270:	df000015 	stw	fp,0(sp)
    8274:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
    8278:	e037883a 	mov	sp,fp
    827c:	df000017 	ldw	fp,0(sp)
    8280:	dec00104 	addi	sp,sp,4
    8284:	f800283a 	ret

00008288 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
    8288:	defffd04 	addi	sp,sp,-12
    828c:	df000215 	stw	fp,8(sp)
    8290:	df000204 	addi	fp,sp,8
    8294:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
    82a0:	e037883a 	mov	sp,fp
    82a4:	df000017 	ldw	fp,0(sp)
    82a8:	dec00104 	addi	sp,sp,4
    82ac:	f800283a 	ret

000082b0 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
    82b0:	defffd04 	addi	sp,sp,-12
    82b4:	dfc00215 	stw	ra,8(sp)
    82b8:	df000115 	stw	fp,4(sp)
    82bc:	df000104 	addi	fp,sp,4
    82c0:	e13fff15 	stw	r4,-4(fp)
    count_led();
    82c4:	000823c0 	call	823c <count_led>
    count_sevenseg();
    82c8:	000826c0 	call	826c <count_sevenseg>
    count_lcd( arg );
    82cc:	e13fff17 	ldw	r4,-4(fp)
    82d0:	00082880 	call	8288 <count_lcd>
    printf("%02x,  ", count);
    82d4:	d0a0c303 	ldbu	r2,-31988(gp)
    82d8:	10803fcc 	andi	r2,r2,255
    82dc:	01000074 	movhi	r4,1
    82e0:	21276e04 	addi	r4,r4,-25160
    82e4:	100b883a 	mov	r5,r2
    82e8:	00086a00 	call	86a0 <printf>
}
    82ec:	e037883a 	mov	sp,fp
    82f0:	dfc00117 	ldw	ra,4(sp)
    82f4:	df000017 	ldw	fp,0(sp)
    82f8:	dec00204 	addi	sp,sp,8
    82fc:	f800283a 	ret

00008300 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
    8300:	defffc04 	addi	sp,sp,-16
    8304:	dfc00315 	stw	ra,12(sp)
    8308:	df000215 	stw	fp,8(sp)
    830c:	df000204 	addi	fp,sp,8
    8310:	2005883a 	mov	r2,r4
    8314:	e17fff15 	stw	r5,-4(fp)
    8318:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
    831c:	e0bffe03 	ldbu	r2,-8(fp)
    8320:	108018d8 	cmpnei	r2,r2,99
    8324:	10001b1e 	bne	r2,zero,8394 <handle_button_press+0x94>
    {
        switch (edge_capture) 
    8328:	d0a0c417 	ldw	r2,-31984(gp)
    832c:	10c000a0 	cmpeqi	r3,r2,2
    8330:	18000c1e 	bne	r3,zero,8364 <handle_button_press+0x64>
    8334:	10c000c8 	cmpgei	r3,r2,3
    8338:	1800031e 	bne	r3,zero,8348 <handle_button_press+0x48>
    833c:	10800060 	cmpeqi	r2,r2,1
    8340:	1000061e 	bne	r2,zero,835c <handle_button_press+0x5c>
    8344:	00000f06 	br	8384 <handle_button_press+0x84>
    8348:	10c00120 	cmpeqi	r3,r2,4
    834c:	1800071e 	bne	r3,zero,836c <handle_button_press+0x6c>
    8350:	10800220 	cmpeqi	r2,r2,8
    8354:	1000081e 	bne	r2,zero,8378 <handle_button_press+0x78>
    8358:	00000a06 	br	8384 <handle_button_press+0x84>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
    835c:	000823c0 	call	823c <count_led>
            break;
    8360:	00000b06 	br	8390 <handle_button_press+0x90>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
    8364:	000826c0 	call	826c <count_sevenseg>
            break;
    8368:	00000906 	br	8390 <handle_button_press+0x90>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
    836c:	e13fff17 	ldw	r4,-4(fp)
    8370:	00082880 	call	8288 <count_lcd>
            break;
    8374:	00000606 	br	8390 <handle_button_press+0x90>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
    8378:	e13fff17 	ldw	r4,-4(fp)
    837c:	00082b00 	call	82b0 <count_all>
            break;
    8380:	00000306 	br	8390 <handle_button_press+0x90>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
    8384:	e13fff17 	ldw	r4,-4(fp)
    8388:	00082b00 	call	82b0 <count_all>
            break;
    838c:	0001883a 	nop
    8390:	00002406 	br	8424 <handle_button_press+0x124>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
    8394:	d0a0c417 	ldw	r2,-31984(gp)
    8398:	10c000a0 	cmpeqi	r3,r2,2
    839c:	18000f1e 	bne	r3,zero,83dc <handle_button_press+0xdc>
    83a0:	10c000c8 	cmpgei	r3,r2,3
    83a4:	1800031e 	bne	r3,zero,83b4 <handle_button_press+0xb4>
    83a8:	10800060 	cmpeqi	r2,r2,1
    83ac:	1000061e 	bne	r2,zero,83c8 <handle_button_press+0xc8>
    83b0:	00001906 	br	8418 <handle_button_press+0x118>
    83b4:	10c00120 	cmpeqi	r3,r2,4
    83b8:	18000d1e 	bne	r3,zero,83f0 <handle_button_press+0xf0>
    83bc:	10800220 	cmpeqi	r2,r2,8
    83c0:	1000101e 	bne	r2,zero,8404 <handle_button_press+0x104>
    83c4:	00001406 	br	8418 <handle_button_press+0x118>
        {
        case 0x1:
            printf( "Button 1\n");
    83c8:	01000074 	movhi	r4,1
    83cc:	21277004 	addi	r4,r4,-25152
    83d0:	000878c0 	call	878c <puts>
            edge_capture = 0;
    83d4:	d020c415 	stw	zero,-31984(gp)
            break;
    83d8:	00001206 	br	8424 <handle_button_press+0x124>
        case 0x2:
            printf( "Button 2\n");
    83dc:	01000074 	movhi	r4,1
    83e0:	21277304 	addi	r4,r4,-25140
    83e4:	000878c0 	call	878c <puts>
            edge_capture = 0;
    83e8:	d020c415 	stw	zero,-31984(gp)
            break;
    83ec:	00000d06 	br	8424 <handle_button_press+0x124>
        case 0x4:
            printf( "Button 3\n");
    83f0:	01000074 	movhi	r4,1
    83f4:	21277604 	addi	r4,r4,-25128
    83f8:	000878c0 	call	878c <puts>
            edge_capture = 0;
    83fc:	d020c415 	stw	zero,-31984(gp)
            break;
    8400:	00000806 	br	8424 <handle_button_press+0x124>
        case 0x8:
            printf( "Button 4\n");
    8404:	01000074 	movhi	r4,1
    8408:	21277904 	addi	r4,r4,-25116
    840c:	000878c0 	call	878c <puts>
            edge_capture = 0;
    8410:	d020c415 	stw	zero,-31984(gp)
            break;
    8414:	00000306 	br	8424 <handle_button_press+0x124>
        default:
            printf( "Button press UNKNOWN!!\n");
    8418:	01000074 	movhi	r4,1
    841c:	21277c04 	addi	r4,r4,-25104
    8420:	000878c0 	call	878c <puts>
        }
    }
}
    8424:	e037883a 	mov	sp,fp
    8428:	dfc00117 	ldw	ra,4(sp)
    842c:	df000017 	ldw	fp,0(sp)
    8430:	dec00204 	addi	sp,sp,8
    8434:	f800283a 	ret

00008438 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
    8438:	defffb04 	addi	sp,sp,-20
    843c:	dfc00415 	stw	ra,16(sp)
    8440:	df000315 	stw	fp,12(sp)
    8444:	df000304 	addi	fp,sp,12
    int i;
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    count = 0;
    8448:	d020c305 	stb	zero,-31988(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
    844c:	e03ffe15 	stw	zero,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
    8450:	e0bffe17 	ldw	r2,-8(fp)
    8454:	10000226 	beq	r2,zero,8460 <main+0x28>
    8458:	e13ffe17 	ldw	r4,-8(fp)
    845c:	00081c80 	call	81c8 <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
    8460:	00081e80 	call	81e8 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
    8464:	010000b4 	movhi	r4,2
    8468:	2121a804 	addi	r4,r4,-31072
    846c:	00090880 	call	9088 <usleep>
        if (edge_capture != 0)
    8470:	d0a0c417 	ldw	r2,-31984(gp)
    8474:	10000426 	beq	r2,zero,8488 <main+0x50>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
    8478:	010018c4 	movi	r4,99
    847c:	e17ffe17 	ldw	r5,-8(fp)
    8480:	00083000 	call	8300 <handle_button_press>
    8484:	00000206 	br	8490 <main+0x58>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
    8488:	e13ffe17 	ldw	r4,-8(fp)
    848c:	00082b00 	call	82b0 <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
    8490:	d0a0c303 	ldbu	r2,-31988(gp)
    8494:	10803fcc 	andi	r2,r2,255
    8498:	10803fd8 	cmpnei	r2,r2,255
    849c:	1000221e 	bne	r2,zero,8528 <main+0xf0>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
    84a0:	01000074 	movhi	r4,1
    84a4:	21278204 	addi	r4,r4,-25080
    84a8:	00086a00 	call	86a0 <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
    84ac:	d020c415 	stw	zero,-31984(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
    84b0:	e03fff15 	stw	zero,-4(fp)
            for (i = 0; i<70; ++i)
    84b4:	e03ffd15 	stw	zero,-12(fp)
    84b8:	00001506 	br	8510 <main+0xd8>
            {
                printf(".");
    84bc:	01000b84 	movi	r4,46
    84c0:	00086f40 	call	86f4 <putchar>
                wait_time = i/10;
    84c4:	e0bffd17 	ldw	r2,-12(fp)
    84c8:	1009883a 	mov	r4,r2
    84cc:	01400284 	movi	r5,10
    84d0:	00085a40 	call	85a4 <__divsi3>
    84d4:	e0bfff15 	stw	r2,-4(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
    84d8:	d0a0c417 	ldw	r2,-31984(gp)
    84dc:	10000626 	beq	r2,zero,84f8 <main+0xc0>
                {
                    printf( "\nYou pushed:  " );
    84e0:	01000074 	movhi	r4,1
    84e4:	21278504 	addi	r4,r4,-25068
    84e8:	00086a00 	call	86a0 <printf>
                    handle_button_press('w', lcd);
    84ec:	01001dc4 	movi	r4,119
    84f0:	e17ffe17 	ldw	r5,-8(fp)
    84f4:	00083000 	call	8300 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
    84f8:	010000b4 	movhi	r4,2
    84fc:	2121a804 	addi	r4,r4,-31072
    8500:	00090880 	call	9088 <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
    8504:	e0bffd17 	ldw	r2,-12(fp)
    8508:	10800044 	addi	r2,r2,1
    850c:	e0bffd15 	stw	r2,-12(fp)
    8510:	e0bffd17 	ldw	r2,-12(fp)
    8514:	10801190 	cmplti	r2,r2,70
    8518:	103fe81e 	bne	r2,zero,84bc <main+0x84>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
    851c:	00081e80 	call	81e8 <initial_message>
            lcd_init( lcd );
    8520:	e13ffe17 	ldw	r4,-8(fp)
    8524:	00081c80 	call	81c8 <lcd_init>
        }
        count++;
    8528:	d0a0c303 	ldbu	r2,-31988(gp)
    852c:	10800044 	addi	r2,r2,1
    8530:	d0a0c305 	stb	r2,-31988(gp)
    }
    8534:	003fcb06 	br	8464 <main+0x2c>

00008538 <udivmodsi4>:
    8538:	2900182e 	bgeu	r5,r4,859c <udivmodsi4+0x64>
    853c:	28001716 	blt	r5,zero,859c <udivmodsi4+0x64>
    8540:	00800804 	movi	r2,32
    8544:	00c00044 	movi	r3,1
    8548:	00000206 	br	8554 <udivmodsi4+0x1c>
    854c:	10001126 	beq	r2,zero,8594 <udivmodsi4+0x5c>
    8550:	28000516 	blt	r5,zero,8568 <udivmodsi4+0x30>
    8554:	294b883a 	add	r5,r5,r5
    8558:	10bfffc4 	addi	r2,r2,-1
    855c:	18c7883a 	add	r3,r3,r3
    8560:	293ffa36 	bltu	r5,r4,854c <udivmodsi4+0x14>
    8564:	18000b26 	beq	r3,zero,8594 <udivmodsi4+0x5c>
    8568:	0005883a 	mov	r2,zero
    856c:	21400236 	bltu	r4,r5,8578 <udivmodsi4+0x40>
    8570:	2149c83a 	sub	r4,r4,r5
    8574:	10c4b03a 	or	r2,r2,r3
    8578:	1806d07a 	srli	r3,r3,1
    857c:	280ad07a 	srli	r5,r5,1
    8580:	183ffa1e 	bne	r3,zero,856c <udivmodsi4+0x34>
    8584:	3000011e 	bne	r6,zero,858c <udivmodsi4+0x54>
    8588:	f800283a 	ret
    858c:	2005883a 	mov	r2,r4
    8590:	f800283a 	ret
    8594:	0005883a 	mov	r2,zero
    8598:	003ffa06 	br	8584 <udivmodsi4+0x4c>
    859c:	00c00044 	movi	r3,1
    85a0:	003ff106 	br	8568 <udivmodsi4+0x30>

000085a4 <__divsi3>:
    85a4:	defffe04 	addi	sp,sp,-8
    85a8:	dfc00115 	stw	ra,4(sp)
    85ac:	dc000015 	stw	r16,0(sp)
    85b0:	20000b16 	blt	r4,zero,85e0 <__divsi3+0x3c>
    85b4:	0021883a 	mov	r16,zero
    85b8:	28000c16 	blt	r5,zero,85ec <__divsi3+0x48>
    85bc:	000d883a 	mov	r6,zero
    85c0:	00085380 	call	8538 <udivmodsi4>
    85c4:	0407c83a 	sub	r3,zero,r16
    85c8:	1884f03a 	xor	r2,r3,r2
    85cc:	1405883a 	add	r2,r2,r16
    85d0:	dfc00117 	ldw	ra,4(sp)
    85d4:	dc000017 	ldw	r16,0(sp)
    85d8:	dec00204 	addi	sp,sp,8
    85dc:	f800283a 	ret
    85e0:	0109c83a 	sub	r4,zero,r4
    85e4:	04000044 	movi	r16,1
    85e8:	283ff40e 	bge	r5,zero,85bc <__divsi3+0x18>
    85ec:	014bc83a 	sub	r5,zero,r5
    85f0:	8400005c 	xori	r16,r16,1
    85f4:	003ff106 	br	85bc <__divsi3+0x18>

000085f8 <__modsi3>:
    85f8:	defffd04 	addi	sp,sp,-12
    85fc:	dfc00215 	stw	ra,8(sp)
    8600:	dc400115 	stw	r17,4(sp)
    8604:	dc000015 	stw	r16,0(sp)
    8608:	20000c16 	blt	r4,zero,863c <__modsi3+0x44>
    860c:	0023883a 	mov	r17,zero
    8610:	0021883a 	mov	r16,zero
    8614:	28000d16 	blt	r5,zero,864c <__modsi3+0x54>
    8618:	01800044 	movi	r6,1
    861c:	00085380 	call	8538 <udivmodsi4>
    8620:	1404f03a 	xor	r2,r2,r16
    8624:	8885883a 	add	r2,r17,r2
    8628:	dfc00217 	ldw	ra,8(sp)
    862c:	dc400117 	ldw	r17,4(sp)
    8630:	dc000017 	ldw	r16,0(sp)
    8634:	dec00304 	addi	sp,sp,12
    8638:	f800283a 	ret
    863c:	0109c83a 	sub	r4,zero,r4
    8640:	04400044 	movi	r17,1
    8644:	043fffc4 	movi	r16,-1
    8648:	283ff30e 	bge	r5,zero,8618 <__modsi3+0x20>
    864c:	014bc83a 	sub	r5,zero,r5
    8650:	003ff106 	br	8618 <__modsi3+0x20>

00008654 <__udivsi3>:
    8654:	000d883a 	mov	r6,zero
    8658:	00085381 	jmpi	8538 <udivmodsi4>

0000865c <__umodsi3>:
    865c:	01800044 	movi	r6,1
    8660:	00085381 	jmpi	8538 <udivmodsi4>

00008664 <_printf_r>:
    8664:	defffd04 	addi	sp,sp,-12
    8668:	dfc00015 	stw	ra,0(sp)
    866c:	d9800115 	stw	r6,4(sp)
    8670:	d9c00215 	stw	r7,8(sp)
    8674:	20c00217 	ldw	r3,8(r4)
    8678:	280d883a 	mov	r6,r5
    867c:	01400074 	movhi	r5,1
    8680:	29636404 	addi	r5,r5,-29296
    8684:	19400115 	stw	r5,4(r3)
    8688:	21400217 	ldw	r5,8(r4)
    868c:	d9c00104 	addi	r7,sp,4
    8690:	00088280 	call	8828 <___vfprintf_internal_r>
    8694:	dfc00017 	ldw	ra,0(sp)
    8698:	dec00304 	addi	sp,sp,12
    869c:	f800283a 	ret

000086a0 <printf>:
    86a0:	defffc04 	addi	sp,sp,-16
    86a4:	dfc00015 	stw	ra,0(sp)
    86a8:	d9400115 	stw	r5,4(sp)
    86ac:	d9800215 	stw	r6,8(sp)
    86b0:	d9c00315 	stw	r7,12(sp)
    86b4:	00800074 	movhi	r2,1
    86b8:	10a83f04 	addi	r2,r2,-24324
    86bc:	10800017 	ldw	r2,0(r2)
    86c0:	200b883a 	mov	r5,r4
    86c4:	01000074 	movhi	r4,1
    86c8:	10c00217 	ldw	r3,8(r2)
    86cc:	21236404 	addi	r4,r4,-29296
    86d0:	d9800104 	addi	r6,sp,4
    86d4:	19000115 	stw	r4,4(r3)
    86d8:	11000217 	ldw	r4,8(r2)
    86dc:	0008d6c0 	call	8d6c <__vfprintf_internal>
    86e0:	dfc00017 	ldw	ra,0(sp)
    86e4:	dec00404 	addi	sp,sp,16
    86e8:	f800283a 	ret

000086ec <_putchar_r>:
    86ec:	21800217 	ldw	r6,8(r4)
    86f0:	0008e901 	jmpi	8e90 <_putc_r>

000086f4 <putchar>:
    86f4:	00800074 	movhi	r2,1
    86f8:	10a83f04 	addi	r2,r2,-24324
    86fc:	200b883a 	mov	r5,r4
    8700:	11000017 	ldw	r4,0(r2)
    8704:	21800217 	ldw	r6,8(r4)
    8708:	0008e901 	jmpi	8e90 <_putc_r>

0000870c <_puts_r>:
    870c:	defffd04 	addi	sp,sp,-12
    8710:	dc000015 	stw	r16,0(sp)
    8714:	2021883a 	mov	r16,r4
    8718:	2809883a 	mov	r4,r5
    871c:	dfc00215 	stw	ra,8(sp)
    8720:	dc400115 	stw	r17,4(sp)
    8724:	2823883a 	mov	r17,r5
    8728:	00087a00 	call	87a0 <strlen>
    872c:	81400217 	ldw	r5,8(r16)
    8730:	00c00074 	movhi	r3,1
    8734:	18e36404 	addi	r3,r3,-29296
    8738:	28c00115 	stw	r3,4(r5)
    873c:	8009883a 	mov	r4,r16
    8740:	880d883a 	mov	r6,r17
    8744:	100f883a 	mov	r7,r2
    8748:	0008d900 	call	8d90 <__sfvwrite_small_dev>
    874c:	00ffffc4 	movi	r3,-1
    8750:	10c00926 	beq	r2,r3,8778 <_puts_r+0x6c>
    8754:	81400217 	ldw	r5,8(r16)
    8758:	01800074 	movhi	r6,1
    875c:	8009883a 	mov	r4,r16
    8760:	28800117 	ldw	r2,4(r5)
    8764:	31a78904 	addi	r6,r6,-25052
    8768:	01c00044 	movi	r7,1
    876c:	103ee83a 	callr	r2
    8770:	10bfffe0 	cmpeqi	r2,r2,-1
    8774:	0085c83a 	sub	r2,zero,r2
    8778:	dfc00217 	ldw	ra,8(sp)
    877c:	dc400117 	ldw	r17,4(sp)
    8780:	dc000017 	ldw	r16,0(sp)
    8784:	dec00304 	addi	sp,sp,12
    8788:	f800283a 	ret

0000878c <puts>:
    878c:	00800074 	movhi	r2,1
    8790:	10a83f04 	addi	r2,r2,-24324
    8794:	200b883a 	mov	r5,r4
    8798:	11000017 	ldw	r4,0(r2)
    879c:	000870c1 	jmpi	870c <_puts_r>

000087a0 <strlen>:
    87a0:	2005883a 	mov	r2,r4
    87a4:	10c00007 	ldb	r3,0(r2)
    87a8:	18000226 	beq	r3,zero,87b4 <strlen+0x14>
    87ac:	10800044 	addi	r2,r2,1
    87b0:	003ffc06 	br	87a4 <strlen+0x4>
    87b4:	1105c83a 	sub	r2,r2,r4
    87b8:	f800283a 	ret

000087bc <print_repeat>:
    87bc:	defffb04 	addi	sp,sp,-20
    87c0:	dc800315 	stw	r18,12(sp)
    87c4:	dc400215 	stw	r17,8(sp)
    87c8:	dc000115 	stw	r16,4(sp)
    87cc:	dfc00415 	stw	ra,16(sp)
    87d0:	2025883a 	mov	r18,r4
    87d4:	2823883a 	mov	r17,r5
    87d8:	d9800005 	stb	r6,0(sp)
    87dc:	3821883a 	mov	r16,r7
    87e0:	04000a0e 	bge	zero,r16,880c <print_repeat+0x50>
    87e4:	88800117 	ldw	r2,4(r17)
    87e8:	9009883a 	mov	r4,r18
    87ec:	880b883a 	mov	r5,r17
    87f0:	d80d883a 	mov	r6,sp
    87f4:	01c00044 	movi	r7,1
    87f8:	103ee83a 	callr	r2
    87fc:	843fffc4 	addi	r16,r16,-1
    8800:	103ff726 	beq	r2,zero,87e0 <print_repeat+0x24>
    8804:	00bfffc4 	movi	r2,-1
    8808:	00000106 	br	8810 <print_repeat+0x54>
    880c:	0005883a 	mov	r2,zero
    8810:	dfc00417 	ldw	ra,16(sp)
    8814:	dc800317 	ldw	r18,12(sp)
    8818:	dc400217 	ldw	r17,8(sp)
    881c:	dc000117 	ldw	r16,4(sp)
    8820:	dec00504 	addi	sp,sp,20
    8824:	f800283a 	ret

00008828 <___vfprintf_internal_r>:
    8828:	deffe404 	addi	sp,sp,-112
    882c:	d8c00804 	addi	r3,sp,32
    8830:	df001a15 	stw	fp,104(sp)
    8834:	ddc01915 	stw	r23,100(sp)
    8838:	dd801815 	stw	r22,96(sp)
    883c:	dd401715 	stw	r21,92(sp)
    8840:	dd001615 	stw	r20,88(sp)
    8844:	dcc01515 	stw	r19,84(sp)
    8848:	dc801415 	stw	r18,80(sp)
    884c:	dc401315 	stw	r17,76(sp)
    8850:	dc001215 	stw	r16,72(sp)
    8854:	dfc01b15 	stw	ra,108(sp)
    8858:	2027883a 	mov	r19,r4
    885c:	2839883a 	mov	fp,r5
    8860:	382f883a 	mov	r23,r7
    8864:	d9800f15 	stw	r6,60(sp)
    8868:	0021883a 	mov	r16,zero
    886c:	d8000e15 	stw	zero,56(sp)
    8870:	002d883a 	mov	r22,zero
    8874:	0029883a 	mov	r20,zero
    8878:	0025883a 	mov	r18,zero
    887c:	0023883a 	mov	r17,zero
    8880:	d8000c15 	stw	zero,48(sp)
    8884:	d8000b15 	stw	zero,44(sp)
    8888:	002b883a 	mov	r21,zero
    888c:	d8c00915 	stw	r3,36(sp)
    8890:	d8c00f17 	ldw	r3,60(sp)
    8894:	19000003 	ldbu	r4,0(r3)
    8898:	20803fcc 	andi	r2,r4,255
    889c:	1080201c 	xori	r2,r2,128
    88a0:	10bfe004 	addi	r2,r2,-128
    88a4:	10012426 	beq	r2,zero,8d38 <___vfprintf_internal_r+0x510>
    88a8:	00c00044 	movi	r3,1
    88ac:	a8c01426 	beq	r21,r3,8900 <___vfprintf_internal_r+0xd8>
    88b0:	1d400216 	blt	r3,r21,88bc <___vfprintf_internal_r+0x94>
    88b4:	a8000626 	beq	r21,zero,88d0 <___vfprintf_internal_r+0xa8>
    88b8:	00011b06 	br	8d28 <___vfprintf_internal_r+0x500>
    88bc:	01400084 	movi	r5,2
    88c0:	a9401d26 	beq	r21,r5,8938 <___vfprintf_internal_r+0x110>
    88c4:	014000c4 	movi	r5,3
    88c8:	a9402926 	beq	r21,r5,8970 <___vfprintf_internal_r+0x148>
    88cc:	00011606 	br	8d28 <___vfprintf_internal_r+0x500>
    88d0:	01400944 	movi	r5,37
    88d4:	11410326 	beq	r2,r5,8ce4 <___vfprintf_internal_r+0x4bc>
    88d8:	e0800117 	ldw	r2,4(fp)
    88dc:	d9000005 	stb	r4,0(sp)
    88e0:	e00b883a 	mov	r5,fp
    88e4:	9809883a 	mov	r4,r19
    88e8:	d80d883a 	mov	r6,sp
    88ec:	01c00044 	movi	r7,1
    88f0:	103ee83a 	callr	r2
    88f4:	1000de1e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    88f8:	84000044 	addi	r16,r16,1
    88fc:	00010a06 	br	8d28 <___vfprintf_internal_r+0x500>
    8900:	01400c04 	movi	r5,48
    8904:	11410026 	beq	r2,r5,8d08 <___vfprintf_internal_r+0x4e0>
    8908:	01400944 	movi	r5,37
    890c:	11400a1e 	bne	r2,r5,8938 <___vfprintf_internal_r+0x110>
    8910:	d8800005 	stb	r2,0(sp)
    8914:	e0800117 	ldw	r2,4(fp)
    8918:	9809883a 	mov	r4,r19
    891c:	e00b883a 	mov	r5,fp
    8920:	d80d883a 	mov	r6,sp
    8924:	a80f883a 	mov	r7,r21
    8928:	103ee83a 	callr	r2
    892c:	1000d01e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8930:	84000044 	addi	r16,r16,1
    8934:	0000fb06 	br	8d24 <___vfprintf_internal_r+0x4fc>
    8938:	217ff404 	addi	r5,r4,-48
    893c:	29403fcc 	andi	r5,r5,255
    8940:	00c00244 	movi	r3,9
    8944:	19400736 	bltu	r3,r5,8964 <___vfprintf_internal_r+0x13c>
    8948:	00bfffc4 	movi	r2,-1
    894c:	88800226 	beq	r17,r2,8958 <___vfprintf_internal_r+0x130>
    8950:	8c4002a4 	muli	r17,r17,10
    8954:	00000106 	br	895c <___vfprintf_internal_r+0x134>
    8958:	0023883a 	mov	r17,zero
    895c:	8963883a 	add	r17,r17,r5
    8960:	0000ea06 	br	8d0c <___vfprintf_internal_r+0x4e4>
    8964:	01400b84 	movi	r5,46
    8968:	1140ec26 	beq	r2,r5,8d1c <___vfprintf_internal_r+0x4f4>
    896c:	05400084 	movi	r21,2
    8970:	213ff404 	addi	r4,r4,-48
    8974:	21003fcc 	andi	r4,r4,255
    8978:	00c00244 	movi	r3,9
    897c:	19000736 	bltu	r3,r4,899c <___vfprintf_internal_r+0x174>
    8980:	00bfffc4 	movi	r2,-1
    8984:	90800226 	beq	r18,r2,8990 <___vfprintf_internal_r+0x168>
    8988:	948002a4 	muli	r18,r18,10
    898c:	00000106 	br	8994 <___vfprintf_internal_r+0x16c>
    8990:	0025883a 	mov	r18,zero
    8994:	9125883a 	add	r18,r18,r4
    8998:	0000e306 	br	8d28 <___vfprintf_internal_r+0x500>
    899c:	00c01b04 	movi	r3,108
    89a0:	10c0dc26 	beq	r2,r3,8d14 <___vfprintf_internal_r+0x4ec>
    89a4:	013fffc4 	movi	r4,-1
    89a8:	91000226 	beq	r18,r4,89b4 <___vfprintf_internal_r+0x18c>
    89ac:	d8000b15 	stw	zero,44(sp)
    89b0:	00000106 	br	89b8 <___vfprintf_internal_r+0x190>
    89b4:	04800044 	movi	r18,1
    89b8:	01001a44 	movi	r4,105
    89bc:	11001626 	beq	r2,r4,8a18 <___vfprintf_internal_r+0x1f0>
    89c0:	20800916 	blt	r4,r2,89e8 <___vfprintf_internal_r+0x1c0>
    89c4:	010018c4 	movi	r4,99
    89c8:	11009226 	beq	r2,r4,8c14 <___vfprintf_internal_r+0x3ec>
    89cc:	01001904 	movi	r4,100
    89d0:	11001126 	beq	r2,r4,8a18 <___vfprintf_internal_r+0x1f0>
    89d4:	01001604 	movi	r4,88
    89d8:	1100d21e 	bne	r2,r4,8d24 <___vfprintf_internal_r+0x4fc>
    89dc:	00c00044 	movi	r3,1
    89e0:	d8c00e15 	stw	r3,56(sp)
    89e4:	00001406 	br	8a38 <___vfprintf_internal_r+0x210>
    89e8:	01001cc4 	movi	r4,115
    89ec:	1100a226 	beq	r2,r4,8c78 <___vfprintf_internal_r+0x450>
    89f0:	20800416 	blt	r4,r2,8a04 <___vfprintf_internal_r+0x1dc>
    89f4:	01001bc4 	movi	r4,111
    89f8:	1100ca1e 	bne	r2,r4,8d24 <___vfprintf_internal_r+0x4fc>
    89fc:	05000204 	movi	r20,8
    8a00:	00000e06 	br	8a3c <___vfprintf_internal_r+0x214>
    8a04:	01001d44 	movi	r4,117
    8a08:	11000c26 	beq	r2,r4,8a3c <___vfprintf_internal_r+0x214>
    8a0c:	01001e04 	movi	r4,120
    8a10:	11000926 	beq	r2,r4,8a38 <___vfprintf_internal_r+0x210>
    8a14:	0000c306 	br	8d24 <___vfprintf_internal_r+0x4fc>
    8a18:	b8800104 	addi	r2,r23,4
    8a1c:	b0000726 	beq	r22,zero,8a3c <___vfprintf_internal_r+0x214>
    8a20:	d8800d15 	stw	r2,52(sp)
    8a24:	bdc00017 	ldw	r23,0(r23)
    8a28:	b800080e 	bge	r23,zero,8a4c <___vfprintf_internal_r+0x224>
    8a2c:	05efc83a 	sub	r23,zero,r23
    8a30:	02400044 	movi	r9,1
    8a34:	00000606 	br	8a50 <___vfprintf_internal_r+0x228>
    8a38:	05000404 	movi	r20,16
    8a3c:	b8c00104 	addi	r3,r23,4
    8a40:	d8c00d15 	stw	r3,52(sp)
    8a44:	bdc00017 	ldw	r23,0(r23)
    8a48:	002d883a 	mov	r22,zero
    8a4c:	0013883a 	mov	r9,zero
    8a50:	002b883a 	mov	r21,zero
    8a54:	dd4d883a 	add	r6,sp,r21
    8a58:	b8001626 	beq	r23,zero,8ab4 <___vfprintf_internal_r+0x28c>
    8a5c:	b809883a 	mov	r4,r23
    8a60:	a00b883a 	mov	r5,r20
    8a64:	d9801015 	stw	r6,64(sp)
    8a68:	da401115 	stw	r9,68(sp)
    8a6c:	00086540 	call	8654 <__udivsi3>
    8a70:	a089383a 	mul	r4,r20,r2
    8a74:	00c00244 	movi	r3,9
    8a78:	d9801017 	ldw	r6,64(sp)
    8a7c:	b92fc83a 	sub	r23,r23,r4
    8a80:	da401117 	ldw	r9,68(sp)
    8a84:	1dc00216 	blt	r3,r23,8a90 <___vfprintf_internal_r+0x268>
    8a88:	bdc00c04 	addi	r23,r23,48
    8a8c:	00000506 	br	8aa4 <___vfprintf_internal_r+0x27c>
    8a90:	d8c00e17 	ldw	r3,56(sp)
    8a94:	18000226 	beq	r3,zero,8aa0 <___vfprintf_internal_r+0x278>
    8a98:	bdc00dc4 	addi	r23,r23,55
    8a9c:	00000106 	br	8aa4 <___vfprintf_internal_r+0x27c>
    8aa0:	bdc015c4 	addi	r23,r23,87
    8aa4:	35c00005 	stb	r23,0(r6)
    8aa8:	ad400044 	addi	r21,r21,1
    8aac:	102f883a 	mov	r23,r2
    8ab0:	003fe806 	br	8a54 <___vfprintf_internal_r+0x22c>
    8ab4:	36c7c83a 	sub	r3,r6,sp
    8ab8:	d8c00a15 	stw	r3,40(sp)
    8abc:	90c5c83a 	sub	r2,r18,r3
    8ac0:	302f883a 	mov	r23,r6
    8ac4:	00800e0e 	bge	zero,r2,8b00 <___vfprintf_internal_r+0x2d8>
    8ac8:	302b883a 	mov	r21,r6
    8acc:	3085883a 	add	r2,r6,r2
    8ad0:	01400c04 	movi	r5,48
    8ad4:	d8c00917 	ldw	r3,36(sp)
    8ad8:	a809883a 	mov	r4,r21
    8adc:	a8c0052e 	bgeu	r21,r3,8af4 <___vfprintf_internal_r+0x2cc>
    8ae0:	ad400044 	addi	r21,r21,1
    8ae4:	21400005 	stb	r5,0(r4)
    8ae8:	a82f883a 	mov	r23,r21
    8aec:	a8bff91e 	bne	r21,r2,8ad4 <___vfprintf_internal_r+0x2ac>
    8af0:	00000106 	br	8af8 <___vfprintf_internal_r+0x2d0>
    8af4:	a82f883a 	mov	r23,r21
    8af8:	aeebc83a 	sub	r21,r21,sp
    8afc:	dd400a15 	stw	r21,40(sp)
    8b00:	d8c00a17 	ldw	r3,40(sp)
    8b04:	1a51883a 	add	r8,r3,r9
    8b08:	d8c00b17 	ldw	r3,44(sp)
    8b0c:	8a2bc83a 	sub	r21,r17,r8
    8b10:	18001726 	beq	r3,zero,8b70 <___vfprintf_internal_r+0x348>
    8b14:	48000a26 	beq	r9,zero,8b40 <___vfprintf_internal_r+0x318>
    8b18:	00800b44 	movi	r2,45
    8b1c:	d8800805 	stb	r2,32(sp)
    8b20:	e0800117 	ldw	r2,4(fp)
    8b24:	9809883a 	mov	r4,r19
    8b28:	e00b883a 	mov	r5,fp
    8b2c:	d9800804 	addi	r6,sp,32
    8b30:	01c00044 	movi	r7,1
    8b34:	103ee83a 	callr	r2
    8b38:	10004d1e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8b3c:	84000044 	addi	r16,r16,1
    8b40:	0540070e 	bge	zero,r21,8b60 <___vfprintf_internal_r+0x338>
    8b44:	9809883a 	mov	r4,r19
    8b48:	e00b883a 	mov	r5,fp
    8b4c:	01800c04 	movi	r6,48
    8b50:	a80f883a 	mov	r7,r21
    8b54:	00087bc0 	call	87bc <print_repeat>
    8b58:	1000451e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8b5c:	8561883a 	add	r16,r16,r21
    8b60:	d8c00a17 	ldw	r3,40(sp)
    8b64:	b811883a 	mov	r8,r23
    8b68:	1debc83a 	sub	r21,r3,r23
    8b6c:	00002206 	br	8bf8 <___vfprintf_internal_r+0x3d0>
    8b70:	0540090e 	bge	zero,r21,8b98 <___vfprintf_internal_r+0x370>
    8b74:	9809883a 	mov	r4,r19
    8b78:	e00b883a 	mov	r5,fp
    8b7c:	01800804 	movi	r6,32
    8b80:	a80f883a 	mov	r7,r21
    8b84:	da401115 	stw	r9,68(sp)
    8b88:	00087bc0 	call	87bc <print_repeat>
    8b8c:	da401117 	ldw	r9,68(sp)
    8b90:	1000371e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8b94:	8561883a 	add	r16,r16,r21
    8b98:	483ff126 	beq	r9,zero,8b60 <___vfprintf_internal_r+0x338>
    8b9c:	00800b44 	movi	r2,45
    8ba0:	d8800805 	stb	r2,32(sp)
    8ba4:	e0800117 	ldw	r2,4(fp)
    8ba8:	9809883a 	mov	r4,r19
    8bac:	e00b883a 	mov	r5,fp
    8bb0:	d9800804 	addi	r6,sp,32
    8bb4:	01c00044 	movi	r7,1
    8bb8:	103ee83a 	callr	r2
    8bbc:	10002c1e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8bc0:	84000044 	addi	r16,r16,1
    8bc4:	003fe606 	br	8b60 <___vfprintf_internal_r+0x338>
    8bc8:	423fffc4 	addi	r8,r8,-1
    8bcc:	40800003 	ldbu	r2,0(r8)
    8bd0:	9809883a 	mov	r4,r19
    8bd4:	e00b883a 	mov	r5,fp
    8bd8:	d8800805 	stb	r2,32(sp)
    8bdc:	e0800117 	ldw	r2,4(fp)
    8be0:	d9800804 	addi	r6,sp,32
    8be4:	da001015 	stw	r8,64(sp)
    8be8:	01c00044 	movi	r7,1
    8bec:	103ee83a 	callr	r2
    8bf0:	da001017 	ldw	r8,64(sp)
    8bf4:	10001e1e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8bf8:	8205c83a 	sub	r2,r16,r8
    8bfc:	4549883a 	add	r4,r8,r21
    8c00:	b885883a 	add	r2,r23,r2
    8c04:	013ff016 	blt	zero,r4,8bc8 <___vfprintf_internal_r+0x3a0>
    8c08:	1021883a 	mov	r16,r2
    8c0c:	ddc00d17 	ldw	r23,52(sp)
    8c10:	00004406 	br	8d24 <___vfprintf_internal_r+0x4fc>
    8c14:	00800044 	movi	r2,1
    8c18:	1440080e 	bge	r2,r17,8c3c <___vfprintf_internal_r+0x414>
    8c1c:	8d7fffc4 	addi	r21,r17,-1
    8c20:	9809883a 	mov	r4,r19
    8c24:	e00b883a 	mov	r5,fp
    8c28:	01800804 	movi	r6,32
    8c2c:	a80f883a 	mov	r7,r21
    8c30:	00087bc0 	call	87bc <print_repeat>
    8c34:	10000e1e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8c38:	8561883a 	add	r16,r16,r21
    8c3c:	b8800017 	ldw	r2,0(r23)
    8c40:	9809883a 	mov	r4,r19
    8c44:	e00b883a 	mov	r5,fp
    8c48:	d8800005 	stb	r2,0(sp)
    8c4c:	e0800117 	ldw	r2,4(fp)
    8c50:	d80d883a 	mov	r6,sp
    8c54:	01c00044 	movi	r7,1
    8c58:	bd400104 	addi	r21,r23,4
    8c5c:	103ee83a 	callr	r2
    8c60:	1000031e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8c64:	84000044 	addi	r16,r16,1
    8c68:	a82f883a 	mov	r23,r21
    8c6c:	00002d06 	br	8d24 <___vfprintf_internal_r+0x4fc>
    8c70:	00bfffc4 	movi	r2,-1
    8c74:	00003106 	br	8d3c <___vfprintf_internal_r+0x514>
    8c78:	bd400017 	ldw	r21,0(r23)
    8c7c:	b8c00104 	addi	r3,r23,4
    8c80:	d8c00a15 	stw	r3,40(sp)
    8c84:	a809883a 	mov	r4,r21
    8c88:	00087a00 	call	87a0 <strlen>
    8c8c:	8893c83a 	sub	r9,r17,r2
    8c90:	102f883a 	mov	r23,r2
    8c94:	0240090e 	bge	zero,r9,8cbc <___vfprintf_internal_r+0x494>
    8c98:	480f883a 	mov	r7,r9
    8c9c:	9809883a 	mov	r4,r19
    8ca0:	e00b883a 	mov	r5,fp
    8ca4:	01800804 	movi	r6,32
    8ca8:	da401115 	stw	r9,68(sp)
    8cac:	00087bc0 	call	87bc <print_repeat>
    8cb0:	da401117 	ldw	r9,68(sp)
    8cb4:	103fee1e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8cb8:	8261883a 	add	r16,r16,r9
    8cbc:	e0800117 	ldw	r2,4(fp)
    8cc0:	9809883a 	mov	r4,r19
    8cc4:	e00b883a 	mov	r5,fp
    8cc8:	a80d883a 	mov	r6,r21
    8ccc:	b80f883a 	mov	r7,r23
    8cd0:	103ee83a 	callr	r2
    8cd4:	103fe61e 	bne	r2,zero,8c70 <___vfprintf_internal_r+0x448>
    8cd8:	85e1883a 	add	r16,r16,r23
    8cdc:	ddc00a17 	ldw	r23,40(sp)
    8ce0:	00001006 	br	8d24 <___vfprintf_internal_r+0x4fc>
    8ce4:	05800044 	movi	r22,1
    8ce8:	04bfffc4 	movi	r18,-1
    8cec:	d8000e15 	stw	zero,56(sp)
    8cf0:	05000284 	movi	r20,10
    8cf4:	9023883a 	mov	r17,r18
    8cf8:	d8000c15 	stw	zero,48(sp)
    8cfc:	d8000b15 	stw	zero,44(sp)
    8d00:	b02b883a 	mov	r21,r22
    8d04:	00000806 	br	8d28 <___vfprintf_internal_r+0x500>
    8d08:	dd400b15 	stw	r21,44(sp)
    8d0c:	05400084 	movi	r21,2
    8d10:	00000506 	br	8d28 <___vfprintf_internal_r+0x500>
    8d14:	00c00044 	movi	r3,1
    8d18:	d8c00c15 	stw	r3,48(sp)
    8d1c:	054000c4 	movi	r21,3
    8d20:	00000106 	br	8d28 <___vfprintf_internal_r+0x500>
    8d24:	002b883a 	mov	r21,zero
    8d28:	d8c00f17 	ldw	r3,60(sp)
    8d2c:	18c00044 	addi	r3,r3,1
    8d30:	d8c00f15 	stw	r3,60(sp)
    8d34:	003ed606 	br	8890 <___vfprintf_internal_r+0x68>
    8d38:	8005883a 	mov	r2,r16
    8d3c:	dfc01b17 	ldw	ra,108(sp)
    8d40:	df001a17 	ldw	fp,104(sp)
    8d44:	ddc01917 	ldw	r23,100(sp)
    8d48:	dd801817 	ldw	r22,96(sp)
    8d4c:	dd401717 	ldw	r21,92(sp)
    8d50:	dd001617 	ldw	r20,88(sp)
    8d54:	dcc01517 	ldw	r19,84(sp)
    8d58:	dc801417 	ldw	r18,80(sp)
    8d5c:	dc401317 	ldw	r17,76(sp)
    8d60:	dc001217 	ldw	r16,72(sp)
    8d64:	dec01c04 	addi	sp,sp,112
    8d68:	f800283a 	ret

00008d6c <__vfprintf_internal>:
    8d6c:	2007883a 	mov	r3,r4
    8d70:	01000074 	movhi	r4,1
    8d74:	21283f04 	addi	r4,r4,-24324
    8d78:	21000017 	ldw	r4,0(r4)
    8d7c:	2805883a 	mov	r2,r5
    8d80:	300f883a 	mov	r7,r6
    8d84:	180b883a 	mov	r5,r3
    8d88:	100d883a 	mov	r6,r2
    8d8c:	00088281 	jmpi	8828 <___vfprintf_internal_r>

00008d90 <__sfvwrite_small_dev>:
    8d90:	2880000b 	ldhu	r2,0(r5)
    8d94:	defffa04 	addi	sp,sp,-24
    8d98:	dc000015 	stw	r16,0(sp)
    8d9c:	dfc00515 	stw	ra,20(sp)
    8da0:	dd000415 	stw	r20,16(sp)
    8da4:	dcc00315 	stw	r19,12(sp)
    8da8:	dc800215 	stw	r18,8(sp)
    8dac:	dc400115 	stw	r17,4(sp)
    8db0:	1080020c 	andi	r2,r2,8
    8db4:	2821883a 	mov	r16,r5
    8db8:	10001726 	beq	r2,zero,8e18 <__sfvwrite_small_dev+0x88>
    8dbc:	2880008f 	ldh	r2,2(r5)
    8dc0:	10001216 	blt	r2,zero,8e0c <__sfvwrite_small_dev+0x7c>
    8dc4:	2027883a 	mov	r19,r4
    8dc8:	3025883a 	mov	r18,r6
    8dcc:	3823883a 	mov	r17,r7
    8dd0:	05010004 	movi	r20,1024
    8dd4:	04400b0e 	bge	zero,r17,8e04 <__sfvwrite_small_dev+0x74>
    8dd8:	8140008f 	ldh	r5,2(r16)
    8ddc:	880f883a 	mov	r7,r17
    8de0:	a440010e 	bge	r20,r17,8de8 <__sfvwrite_small_dev+0x58>
    8de4:	01c10004 	movi	r7,1024
    8de8:	9809883a 	mov	r4,r19
    8dec:	900d883a 	mov	r6,r18
    8df0:	0008ee80 	call	8ee8 <_write_r>
    8df4:	0080050e 	bge	zero,r2,8e0c <__sfvwrite_small_dev+0x7c>
    8df8:	88a3c83a 	sub	r17,r17,r2
    8dfc:	90a5883a 	add	r18,r18,r2
    8e00:	003ff406 	br	8dd4 <__sfvwrite_small_dev+0x44>
    8e04:	0005883a 	mov	r2,zero
    8e08:	00000406 	br	8e1c <__sfvwrite_small_dev+0x8c>
    8e0c:	8080000b 	ldhu	r2,0(r16)
    8e10:	10801014 	ori	r2,r2,64
    8e14:	8080000d 	sth	r2,0(r16)
    8e18:	00bfffc4 	movi	r2,-1
    8e1c:	dfc00517 	ldw	ra,20(sp)
    8e20:	dd000417 	ldw	r20,16(sp)
    8e24:	dcc00317 	ldw	r19,12(sp)
    8e28:	dc800217 	ldw	r18,8(sp)
    8e2c:	dc400117 	ldw	r17,4(sp)
    8e30:	dc000017 	ldw	r16,0(sp)
    8e34:	dec00604 	addi	sp,sp,24
    8e38:	f800283a 	ret

00008e3c <putc>:
    8e3c:	defffd04 	addi	sp,sp,-12
    8e40:	00800074 	movhi	r2,1
    8e44:	dc000115 	stw	r16,4(sp)
    8e48:	dfc00215 	stw	ra,8(sp)
    8e4c:	10a36404 	addi	r2,r2,-29296
    8e50:	28800115 	stw	r2,4(r5)
    8e54:	00800074 	movhi	r2,1
    8e58:	10a83f04 	addi	r2,r2,-24324
    8e5c:	d9000005 	stb	r4,0(sp)
    8e60:	2021883a 	mov	r16,r4
    8e64:	11000017 	ldw	r4,0(r2)
    8e68:	d80d883a 	mov	r6,sp
    8e6c:	01c00044 	movi	r7,1
    8e70:	0008d900 	call	8d90 <__sfvwrite_small_dev>
    8e74:	00ffffc4 	movi	r3,-1
    8e78:	10c00126 	beq	r2,r3,8e80 <putc+0x44>
    8e7c:	8005883a 	mov	r2,r16
    8e80:	dfc00217 	ldw	ra,8(sp)
    8e84:	dc000117 	ldw	r16,4(sp)
    8e88:	dec00304 	addi	sp,sp,12
    8e8c:	f800283a 	ret

00008e90 <_putc_r>:
    8e90:	defffd04 	addi	sp,sp,-12
    8e94:	00800074 	movhi	r2,1
    8e98:	dc000115 	stw	r16,4(sp)
    8e9c:	dfc00215 	stw	ra,8(sp)
    8ea0:	10a36404 	addi	r2,r2,-29296
    8ea4:	30800115 	stw	r2,4(r6)
    8ea8:	00800074 	movhi	r2,1
    8eac:	10a83f04 	addi	r2,r2,-24324
    8eb0:	11000017 	ldw	r4,0(r2)
    8eb4:	2821883a 	mov	r16,r5
    8eb8:	01c00044 	movi	r7,1
    8ebc:	300b883a 	mov	r5,r6
    8ec0:	d80d883a 	mov	r6,sp
    8ec4:	dc000005 	stb	r16,0(sp)
    8ec8:	0008d900 	call	8d90 <__sfvwrite_small_dev>
    8ecc:	00ffffc4 	movi	r3,-1
    8ed0:	10c00126 	beq	r2,r3,8ed8 <_putc_r+0x48>
    8ed4:	8005883a 	mov	r2,r16
    8ed8:	dfc00217 	ldw	ra,8(sp)
    8edc:	dc000117 	ldw	r16,4(sp)
    8ee0:	dec00304 	addi	sp,sp,12
    8ee4:	f800283a 	ret

00008ee8 <_write_r>:
    8ee8:	defffd04 	addi	sp,sp,-12
    8eec:	dc000015 	stw	r16,0(sp)
    8ef0:	04000074 	movhi	r16,1
    8ef4:	dc400115 	stw	r17,4(sp)
    8ef8:	84290304 	addi	r16,r16,-23540
    8efc:	2023883a 	mov	r17,r4
    8f00:	2809883a 	mov	r4,r5
    8f04:	300b883a 	mov	r5,r6
    8f08:	380d883a 	mov	r6,r7
    8f0c:	dfc00215 	stw	ra,8(sp)
    8f10:	80000015 	stw	zero,0(r16)
    8f14:	00090ac0 	call	90ac <write>
    8f18:	00ffffc4 	movi	r3,-1
    8f1c:	10c0031e 	bne	r2,r3,8f2c <_write_r+0x44>
    8f20:	80c00017 	ldw	r3,0(r16)
    8f24:	18000126 	beq	r3,zero,8f2c <_write_r+0x44>
    8f28:	88c00015 	stw	r3,0(r17)
    8f2c:	dfc00217 	ldw	ra,8(sp)
    8f30:	dc400117 	ldw	r17,4(sp)
    8f34:	dc000017 	ldw	r16,0(sp)
    8f38:	dec00304 	addi	sp,sp,12
    8f3c:	f800283a 	ret

00008f40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8f40:	deffff04 	addi	sp,sp,-4
    8f44:	01000074 	movhi	r4,1
    8f48:	01400074 	movhi	r5,1
    8f4c:	dfc00015 	stw	ra,0(sp)
    8f50:	21279104 	addi	r4,r4,-25020
    8f54:	29684904 	addi	r5,r5,-24284

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8f58:	2140061e 	bne	r4,r5,8f74 <alt_load+0x34>
    8f5c:	01000074 	movhi	r4,1
    8f60:	01400074 	movhi	r5,1
    8f64:	21200804 	addi	r4,r4,-32736
    8f68:	29600804 	addi	r5,r5,-32736
    8f6c:	2140141e 	bne	r4,r5,8fc0 <alt_load+0x80>
    8f70:	00000d06 	br	8fa8 <alt_load+0x68>
    8f74:	00c00074 	movhi	r3,1
    8f78:	18e84904 	addi	r3,r3,-24284
    8f7c:	00bfff04 	movi	r2,-4
    8f80:	1907c83a 	sub	r3,r3,r4
    8f84:	1886703a 	and	r3,r3,r2
    8f88:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8f8c:	10fff326 	beq	r2,r3,8f5c <alt_load+0x1c>
    8f90:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    8f94:	39c00017 	ldw	r7,0(r7)
    8f98:	110d883a 	add	r6,r2,r4
    8f9c:	10800104 	addi	r2,r2,4
    8fa0:	31c00015 	stw	r7,0(r6)
    8fa4:	003ff906 	br	8f8c <alt_load+0x4c>
    8fa8:	01000074 	movhi	r4,1
    8fac:	01400074 	movhi	r5,1
    8fb0:	21275104 	addi	r4,r4,-25276
    8fb4:	29675104 	addi	r5,r5,-25276

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8fb8:	2140121e 	bne	r4,r5,9004 <alt_load+0xc4>
    8fbc:	00000d06 	br	8ff4 <alt_load+0xb4>
    8fc0:	00c00074 	movhi	r3,1
    8fc4:	18e06304 	addi	r3,r3,-32372
    8fc8:	00bfff04 	movi	r2,-4
    8fcc:	1907c83a 	sub	r3,r3,r4
    8fd0:	1886703a 	and	r3,r3,r2
    8fd4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8fd8:	10fff326 	beq	r2,r3,8fa8 <alt_load+0x68>
    8fdc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    8fe0:	39c00017 	ldw	r7,0(r7)
    8fe4:	110d883a 	add	r6,r2,r4
    8fe8:	10800104 	addi	r2,r2,4
    8fec:	31c00015 	stw	r7,0(r6)
    8ff0:	003ff906 	br	8fd8 <alt_load+0x98>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8ff4:	00094100 	call	9410 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8ff8:	dfc00017 	ldw	ra,0(sp)
    8ffc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    9000:	00094941 	jmpi	9494 <alt_icache_flush_all>
    9004:	00c00074 	movhi	r3,1
    9008:	18e79104 	addi	r3,r3,-25020
    900c:	00bfff04 	movi	r2,-4
    9010:	1907c83a 	sub	r3,r3,r4
    9014:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    9018:	0005883a 	mov	r2,zero
  {
    while( to != end )
    901c:	10fff526 	beq	r2,r3,8ff4 <alt_load+0xb4>
    9020:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    9024:	39c00017 	ldw	r7,0(r7)
    9028:	110d883a 	add	r6,r2,r4
    902c:	10800104 	addi	r2,r2,4
    9030:	31c00015 	stw	r7,0(r6)
    9034:	003ff906 	br	901c <alt_load+0xdc>

00009038 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9038:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    903c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9040:	dfc00115 	stw	ra,4(sp)
    9044:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9048:	00091340 	call	9134 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    904c:	00091540 	call	9154 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9050:	01000074 	movhi	r4,1
    9054:	21278a04 	addi	r4,r4,-25048
    9058:	200b883a 	mov	r5,r4
    905c:	200d883a 	mov	r6,r4
    9060:	000961c0 	call	961c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9064:	d120c817 	ldw	r4,-31968(gp)
    9068:	d160c717 	ldw	r5,-31972(gp)
    906c:	d1a0c617 	ldw	r6,-31976(gp)
    9070:	00084380 	call	8438 <main>
  close(STDOUT_FILENO);
    9074:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9078:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    907c:	000934c0 	call	934c <close>
  exit (result);
    9080:	8009883a 	mov	r4,r16
    9084:	0009b440 	call	9b44 <exit>

00009088 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    9088:	00092d41 	jmpi	92d4 <alt_busy_sleep>

0000908c <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    908c:	00800074 	movhi	r2,1
    9090:	10a84504 	addi	r2,r2,-24300
    9094:	10800017 	ldw	r2,0(r2)
    9098:	10000126 	beq	r2,zero,90a0 <alt_get_errno+0x14>
    909c:	1000683a 	jmp	r2
}
    90a0:	00800074 	movhi	r2,1
    90a4:	10a90304 	addi	r2,r2,-23540
    90a8:	f800283a 	ret

000090ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    90ac:	defffe04 	addi	sp,sp,-8
    90b0:	dfc00115 	stw	ra,4(sp)
    90b4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    90b8:	20001516 	blt	r4,zero,9110 <write+0x64>
    90bc:	20800324 	muli	r2,r4,12
    90c0:	00c00074 	movhi	r3,1
    90c4:	18e7d404 	addi	r3,r3,-24752
    90c8:	10c9883a 	add	r4,r2,r3
  
  if (fd)
    90cc:	20001026 	beq	r4,zero,9110 <write+0x64>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    90d0:	20800217 	ldw	r2,8(r4)
    90d4:	108000cc 	andi	r2,r2,3
    90d8:	10000a26 	beq	r2,zero,9104 <write+0x58>
    90dc:	20800017 	ldw	r2,0(r4)
    90e0:	10800617 	ldw	r2,24(r2)
    90e4:	10000726 	beq	r2,zero,9104 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    90e8:	103ee83a 	callr	r2
    90ec:	1021883a 	mov	r16,r2
    90f0:	10000b0e 	bge	r2,zero,9120 <write+0x74>
      {
        ALT_ERRNO = -rval;
    90f4:	000908c0 	call	908c <alt_get_errno>
    90f8:	0421c83a 	sub	r16,zero,r16
    90fc:	14000015 	stw	r16,0(r2)
    9100:	00000606 	br	911c <write+0x70>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    9104:	000908c0 	call	908c <alt_get_errno>
    9108:	00c00344 	movi	r3,13
    910c:	00000206 	br	9118 <write+0x6c>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9110:	000908c0 	call	908c <alt_get_errno>
    9114:	00c01444 	movi	r3,81
    9118:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    911c:	043fffc4 	movi	r16,-1
}
    9120:	8005883a 	mov	r2,r16
    9124:	dfc00117 	ldw	ra,4(sp)
    9128:	dc000017 	ldw	r16,0(sp)
    912c:	dec00204 	addi	sp,sp,8
    9130:	f800283a 	ret

00009134 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9134:	deffff04 	addi	sp,sp,-4
    9138:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    913c:	00099240 	call	9924 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9140:	00800044 	movi	r2,1
    9144:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9148:	dfc00017 	ldw	ra,0(sp)
    914c:	dec00104 	addi	sp,sp,4
    9150:	f800283a 	ret

00009154 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    9154:	01000074 	movhi	r4,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9158:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    915c:	21040004 	addi	r4,r4,4096
    9160:	000b883a 	mov	r5,zero
    9164:	01800044 	movi	r6,1
    9168:	01c0fa04 	movi	r7,1000
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    916c:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    9170:	00092840 	call	9284 <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9174:	01000074 	movhi	r4,1
    9178:	01400074 	movhi	r5,1
    917c:	2127c904 	addi	r4,r4,-24796
    9180:	29684104 	addi	r5,r5,-24316
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    9184:	dfc00017 	ldw	ra,0(sp)
    9188:	dec00104 	addi	sp,sp,4
    918c:	000941c1 	jmpi	941c <alt_dev_llist_insert>

00009190 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9190:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9194:	21000017 	ldw	r4,0(r4)
    9198:	11c00217 	ldw	r7,8(r2)
    919c:	21000a04 	addi	r4,r4,40
    91a0:	00091b81 	jmpi	91b8 <altera_avalon_jtag_uart_read>

000091a4 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    91a4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    91a8:	21000017 	ldw	r4,0(r4)
    91ac:	11c00217 	ldw	r7,8(r2)
    91b0:	21000a04 	addi	r4,r4,40
    91b4:	00092141 	jmpi	9214 <altera_avalon_jtag_uart_write>

000091b8 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    91b8:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    91bc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    91c0:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    91c4:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    91c8:	11800b2e 	bgeu	r2,r6,91f8 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    91cc:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    91d0:	1a60000c 	andi	r9,r3,32768
    91d4:	48000326 	beq	r9,zero,91e4 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    91d8:	10c00005 	stb	r3,0(r2)
    91dc:	10800044 	addi	r2,r2,1
    91e0:	003ff906 	br	91c8 <altera_avalon_jtag_uart_read+0x10>
    else if (ptr != buffer)
    91e4:	11400226 	beq	r2,r5,91f0 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    91e8:	1145c83a 	sub	r2,r2,r5
    91ec:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    91f0:	403ff526 	beq	r8,zero,91c8 <altera_avalon_jtag_uart_read+0x10>
    91f4:	00000106 	br	91fc <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    91f8:	117ffb1e 	bne	r2,r5,91e8 <altera_avalon_jtag_uart_read+0x30>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    91fc:	39d0000c 	andi	r7,r7,16384
    9200:	3800021e 	bne	r7,zero,920c <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    9204:	00bffec4 	movi	r2,-5
    9208:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    920c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    9210:	f800283a 	ret

00009214 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    9214:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9218:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    921c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9220:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9224:	2980072e 	bgeu	r5,r6,9244 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9228:	38c00037 	ldwio	r3,0(r7)
    922c:	18ffffec 	andhi	r3,r3,65535
    9230:	183ffc26 	beq	r3,zero,9224 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9234:	28c00007 	ldb	r3,0(r5)
    9238:	20c00035 	stwio	r3,0(r4)
    923c:	29400044 	addi	r5,r5,1
    9240:	003ff806 	br	9224 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    9244:	f800283a 	ret

00009248 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9248:	defffe04 	addi	sp,sp,-8
    924c:	dfc00115 	stw	ra,4(sp)
    9250:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9254:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9258:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    925c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9260:	00bfff84 	movi	r2,-2
    9264:	8084703a 	and	r2,r16,r2
    9268:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    926c:	000986c0 	call	986c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9270:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    9274:	dfc00117 	ldw	ra,4(sp)
    9278:	dc000017 	ldw	r16,0(sp)
    927c:	dec00204 	addi	sp,sp,8
    9280:	f800283a 	ret

00009284 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9284:	00c00074 	movhi	r3,1
    9288:	18e90904 	addi	r3,r3,-23516
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    928c:	2005883a 	mov	r2,r4
    9290:	2809883a 	mov	r4,r5
    9294:	19400017 	ldw	r5,0(r3)
    9298:	defffe04 	addi	sp,sp,-8
    929c:	dfc00115 	stw	ra,4(sp)
    92a0:	2800011e 	bne	r5,zero,92a8 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
    92a4:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    92a8:	00c001c4 	movi	r3,7
    92ac:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    92b0:	300b883a 	mov	r5,r6
    92b4:	01800074 	movhi	r6,1
    92b8:	d8000015 	stw	zero,0(sp)
    92bc:	31a49204 	addi	r6,r6,-28088
    92c0:	100f883a 	mov	r7,r2
    92c4:	00094a00 	call	94a0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    92c8:	dfc00117 	ldw	ra,4(sp)
    92cc:	dec00204 	addi	sp,sp,8
    92d0:	f800283a 	ret

000092d4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    92d4:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    92d8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    92dc:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    92e0:	dc000015 	stw	r16,0(sp)
    92e4:	dfc00115 	stw	ra,4(sp)
    92e8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    92ec:	00086540 	call	8654 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    92f0:	10000e26 	beq	r2,zero,932c <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    92f4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    92f8:	013e0034 	movhi	r4,63488
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    92fc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9300:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9304:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9308:	297fffc4 	addi	r5,r5,-1
    930c:	283ffe1e 	bne	r5,zero,9308 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9310:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9314:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9318:	18bffb16 	blt	r3,r2,9308 <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    931c:	8020913a 	slli	r16,r16,4
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9320:	843fffc4 	addi	r16,r16,-1
    9324:	803ffe1e 	bne	r16,zero,9320 <alt_busy_sleep+0x4c>
    9328:	00000306 	br	9338 <alt_busy_sleep+0x64>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    932c:	8020913a 	slli	r16,r16,4
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9330:	843fffc4 	addi	r16,r16,-1
    9334:	043ffe16 	blt	zero,r16,9330 <alt_busy_sleep+0x5c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    9338:	0005883a 	mov	r2,zero
    933c:	dfc00117 	ldw	ra,4(sp)
    9340:	dc000017 	ldw	r16,0(sp)
    9344:	dec00204 	addi	sp,sp,8
    9348:	f800283a 	ret

0000934c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    934c:	defffd04 	addi	sp,sp,-12
    9350:	dc400115 	stw	r17,4(sp)
    9354:	dfc00215 	stw	ra,8(sp)
    9358:	dc000015 	stw	r16,0(sp)
    935c:	2023883a 	mov	r17,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9360:	20001b16 	blt	r4,zero,93d0 <close+0x84>
    9364:	21000324 	muli	r4,r4,12
    9368:	00800074 	movhi	r2,1
    936c:	10a7d404 	addi	r2,r2,-24752
    9370:	2089883a 	add	r4,r4,r2

  if (fd)
    9374:	20001626 	beq	r4,zero,93d0 <close+0x84>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9378:	20c00017 	ldw	r3,0(r4)
    937c:	18c00417 	ldw	r3,16(r3)
    9380:	18000326 	beq	r3,zero,9390 <close+0x44>
    9384:	183ee83a 	callr	r3
    9388:	1021883a 	mov	r16,r2
    938c:	00000106 	br	9394 <close+0x48>
    9390:	0021883a 	mov	r16,zero

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9394:	8809883a 	mov	r4,r17
    9398:	00098140 	call	9814 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    939c:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    93a0:	8000160e 	bge	r16,zero,93fc <close+0xb0>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    93a4:	00800074 	movhi	r2,1
    93a8:	10a84504 	addi	r2,r2,-24300
    93ac:	10800017 	ldw	r2,0(r2)
    93b0:	10000226 	beq	r2,zero,93bc <close+0x70>
    93b4:	103ee83a 	callr	r2
    93b8:	00000206 	br	93c4 <close+0x78>
    93bc:	00800074 	movhi	r2,1
    93c0:	10a90304 	addi	r2,r2,-23540
    {
      ALT_ERRNO = -rval;
    93c4:	0421c83a 	sub	r16,zero,r16
    93c8:	14000015 	stw	r16,0(r2)
    93cc:	00000a06 	br	93f8 <close+0xac>
    93d0:	00800074 	movhi	r2,1
    93d4:	10a84504 	addi	r2,r2,-24300
    93d8:	10800017 	ldw	r2,0(r2)
    93dc:	10000226 	beq	r2,zero,93e8 <close+0x9c>
    93e0:	103ee83a 	callr	r2
    93e4:	00000206 	br	93f0 <close+0xa4>
    93e8:	00800074 	movhi	r2,1
    93ec:	10a90304 	addi	r2,r2,-23540
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    93f0:	00c01444 	movi	r3,81
    93f4:	10c00015 	stw	r3,0(r2)
    return -1;
    93f8:	00bfffc4 	movi	r2,-1
  }
}
    93fc:	dfc00217 	ldw	ra,8(sp)
    9400:	dc400117 	ldw	r17,4(sp)
    9404:	dc000017 	ldw	r16,0(sp)
    9408:	dec00304 	addi	sp,sp,12
    940c:	f800283a 	ret

00009410 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9410:	f800283a 	ret

00009414 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    9414:	3005883a 	mov	r2,r6
    9418:	f800283a 	ret

0000941c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    941c:	20000226 	beq	r4,zero,9428 <alt_dev_llist_insert+0xc>
    9420:	20800217 	ldw	r2,8(r4)
    9424:	1000131e 	bne	r2,zero,9474 <alt_dev_llist_insert+0x58>
    9428:	00800074 	movhi	r2,1
    942c:	10a84504 	addi	r2,r2,-24300
    9430:	10800017 	ldw	r2,0(r2)
    9434:	10000926 	beq	r2,zero,945c <alt_dev_llist_insert+0x40>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9438:	deffff04 	addi	sp,sp,-4
    943c:	dfc00015 	stw	ra,0(sp)
    9440:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    9444:	00c00584 	movi	r3,22
    9448:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    944c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    9450:	dfc00017 	ldw	ra,0(sp)
    9454:	dec00104 	addi	sp,sp,4
    9458:	f800283a 	ret
    945c:	00800074 	movhi	r2,1
    9460:	10a90304 	addi	r2,r2,-23540
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    9464:	00c00584 	movi	r3,22
    9468:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    946c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    9470:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    9474:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9478:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    947c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    9480:	28800017 	ldw	r2,0(r5)
    9484:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    9488:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    948c:	0005883a 	mov	r2,zero
    9490:	f800283a 	ret

00009494 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9494:	0009883a 	mov	r4,zero
    9498:	01420004 	movi	r5,2048
    949c:	0009a981 	jmpi	9a98 <alt_icache_flush>

000094a0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    94a0:	000953c1 	jmpi	953c <alt_iic_isr_register>

000094a4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    94a4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    94a8:	00bfff84 	movi	r2,-2
    94ac:	3084703a 	and	r2,r6,r2
    94b0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    94b4:	00800074 	movhi	r2,1
    94b8:	10a90704 	addi	r2,r2,-23524
    94bc:	01000044 	movi	r4,1
    94c0:	10c00017 	ldw	r3,0(r2)
    94c4:	214a983a 	sll	r5,r4,r5
    94c8:	28cab03a 	or	r5,r5,r3
    94cc:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    94d0:	10800017 	ldw	r2,0(r2)
    94d4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    94d8:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    94dc:	0005883a 	mov	r2,zero
    94e0:	f800283a 	ret

000094e4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    94e4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    94e8:	00bfff84 	movi	r2,-2
    94ec:	3084703a 	and	r2,r6,r2
    94f0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    94f4:	00800074 	movhi	r2,1
    94f8:	10a90704 	addi	r2,r2,-23524
    94fc:	013fff84 	movi	r4,-2
    9500:	10c00017 	ldw	r3,0(r2)
    9504:	214a183a 	rol	r5,r4,r5
    9508:	28ca703a 	and	r5,r5,r3
    950c:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9510:	10800017 	ldw	r2,0(r2)
    9514:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9518:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    951c:	0005883a 	mov	r2,zero
    9520:	f800283a 	ret

00009524 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9524:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9528:	00c00044 	movi	r3,1
    952c:	194a983a 	sll	r5,r3,r5
    9530:	1144703a 	and	r2,r2,r5
}
    9534:	1004c03a 	cmpne	r2,r2,zero
    9538:	f800283a 	ret

0000953c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    953c:	00c007c4 	movi	r3,31
    9540:	19401616 	blt	r3,r5,959c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9544:	defffe04 	addi	sp,sp,-8
    9548:	dfc00115 	stw	ra,4(sp)
    954c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9550:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9554:	00ffff84 	movi	r3,-2
    9558:	80c6703a 	and	r3,r16,r3
    955c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    9560:	280490fa 	slli	r2,r5,3
    9564:	00c00074 	movhi	r3,1
    9568:	18e90b04 	addi	r3,r3,-23508
    956c:	1891883a 	add	r8,r3,r2
    9570:	41800015 	stw	r6,0(r8)
    alt_irq[id].context = isr_context;
    9574:	41c00115 	stw	r7,4(r8)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9578:	30000226 	beq	r6,zero,9584 <alt_iic_isr_register+0x48>
    957c:	00094a40 	call	94a4 <alt_ic_irq_enable>
    9580:	00000106 	br	9588 <alt_iic_isr_register+0x4c>
    9584:	00094e40 	call	94e4 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9588:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    958c:	dfc00117 	ldw	ra,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00204 	addi	sp,sp,8
    9598:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    959c:	00bffa84 	movi	r2,-22
    95a0:	f800283a 	ret

000095a4 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    95a4:	defffe04 	addi	sp,sp,-8
    95a8:	dc000015 	stw	r16,0(sp)
    95ac:	2021883a 	mov	r16,r4
{
  int old;

  old = open (name, flags, mode);
    95b0:	2809883a 	mov	r4,r5
    95b4:	300b883a 	mov	r5,r6
    95b8:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    95bc:	dfc00115 	stw	ra,4(sp)
{
  int old;

  old = open (name, flags, mode);
    95c0:	00096940 	call	9694 <open>

  if (old >= 0)
    95c4:	10001116 	blt	r2,zero,960c <alt_open_fd.constprop.0+0x68>
  {
    fd->dev      = alt_fd_list[old].dev;
    95c8:	10c00324 	muli	r3,r2,12
    95cc:	01000074 	movhi	r4,1
    95d0:	2127d404 	addi	r4,r4,-24752
    95d4:	20cb883a 	add	r5,r4,r3
    95d8:	29400017 	ldw	r5,0(r5)
    95dc:	81400015 	stw	r5,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    95e0:	20cb883a 	add	r5,r4,r3
    fd->fd_flags = alt_fd_list[old].fd_flags;
    95e4:	20c7883a 	add	r3,r4,r3
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    95e8:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    95ec:	18c00217 	ldw	r3,8(r3)

    alt_release_fd (old);
    95f0:	1009883a 	mov	r4,r2
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    95f4:	81400115 	stw	r5,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    95f8:	80c00215 	stw	r3,8(r16)

    alt_release_fd (old);
  }
} 
    95fc:	dfc00117 	ldw	ra,4(sp)
    9600:	dc000017 	ldw	r16,0(sp)
    9604:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    9608:	00098141 	jmpi	9814 <alt_release_fd>
  }
} 
    960c:	dfc00117 	ldw	ra,4(sp)
    9610:	dc000017 	ldw	r16,0(sp)
    9614:	dec00204 	addi	sp,sp,8
    9618:	f800283a 	ret

0000961c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    961c:	defffb04 	addi	sp,sp,-20
    9620:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9624:	04000074 	movhi	r16,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9628:	2005883a 	mov	r2,r4
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    962c:	8427d704 	addi	r16,r16,-24740
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9630:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9634:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9638:	dcc00315 	stw	r19,12(sp)
    963c:	dc800215 	stw	r18,8(sp)
    9640:	2827883a 	mov	r19,r5
    9644:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9648:	100b883a 	mov	r5,r2
    964c:	8009883a 	mov	r4,r16
    9650:	880d883a 	mov	r6,r17
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9654:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9658:	00095a40 	call	95a4 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    965c:	813ffd04 	addi	r4,r16,-12
    9660:	980b883a 	mov	r5,r19
    9664:	000d883a 	mov	r6,zero
    9668:	00095a40 	call	95a4 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    966c:	81000304 	addi	r4,r16,12
    9670:	900b883a 	mov	r5,r18
    9674:	880d883a 	mov	r6,r17
}  
    9678:	dfc00417 	ldw	ra,16(sp)
    967c:	dcc00317 	ldw	r19,12(sp)
    9680:	dc800217 	ldw	r18,8(sp)
    9684:	dc400117 	ldw	r17,4(sp)
    9688:	dc000017 	ldw	r16,0(sp)
    968c:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9690:	00095a41 	jmpi	95a4 <alt_open_fd.constprop.0>

00009694 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9694:	defff904 	addi	sp,sp,-28
    9698:	dc000015 	stw	r16,0(sp)
    969c:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    96a0:	01400074 	movhi	r5,1
    96a4:	29684104 	addi	r5,r5,-24316
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    96a8:	dd400515 	stw	r21,20(sp)
    96ac:	dd000415 	stw	r20,16(sp)
    96b0:	dc800215 	stw	r18,8(sp)
    96b4:	dc400115 	stw	r17,4(sp)
    96b8:	dfc00615 	stw	ra,24(sp)
    96bc:	dcc00315 	stw	r19,12(sp)
    96c0:	2023883a 	mov	r17,r4
    96c4:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    96c8:	000992c0 	call	992c <alt_find_dev>
    96cc:	1029883a 	mov	r20,r2
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  int status = -ENODEV;
  int isafs = 0;
    96d0:	002b883a 	mov	r21,zero
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    96d4:	1000051e 	bne	r2,zero,96ec <open+0x58>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    96d8:	8809883a 	mov	r4,r17
    96dc:	00099a00 	call	99a0 <alt_find_file>
    96e0:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    96e4:	10003b26 	beq	r2,zero,97d4 <open+0x140>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
    96e8:	05400044 	movi	r21,1
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    96ec:	a009883a 	mov	r4,r20
    96f0:	0009a4c0 	call	9a4c <alt_get_fd>
    96f4:	1027883a 	mov	r19,r2
    96f8:	10003916 	blt	r2,zero,97e0 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    96fc:	12000324 	muli	r8,r2,12
    9700:	00c00074 	movhi	r3,1
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9704:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    9708:	18e7d404 	addi	r3,r3,-24752
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    970c:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    9710:	40c9883a 	add	r4,r8,r3
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9714:	814a703a 	and	r5,r16,r5
    9718:	42000204 	addi	r8,r8,8
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    971c:	a8000626 	beq	r21,zero,9738 <open+0xa4>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9720:	1a07883a 	add	r3,r3,r8
    9724:	19400015 	stw	r5,0(r3)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9728:	a0800317 	ldw	r2,12(r20)
    972c:	1000141e 	bne	r2,zero,9780 <open+0xec>
    9730:	9805883a 	mov	r2,r19
    9734:	00002e06 	br	97f0 <open+0x15c>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9738:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    973c:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9740:	10a84004 	addi	r2,r2,-24320

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9744:	1a11883a 	add	r8,r3,r8
    9748:	41400015 	stw	r5,0(r8)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    974c:	200d883a 	mov	r6,r4
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9750:	11400017 	ldw	r5,0(r2)
    9754:	0005883a 	mov	r2,zero
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9758:	1a000017 	ldw	r8,0(r3)
    975c:	31c00017 	ldw	r7,0(r6)
    9760:	41c0031e 	bne	r8,r7,9770 <open+0xdc>
    9764:	19c00217 	ldw	r7,8(r3)
    9768:	3800010e 	bge	r7,zero,9770 <open+0xdc>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    976c:	19001e1e 	bne	r3,r4,97e8 <open+0x154>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9770:	10800044 	addi	r2,r2,1
    9774:	18c00304 	addi	r3,r3,12
    9778:	28bff72e 	bgeu	r5,r2,9758 <open+0xc4>
    977c:	003fea06 	br	9728 <open+0x94>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9780:	800d883a 	mov	r6,r16
    9784:	880b883a 	mov	r5,r17
    9788:	900f883a 	mov	r7,r18
    978c:	103ee83a 	callr	r2
    9790:	1021883a 	mov	r16,r2
    9794:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9798:	8000150e 	bge	r16,zero,97f0 <open+0x15c>
  {
    alt_release_fd (index);  
    979c:	9809883a 	mov	r4,r19
    97a0:	00098140 	call	9814 <alt_release_fd>
    97a4:	00800074 	movhi	r2,1
    97a8:	10a84504 	addi	r2,r2,-24300
    97ac:	10800017 	ldw	r2,0(r2)
    97b0:	10000226 	beq	r2,zero,97bc <open+0x128>
    97b4:	103ee83a 	callr	r2
    97b8:	00000206 	br	97c4 <open+0x130>
    97bc:	00800074 	movhi	r2,1
    97c0:	10a90304 	addi	r2,r2,-23540
    ALT_ERRNO = -status;
    97c4:	0421c83a 	sub	r16,zero,r16
    97c8:	14000015 	stw	r16,0(r2)
    return -1;
    97cc:	00bfffc4 	movi	r2,-1
    97d0:	00000706 	br	97f0 <open+0x15c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    97d4:	043ffb44 	movi	r16,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    97d8:	04ffffc4 	movi	r19,-1
    97dc:	003fef06 	br	979c <open+0x108>
    97e0:	1021883a 	mov	r16,r2
    97e4:	003fed06 	br	979c <open+0x108>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    97e8:	043ffcc4 	movi	r16,-13
    97ec:	003feb06 	br	979c <open+0x108>
  }
  
  /* return the reference upon success */

  return index;
}
    97f0:	dfc00617 	ldw	ra,24(sp)
    97f4:	dd400517 	ldw	r21,20(sp)
    97f8:	dd000417 	ldw	r20,16(sp)
    97fc:	dcc00317 	ldw	r19,12(sp)
    9800:	dc800217 	ldw	r18,8(sp)
    9804:	dc400117 	ldw	r17,4(sp)
    9808:	dc000017 	ldw	r16,0(sp)
    980c:	dec00704 	addi	sp,sp,28
    9810:	f800283a 	ret

00009814 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    9814:	00800084 	movi	r2,2
    9818:	1100060e 	bge	r2,r4,9834 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    981c:	21000324 	muli	r4,r4,12
    9820:	00800074 	movhi	r2,1
    9824:	10a7d404 	addi	r2,r2,-24752
    9828:	1107883a 	add	r3,r2,r4
    982c:	18000215 	stw	zero,8(r3)
    alt_fd_list[fd].dev      = 0;
    9830:	18000015 	stw	zero,0(r3)
    9834:	f800283a 	ret

00009838 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9838:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    983c:	00bfff84 	movi	r2,-2
    9840:	1884703a 	and	r2,r3,r2
    9844:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9848:	21400117 	ldw	r5,4(r4)
    984c:	20800017 	ldw	r2,0(r4)
    9850:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    9854:	21400117 	ldw	r5,4(r4)
    9858:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    985c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    9860:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9864:	1801703a 	wrctl	status,r3
    9868:	f800283a 	ret

0000986c <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    986c:	d0a0ca17 	ldw	r2,-31960(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9870:	defffb04 	addi	sp,sp,-20
    9874:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9878:	d4200917 	ldw	r16,-32732(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    987c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9880:	dc800215 	stw	r18,8(sp)
    9884:	dc400115 	stw	r17,4(sp)
    9888:	dfc00415 	stw	ra,16(sp)
    988c:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9890:	d0a0ca15 	stw	r2,-31960(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9894:	d4600904 	addi	r17,gp,-32732
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    9898:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    989c:	84401a26 	beq	r16,r17,9908 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    98a0:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    98a4:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    98a8:	10000326 	beq	r2,zero,98b8 <alt_tick+0x4c>
    98ac:	d0a0ca17 	ldw	r2,-31960(gp)
    98b0:	1000011e 	bne	r2,zero,98b8 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
    98b4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    98b8:	d0e0ca17 	ldw	r3,-31960(gp)
    98bc:	80800217 	ldw	r2,8(r16)
    98c0:	18800f36 	bltu	r3,r2,9900 <alt_tick+0x94>
    98c4:	80800403 	ldbu	r2,16(r16)
    98c8:	10000d1e 	bne	r2,zero,9900 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
    98cc:	80800317 	ldw	r2,12(r16)
    98d0:	81000517 	ldw	r4,20(r16)
    98d4:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    98d8:	1000031e 	bne	r2,zero,98e8 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
    98dc:	8009883a 	mov	r4,r16
    98e0:	00098380 	call	9838 <alt_alarm_stop>
    98e4:	00000606 	br	9900 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
    98e8:	80c00217 	ldw	r3,8(r16)
    98ec:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    98f0:	d0e0ca17 	ldw	r3,-31960(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    98f4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    98f8:	10c0012e 	bgeu	r2,r3,9900 <alt_tick+0x94>
        {
          alarm->rollover = 1;
    98fc:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9900:	9821883a 	mov	r16,r19
    9904:	003fe506 	br	989c <alt_tick+0x30>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    9908:	dfc00417 	ldw	ra,16(sp)
    990c:	dcc00317 	ldw	r19,12(sp)
    9910:	dc800217 	ldw	r18,8(sp)
    9914:	dc400117 	ldw	r17,4(sp)
    9918:	dc000017 	ldw	r16,0(sp)
    991c:	dec00504 	addi	sp,sp,20
    9920:	f800283a 	ret

00009924 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9924:	000170fa 	wrctl	ienable,zero
    9928:	f800283a 	ret

0000992c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    992c:	defffb04 	addi	sp,sp,-20
    9930:	dcc00315 	stw	r19,12(sp)
    9934:	dc800215 	stw	r18,8(sp)
    9938:	dc400115 	stw	r17,4(sp)
    993c:	dc000015 	stw	r16,0(sp)
    9940:	dfc00415 	stw	ra,16(sp)
    9944:	2027883a 	mov	r19,r4
    9948:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    994c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    9950:	00087a00 	call	87a0 <strlen>
    9954:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9958:	84400726 	beq	r16,r17,9978 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    995c:	81000217 	ldw	r4,8(r16)
    9960:	980b883a 	mov	r5,r19
    9964:	900d883a 	mov	r6,r18
    9968:	0009b640 	call	9b64 <memcmp>
    996c:	10000426 	beq	r2,zero,9980 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    9970:	84000017 	ldw	r16,0(r16)
    9974:	003ff806 	br	9958 <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
    9978:	0005883a 	mov	r2,zero
    997c:	00000106 	br	9984 <alt_find_dev+0x58>
    9980:	8005883a 	mov	r2,r16
}
    9984:	dfc00417 	ldw	ra,16(sp)
    9988:	dcc00317 	ldw	r19,12(sp)
    998c:	dc800217 	ldw	r18,8(sp)
    9990:	dc400117 	ldw	r17,4(sp)
    9994:	dc000017 	ldw	r16,0(sp)
    9998:	dec00504 	addi	sp,sp,20
    999c:	f800283a 	ret

000099a0 <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    99a0:	00800074 	movhi	r2,1
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    99a4:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    99a8:	10a84304 	addi	r2,r2,-24308
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    99ac:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    99b0:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    99b4:	dd000415 	stw	r20,16(sp)
    99b8:	dcc00315 	stw	r19,12(sp)
    99bc:	dc800215 	stw	r18,8(sp)
    99c0:	dfc00515 	stw	ra,20(sp)
    99c4:	dc400115 	stw	r17,4(sp)
    99c8:	2027883a 	mov	r19,r4
    99cc:	1025883a 	mov	r18,r2
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    99d0:	05000bc4 	movi	r20,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    99d4:	84801226 	beq	r16,r18,9a20 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    99d8:	84400217 	ldw	r17,8(r16)
    99dc:	8809883a 	mov	r4,r17
    99e0:	00087a00 	call	87a0 <strlen>
    
    if (next->name[len-1] == '/')
    99e4:	8887883a 	add	r3,r17,r2
    99e8:	18ffffc7 	ldb	r3,-1(r3)
    99ec:	1d00011e 	bne	r3,r20,99f4 <alt_find_file+0x54>
    {
      len -= 1;
    99f0:	10bfffc4 	addi	r2,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    99f4:	9887883a 	add	r3,r19,r2
    99f8:	18c00007 	ldb	r3,0(r3)
    99fc:	1d000126 	beq	r3,r20,9a04 <alt_find_file+0x64>
    9a00:	1800051e 	bne	r3,zero,9a18 <alt_find_file+0x78>
        !memcmp (next->name, name, len))
    9a04:	8809883a 	mov	r4,r17
    9a08:	980b883a 	mov	r5,r19
    9a0c:	100d883a 	mov	r6,r2
    9a10:	0009b640 	call	9b64 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9a14:	10000426 	beq	r2,zero,9a28 <alt_find_file+0x88>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    9a18:	84000017 	ldw	r16,0(r16)
    9a1c:	003fed06 	br	99d4 <alt_find_file+0x34>
  }
  
  /* No match found */
  
  return NULL;     
    9a20:	0005883a 	mov	r2,zero
    9a24:	00000106 	br	9a2c <alt_find_file+0x8c>
    9a28:	8005883a 	mov	r2,r16
}
    9a2c:	dfc00517 	ldw	ra,20(sp)
    9a30:	dd000417 	ldw	r20,16(sp)
    9a34:	dcc00317 	ldw	r19,12(sp)
    9a38:	dc800217 	ldw	r18,8(sp)
    9a3c:	dc400117 	ldw	r17,4(sp)
    9a40:	dc000017 	ldw	r16,0(sp)
    9a44:	dec00604 	addi	sp,sp,24
    9a48:	f800283a 	ret

00009a4c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9a4c:	01800074 	movhi	r6,1
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9a50:	0005883a 	mov	r2,zero
    9a54:	31a7d404 	addi	r6,r6,-24752
    9a58:	01400804 	movi	r5,32
    9a5c:	10c00324 	muli	r3,r2,12
    9a60:	1987883a 	add	r3,r3,r6
  {
    if (!alt_fd_list[i].dev)
    9a64:	19c00017 	ldw	r7,0(r3)
    9a68:	3800071e 	bne	r7,zero,9a88 <alt_get_fd+0x3c>
    {
      alt_fd_list[i].dev = dev;
    9a6c:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
    9a70:	00c00074 	movhi	r3,1
    9a74:	18e84004 	addi	r3,r3,-24320
    9a78:	19000017 	ldw	r4,0(r3)
    9a7c:	2080050e 	bge	r4,r2,9a94 <alt_get_fd+0x48>
      {
        alt_max_fd = i;
    9a80:	18800015 	stw	r2,0(r3)
      }
      rc = i;
      goto alt_get_fd_exit;
    9a84:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9a88:	10800044 	addi	r2,r2,1
    9a8c:	117ff31e 	bne	r2,r5,9a5c <alt_get_fd+0x10>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    9a90:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    9a94:	f800283a 	ret

00009a98 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    9a98:	00820004 	movi	r2,2048
    9a9c:	1140012e 	bgeu	r2,r5,9aa4 <alt_icache_flush+0xc>
    9aa0:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    9aa4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9aa8:	2005883a 	mov	r2,r4
    9aac:	1140032e 	bgeu	r2,r5,9abc <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9ab0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9ab4:	10800804 	addi	r2,r2,32
    9ab8:	003ffc06 	br	9aac <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9abc:	210007cc 	andi	r4,r4,31
    9ac0:	20000126 	beq	r4,zero,9ac8 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9ac4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    9ac8:	0000203a 	flushp
    9acc:	f800283a 	ret

00009ad0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    9ad0:	213ffe84 	addi	r4,r4,-6
    9ad4:	008003c4 	movi	r2,15
    9ad8:	11001636 	bltu	r2,r4,9b34 <alt_exception_cause_generated_bad_addr+0x64>
    9adc:	200890ba 	slli	r4,r4,2
    9ae0:	00800074 	movhi	r2,1
    9ae4:	10a6bd04 	addi	r2,r2,-25868
    9ae8:	2089883a 	add	r4,r4,r2
    9aec:	20800017 	ldw	r2,0(r4)
    9af0:	1000683a 	jmp	r2
    9af4:	00009b3c 	xorhi	zero,zero,620
    9af8:	00009b3c 	xorhi	zero,zero,620
    9afc:	00009b34 	movhi	zero,620
    9b00:	00009b34 	movhi	zero,620
    9b04:	00009b34 	movhi	zero,620
    9b08:	00009b3c 	xorhi	zero,zero,620
    9b0c:	00009b34 	movhi	zero,620
    9b10:	00009b34 	movhi	zero,620
    9b14:	00009b3c 	xorhi	zero,zero,620
    9b18:	00009b3c 	xorhi	zero,zero,620
    9b1c:	00009b34 	movhi	zero,620
    9b20:	00009b3c 	xorhi	zero,zero,620
    9b24:	00009b34 	movhi	zero,620
    9b28:	00009b34 	movhi	zero,620
    9b2c:	00009b34 	movhi	zero,620
    9b30:	00009b3c 	xorhi	zero,zero,620
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    9b34:	0005883a 	mov	r2,zero
    9b38:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    9b3c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    9b40:	f800283a 	ret

00009b44 <exit>:
    9b44:	defffe04 	addi	sp,sp,-8
    9b48:	000b883a 	mov	r5,zero
    9b4c:	dc000015 	stw	r16,0(sp)
    9b50:	dfc00115 	stw	ra,4(sp)
    9b54:	2021883a 	mov	r16,r4
    9b58:	0009b940 	call	9b94 <__call_exitprocs>
    9b5c:	8009883a 	mov	r4,r16
    9b60:	0009d300 	call	9d30 <_exit>

00009b64 <memcmp>:
    9b64:	218d883a 	add	r6,r4,r6
    9b68:	21800826 	beq	r4,r6,9b8c <memcmp+0x28>
    9b6c:	20800003 	ldbu	r2,0(r4)
    9b70:	28c00003 	ldbu	r3,0(r5)
    9b74:	10c00226 	beq	r2,r3,9b80 <memcmp+0x1c>
    9b78:	10c5c83a 	sub	r2,r2,r3
    9b7c:	f800283a 	ret
    9b80:	21000044 	addi	r4,r4,1
    9b84:	29400044 	addi	r5,r5,1
    9b88:	003ff706 	br	9b68 <memcmp+0x4>
    9b8c:	0005883a 	mov	r2,zero
    9b90:	f800283a 	ret

00009b94 <__call_exitprocs>:
    9b94:	00800074 	movhi	r2,1
    9b98:	10a83e04 	addi	r2,r2,-24328
    9b9c:	10800017 	ldw	r2,0(r2)
    9ba0:	defff304 	addi	sp,sp,-52
    9ba4:	ddc00a15 	stw	r23,40(sp)
    9ba8:	d8800015 	stw	r2,0(sp)
    9bac:	05c00034 	movhi	r23,0
    9bb0:	10800c04 	addi	r2,r2,48
    9bb4:	dc800515 	stw	r18,20(sp)
    9bb8:	dfc00c15 	stw	ra,48(sp)
    9bbc:	df000b15 	stw	fp,44(sp)
    9bc0:	dd800915 	stw	r22,36(sp)
    9bc4:	dd400815 	stw	r21,32(sp)
    9bc8:	dd000715 	stw	r20,28(sp)
    9bcc:	dcc00615 	stw	r19,24(sp)
    9bd0:	dc400415 	stw	r17,16(sp)
    9bd4:	dc000315 	stw	r16,12(sp)
    9bd8:	d9000115 	stw	r4,4(sp)
    9bdc:	2825883a 	mov	r18,r5
    9be0:	d8800215 	stw	r2,8(sp)
    9be4:	bdc00004 	addi	r23,r23,0
    9be8:	d8800017 	ldw	r2,0(sp)
    9bec:	dc400217 	ldw	r17,8(sp)
    9bf0:	14c00c17 	ldw	r19,48(r2)
    9bf4:	98004226 	beq	r19,zero,9d00 <__call_exitprocs+0x16c>
    9bf8:	9c000117 	ldw	r16,4(r19)
    9bfc:	00900034 	movhi	r2,16384
    9c00:	10bfffc4 	addi	r2,r2,-1
    9c04:	9d002217 	ldw	r20,136(r19)
    9c08:	857fffc4 	addi	r21,r16,-1
    9c0c:	80a1883a 	add	r16,r16,r2
    9c10:	8421883a 	add	r16,r16,r16
    9c14:	8421883a 	add	r16,r16,r16
    9c18:	a42d883a 	add	r22,r20,r16
    9c1c:	84000204 	addi	r16,r16,8
    9c20:	9c21883a 	add	r16,r19,r16
    9c24:	a8002616 	blt	r21,zero,9cc0 <__call_exitprocs+0x12c>
    9c28:	90000326 	beq	r18,zero,9c38 <__call_exitprocs+0xa4>
    9c2c:	a0002026 	beq	r20,zero,9cb0 <__call_exitprocs+0x11c>
    9c30:	b1002017 	ldw	r4,128(r22)
    9c34:	24801e1e 	bne	r4,r18,9cb0 <__call_exitprocs+0x11c>
    9c38:	99000117 	ldw	r4,4(r19)
    9c3c:	82000017 	ldw	r8,0(r16)
    9c40:	213fffc4 	addi	r4,r4,-1
    9c44:	a900021e 	bne	r21,r4,9c50 <__call_exitprocs+0xbc>
    9c48:	9d400115 	stw	r21,4(r19)
    9c4c:	00000106 	br	9c54 <__call_exitprocs+0xc0>
    9c50:	80000015 	stw	zero,0(r16)
    9c54:	40001626 	beq	r8,zero,9cb0 <__call_exitprocs+0x11c>
    9c58:	9f000117 	ldw	fp,4(r19)
    9c5c:	a0000526 	beq	r20,zero,9c74 <__call_exitprocs+0xe0>
    9c60:	00800044 	movi	r2,1
    9c64:	1552983a 	sll	r9,r2,r21
    9c68:	a1404017 	ldw	r5,256(r20)
    9c6c:	494a703a 	and	r5,r9,r5
    9c70:	2800021e 	bne	r5,zero,9c7c <__call_exitprocs+0xe8>
    9c74:	403ee83a 	callr	r8
    9c78:	00000906 	br	9ca0 <__call_exitprocs+0x10c>
    9c7c:	a1004117 	ldw	r4,260(r20)
    9c80:	4908703a 	and	r4,r9,r4
    9c84:	2000041e 	bne	r4,zero,9c98 <__call_exitprocs+0x104>
    9c88:	d9000117 	ldw	r4,4(sp)
    9c8c:	b1400017 	ldw	r5,0(r22)
    9c90:	403ee83a 	callr	r8
    9c94:	00000206 	br	9ca0 <__call_exitprocs+0x10c>
    9c98:	b1000017 	ldw	r4,0(r22)
    9c9c:	403ee83a 	callr	r8
    9ca0:	99000117 	ldw	r4,4(r19)
    9ca4:	e13fd01e 	bne	fp,r4,9be8 <__call_exitprocs+0x54>
    9ca8:	89000017 	ldw	r4,0(r17)
    9cac:	24ffce1e 	bne	r4,r19,9be8 <__call_exitprocs+0x54>
    9cb0:	ad7fffc4 	addi	r21,r21,-1
    9cb4:	b5bfff04 	addi	r22,r22,-4
    9cb8:	843fff04 	addi	r16,r16,-4
    9cbc:	003fd906 	br	9c24 <__call_exitprocs+0x90>
    9cc0:	b8000f26 	beq	r23,zero,9d00 <__call_exitprocs+0x16c>
    9cc4:	99400117 	ldw	r5,4(r19)
    9cc8:	99000017 	ldw	r4,0(r19)
    9ccc:	2800091e 	bne	r5,zero,9cf4 <__call_exitprocs+0x160>
    9cd0:	20000826 	beq	r4,zero,9cf4 <__call_exitprocs+0x160>
    9cd4:	89000015 	stw	r4,0(r17)
    9cd8:	a0000226 	beq	r20,zero,9ce4 <__call_exitprocs+0x150>
    9cdc:	a009883a 	mov	r4,r20
    9ce0:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    9ce4:	9809883a 	mov	r4,r19
    9ce8:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    9cec:	8cc00017 	ldw	r19,0(r17)
    9cf0:	003fc006 	br	9bf4 <__call_exitprocs+0x60>
    9cf4:	9823883a 	mov	r17,r19
    9cf8:	2027883a 	mov	r19,r4
    9cfc:	003fbd06 	br	9bf4 <__call_exitprocs+0x60>
    9d00:	dfc00c17 	ldw	ra,48(sp)
    9d04:	df000b17 	ldw	fp,44(sp)
    9d08:	ddc00a17 	ldw	r23,40(sp)
    9d0c:	dd800917 	ldw	r22,36(sp)
    9d10:	dd400817 	ldw	r21,32(sp)
    9d14:	dd000717 	ldw	r20,28(sp)
    9d18:	dcc00617 	ldw	r19,24(sp)
    9d1c:	dc800517 	ldw	r18,20(sp)
    9d20:	dc400417 	ldw	r17,16(sp)
    9d24:	dc000317 	ldw	r16,12(sp)
    9d28:	dec00d04 	addi	sp,sp,52
    9d2c:	f800283a 	ret

00009d30 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9d30:	20000226 	beq	r4,zero,9d3c <_exit+0xc>
    ALT_SIM_FAIL();
    9d34:	002af070 	cmpltui	zero,zero,43969
    9d38:	00000106 	br	9d40 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    9d3c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9d40:	003fff06 	br	9d40 <_exit+0x10>
