
uart.elf:     file format elf32-littlenios2
uart.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x2000818c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x000002b0 memsz 0x000002b0 flags r--
    LOAD off    0x00002000 vaddr 0x20008000 paddr 0x20008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002020 vaddr 0x20008020 paddr 0x20008020 align 2**12
         filesz 0x00002d44 memsz 0x00002d44 flags r-x
    LOAD off    0x000052b0 vaddr 0x000002b0 paddr 0x2000ad64 align 2**12
         filesz 0x0000037c memsz 0x000004ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20008000  20008000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  20008020  20008020  00002020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002bd8  2000818c  2000818c  0000218c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002b0  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000037c  000002b0  2000ad64  000052b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  0000062c  2000b0e0  0000562c  2**2
                  ALLOC, SMALL_DATA
  6 .mem_if_lpddr2_emif_0 00000000  0000079c  0000079c  0000562c  2**0
                  CONTENTS
  7 .onchip_mem   00000000  2000b0e0  2000b0e0  0000562c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000562c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000710  00000000  00000000  00005650  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00006486  00000000  00000000  00005d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002258  00000000  00000000  0000c1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000339a  00000000  00000000  0000e43e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000cbc  00000000  00000000  000117d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001c0c  00000000  00000000  00012494  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000013e7  00000000  00000000  000140a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00015488  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000370  00000000  00000000  000154a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00017bed  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00017bf0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00017bf3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00017bf4  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00017bf5  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00017bf9  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00017bfd  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00017c01  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00017c0a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00017c13  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  00017c1c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000014  00000000  00000000  00017c22  2**0
                  CONTENTS, READONLY
 30 .jdi          00007537  00000000  00000000  00017c36  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000f3ed1  00000000  00000000  0001f16d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20008000 l    d  .entry	00000000 .entry
20008020 l    d  .exceptions	00000000 .exceptions
2000818c l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
000002b0 l    d  .rwdata	00000000 .rwdata
0000062c l    d  .bss	00000000 .bss
0000079c l    d  .mem_if_lpddr2_emif_0	00000000 .mem_if_lpddr2_emif_0
2000b0e0 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../uart_bsp//obj/HAL/src/crt0.o
200081c4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
20008f80 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000002b0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
20009658 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_read.c
20009a4c l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000005fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
20009b68 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000041c l     O .rwdata	0000002c jtag_uart
000003ec l     O .rwdata	00000030 sgdma_0
000003bc l     O .rwdata	00000030 sgdma_1
00000390 l     O .rwdata	0000002c uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
20009d68 l     F .text	0000005c alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
2000a33c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
2000a5d8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2000a8d4 l     F .text	00000078 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000678 g     O .bss	00000004 alt_instruction_exception_handler
2000987c g     F .text	00000050 alt_main
20008e80 g     F .text	00000080 _puts_r
00000640 g     O .bss	00000004 receive_dma
0000069c g     O .bss	00000100 alt_irq
2000ad64 g       *ABS*	00000000 __flash_rwdata_start
0000079c g       *ABS*	00000000 __alt_heap_start
20008e34 g     F .text	0000004c printf
20009e40 g     F .text	00000080 alt_avalon_sgdma_do_sync_transfer
0000062c g     O .bss	00000001 rx_done
20009fd8 g     F .text	00000114 alt_avalon_sgdma_construct_descriptor_burst
2000aab0 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
20008000 g     F .entry	0000001c __reset
2000a16c g     F .text	0000004c alt_avalon_sgdma_construct_stream_to_mem_desc_burst
20008020 g       *ABS*	00000000 __flash_exceptions_start
0000065c g     O .bss	00000004 errno
00000664 g     O .bss	00000004 alt_argv
000085f0 g       *ABS*	00000000 _gp
200081c8 g     F .text	0000002c transmit_callback_function
00000448 g     O .rwdata	00000180 alt_fd_list
2000a658 g     F .text	00000074 alt_find_dev
2000a94c g     F .text	00000078 alt_io_redirect
20008f00 g     F .text	00000014 puts
2000aaf0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00000000 g       *ABS*	00000000 __alt_mem_mem_if_lpddr2_emif_0
2000a1e0 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
20009cd8 g     F .text	0000005c altera_avalon_jtag_uart_read
20008b90 g     F .text	00000014 malloc
20008df8 g     F .text	0000003c _printf_r
20009774 g     F .text	00000008 .hidden __udivsi3
00000644 g     O .bss	00000008 receive_descriptors_copy
2000aab8 g     F .text	00000038 alt_icache_flush
20009ee8 g     F .text	0000001c alt_avalon_sgdma_stop
20008f14 g     F .text	00000050 _sbrk_r
2000a5d0 g     F .text	00000004 alt_dcache_flush
00000608 g     O .rwdata	00000004 alt_max_fd
000005f4 g     O .rwdata	00000004 _global_impure_ptr
0000079c g       *ABS*	00000000 __bss_end
2000a86c g     F .text	00000068 alt_iic_isr_register
20009dc4 g     F .text	0000007c alt_avalon_sgdma_do_async_transfer
2000a9f8 g     F .text	000000b8 alt_tick
2000a854 g     F .text	00000018 alt_ic_irq_enabled
2000a9c4 g     F .text	00000034 alt_alarm_stop
0000066c g     O .bss	00000004 alt_irq_active
20008000 g       *ABS*	00000000 __alt_mem_onchip_mem
200080fc g     F .exceptions	00000064 alt_irq_handler
000005c8 g     O .rwdata	00000028 alt_dev_null
20009f04 g     F .text	0000002c alt_avalon_sgdma_check_descriptor_status
2000a5d4 g     F .text	00000004 alt_dcache_flush_all
0000062c g       *ABS*	00000000 __ram_rwdata_end
0000060c g     O .rwdata	00000008 alt_dev_list
20009b88 g     F .text	00000088 write
20009f88 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
000002b0 g       *ABS*	00000000 __ram_rodata_end
2000977c g     F .text	00000008 .hidden __umodsi3
2000a230 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
20009ec0 g     F .text	00000010 alt_avalon_sgdma_register_callback
0000079c g       *ABS*	00000000 end
2000a47c g     F .text	00000090 altera_avalon_uart_write
20008160 g     F .exceptions	0000002c alt_instruction_exception_entry
200081f4 g     F .text	00000154 receive_callback_function
20000000 g       *ABS*	00000000 __alt_stack_pointer
20009fb8 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
2000a378 g     F .text	00000050 alt_avalon_timer_sc_init
2000a3dc g     F .text	00000014 altera_avalon_uart_write_fd
20009d34 g     F .text	00000034 altera_avalon_jtag_uart_write
2000a134 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
20008fec g     F .text	00000544 ___vfprintf_internal_r
2000a1b8 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
20008bb8 g     F .text	000000e4 _free_r
0000063c g     O .bss	00000004 rx_buffer_counter
2000abb4 g     F .text	0000019c __call_exitprocs
2000818c g     F .text	0000003c _start
00000674 g     O .bss	00000004 _alt_tick_rate
20009f30 g     F .text	00000058 alt_avalon_sgdma_open
00000670 g     O .bss	00000004 _alt_nticks
20009a6c g     F .text	0000008c read
20009c30 g     F .text	00000080 alt_sys_init
000005f0 g     O .rwdata	00000001 tx_done
0000064c g     O .bss	00000008 receive_descriptors
000002b0 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
20009cb0 g     F .text	00000014 altera_avalon_jtag_uart_read_fd
2000a778 g     F .text	0000004c alt_get_fd
2000ab84 g     F .text	00000030 memcmp
0000079c g       *ABS*	00000000 __alt_stack_base
2000a6cc g     F .text	000000ac alt_find_file
2000a5e0 g     F .text	00000078 alt_dev_llist_insert
20009b1c g     F .text	0000004c sbrk
20009ed0 g     F .text	00000018 alt_avalon_sgdma_start
20008348 g     F .text	00000148 descriptor_allocation
20009554 g     F .text	000000ac __sfvwrite_small_dev
0000062c g       *ABS*	00000000 __bss_start
20008520 g     F .text	00000670 main
00000660 g     O .bss	00000004 alt_envp
20009cc4 g     F .text	00000014 altera_avalon_jtag_uart_write_fd
00000600 g     O .rwdata	00000008 alt_sgdma_list
20000000 g       *ABS*	00000000 __alt_heap_limit
20008c9c g     F .text	0000015c _malloc_r
0000061c g     O .rwdata	00000004 alt_errno
200096c4 g     F .text	00000054 .hidden __divsi3
00000000 g       *ABS*	00000000 __flash_rodata_start
20009c10 g     F .text	00000020 alt_irq_init
20009af8 g     F .text	00000024 alt_release_fd
20009600 g     F .text	00000058 _write_r
00000630 g     O .bss	00000004 dbufr
000005f8 g     O .rwdata	00000004 _impure_ptr
00000668 g     O .bss	00000004 alt_argc
20008020 g       .exceptions	00000000 alt_irq_entry
00000614 g     O .rwdata	00000008 alt_fs_list
20008020 g       *ABS*	00000000 __ram_exceptions_start
2000a7d0 g     F .text	00000004 alt_ic_isr_register
0000062c g       *ABS*	00000000 _edata
2000a3c8 g     F .text	00000014 altera_avalon_uart_read_fd
0000079c g       *ABS*	00000000 _end
00000634 g     O .bss	00000004 rx_buf_ptr
2000818c g       *ABS*	00000000 __ram_exceptions_end
20008490 g     F .text	00000090 readall
2000a814 g     F .text	00000040 alt_ic_irq_disable
2000a270 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
2000ab64 g     F .text	00000020 exit
00000638 g     O .bss	00000004 rx_char_count
20009718 g     F .text	0000005c .hidden __modsi3
20000000 g       *ABS*	00000000 __alt_data_end
20008020 g     F .exceptions	00000000 alt_exception
2000ad50 g     F .text	00000014 _exit
20008f64 g     F .text	0000001c strlen
200098cc g     F .text	00000180 open
00000654 g     O .bss	00000004 __malloc_sbrk_start
2000a7c4 g     F .text	0000000c alt_icache_flush_all
00000620 g     O .rwdata	00000004 alt_priority_mask
0000067c g     O .bss	00000020 receive_ptrs
00000658 g     O .bss	00000004 __malloc_free_list
2000a7d4 g     F .text	00000040 alt_ic_irq_enable
20009530 g     F .text	00000024 __vfprintf_internal
2000a3f0 g     F .text	0000008c altera_avalon_uart_read
2000a0ec g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00000624 g     O .rwdata	00000008 alt_alarm_list
2000a50c g     F .text	000000c4 close
20009784 g     F .text	000000f8 alt_load
2000a2b8 g     F .text	00000084 alt_avalon_sgdma_init
20008ba4 g     F .text	00000014 free



Disassembly of section .entry:

20008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20008000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
20008004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20008008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2000800c:	00bffd16 	blt	zero,r2,20008004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20008010:	00480034 	movhi	at,8192
    ori r1, r1, %lo(_start)
20008014:	08606314 	ori	at,at,33164
    jmp r1
20008018:	0800683a 	jmp	at
2000801c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20008020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20008024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20008028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2000802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20008030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20008034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20008038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2000803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20008040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20008044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20008048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2000804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20008050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20008054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20008058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2000805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20008060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20008064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20008068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2000806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20008070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20008074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20008078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2000807c:	10000326 	beq	r2,zero,2000808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20008080:	20000226 	beq	r4,zero,2000808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20008084:	00080fc0 	call	200080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20008088:	00000706 	br	200080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2000808c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20008090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20008094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20008098:	00081600 	call	20008160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2000809c:	1000021e 	bne	r2,zero,200080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200080f8:	ef80083a 	eret

200080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200080fc:	defffe04 	addi	sp,sp,-8
20008100:	dfc00115 	stw	ra,4(sp)
20008104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20008108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2000810c:	04000034 	movhi	r16,0
20008110:	8401a704 	addi	r16,r16,1692

  active = alt_irq_pending ();

  do
  {
    i = 0;
20008114:	0005883a 	mov	r2,zero
    mask = 1;
20008118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2000811c:	190a703a 	and	r5,r3,r4
20008120:	28000c26 	beq	r5,zero,20008154 <alt_irq_handler+0x58>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
20008124:	100490fa 	slli	r2,r2,3
20008128:	8087883a 	add	r3,r16,r2
2000812c:	1805883a 	mov	r2,r3
20008130:	11000117 	ldw	r4,4(r2)
20008134:	18c00017 	ldw	r3,0(r3)
20008138:	183ee83a 	callr	r3
2000813c:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
20008140:	203ff41e 	bne	r4,zero,20008114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
20008144:	dfc00117 	ldw	ra,4(sp)
20008148:	dc000017 	ldw	r16,0(sp)
2000814c:	dec00204 	addi	sp,sp,8
20008150:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
20008154:	18c7883a 	add	r3,r3,r3
      i++;
20008158:	10800044 	addi	r2,r2,1

    } while (1);
2000815c:	003fef06 	br	2000811c <alt_irq_handler+0x20>

20008160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
20008160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
20008164:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
20008168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
2000816c:	d0e02217 	ldw	r3,-32632(gp)
20008170:	18000326 	beq	r3,zero,20008180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
20008174:	11001f0c 	andi	r4,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20008178:	2008d0ba 	srli	r4,r4,2
2000817c:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20008180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
20008184:	0005883a 	mov	r2,zero
20008188:	f800283a 	ret

Disassembly of section .text:

2000818c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
2000818c:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20008190:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20008194:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
20008198:	d6a17c14 	ori	gp,gp,34288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
2000819c:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
200081a0:	10818b14 	ori	r2,r2,1580

    movhi r3, %hi(__bss_end)
200081a4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
200081a8:	18c1e714 	ori	r3,r3,1948

    beq r2, r3, 1f
200081ac:	10c00326 	beq	r2,r3,200081bc <_start+0x30>

0:
    stw zero, (r2)
200081b0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
200081b4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
200081b8:	10fffd36 	bltu	r2,r3,200081b0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
200081bc:	00097840 	call	20009784 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
200081c0:	000987c0 	call	2000987c <alt_main>

200081c4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
200081c4:	003fff06 	br	200081c4 <alt_after_alt_main>

200081c8 <transmit_callback_function>:
alt_sgdma_dev *receive_dma;
char *rx_buf_ptr = 0;
int rx_char_count = 0;
int rx_buffer_counter = 0;

void transmit_callback_function(void * context) {
200081c8:	defffe04 	addi	sp,sp,-8
200081cc:	df000115 	stw	fp,4(sp)
200081d0:	df000104 	addi	fp,sp,4
200081d4:	e13fff15 	stw	r4,-4(fp)
	tx_done++; /* main will be polling for this value being 1 */
200081d8:	d0a00003 	ldbu	r2,-32768(gp)
200081dc:	10800044 	addi	r2,r2,1
200081e0:	d0a00005 	stb	r2,-32768(gp)
}
200081e4:	e037883a 	mov	sp,fp
200081e8:	df000017 	ldw	fp,0(sp)
200081ec:	dec00104 	addi	sp,sp,4
200081f0:	f800283a 	ret

200081f4 <receive_callback_function>:

void receive_callback_function(void * context) {
200081f4:	defffb04 	addi	sp,sp,-20
200081f8:	dfc00415 	stw	ra,16(sp)
200081fc:	df000315 	stw	fp,12(sp)
20008200:	df000304 	addi	fp,sp,12
20008204:	e13fff15 	stw	r4,-4(fp)
	rx_done++; /* main will be polling for this value being 1 */
20008208:	d0a00f03 	ldbu	r2,-32708(gp)
2000820c:	10800044 	addi	r2,r2,1
20008210:	d0a00f05 	stb	r2,-32708(gp)

	rx_buf_ptr = (char*) &receive_ptrs[dbufr][0];
20008214:	d0a01017 	ldw	r2,-32704(gp)
20008218:	1006913a 	slli	r3,r2,4
2000821c:	00800034 	movhi	r2,0
20008220:	10819f04 	addi	r2,r2,1660
20008224:	1885883a 	add	r2,r3,r2
20008228:	d0a01115 	stw	r2,-32700(gp)
	rx_char_count = 0;
2000822c:	d0201215 	stw	zero,-32696(gp)
	rx_buffer_counter = 0;
20008230:	d0201315 	stw	zero,-32692(gp)

	dbufr++;
20008234:	d0a01017 	ldw	r2,-32704(gp)
20008238:	10800044 	addi	r2,r2,1
2000823c:	d0a01015 	stw	r2,-32704(gp)
	if (dbufr > 1) {
20008240:	d0a01017 	ldw	r2,-32704(gp)
20008244:	10800090 	cmplti	r2,r2,2
20008248:	1000011e 	bne	r2,zero,20008250 <receive_callback_function+0x5c>
		dbufr = 0;
2000824c:	d0201015 	stw	zero,-32704(gp)
	}
	int i = 0;
20008250:	e03ffe15 	stw	zero,-8(fp)
	for (i = 0; i < NUMBER_OF_BUFFERS; i++)
20008254:	e03ffe15 	stw	zero,-8(fp)
20008258:	00002606 	br	200082f4 <receive_callback_function+0x100>
		alt_avalon_sgdma_construct_stream_to_mem_desc(
				&receive_descriptors[dbufr][i],  // descriptor
2000825c:	d0a01017 	ldw	r2,-32704(gp)
20008260:	1085883a 	add	r2,r2,r2
20008264:	1087883a 	add	r3,r2,r2
20008268:	d0a01704 	addi	r2,gp,-32676
2000826c:	1885883a 	add	r2,r3,r2
20008270:	10c00017 	ldw	r3,0(r2)
	if (dbufr > 1) {
		dbufr = 0;
	}
	int i = 0;
	for (i = 0; i < NUMBER_OF_BUFFERS; i++)
		alt_avalon_sgdma_construct_stream_to_mem_desc(
20008274:	e0bffe17 	ldw	r2,-8(fp)
				&receive_descriptors[dbufr][i],  // descriptor
20008278:	1004917a 	slli	r2,r2,5
	if (dbufr > 1) {
		dbufr = 0;
	}
	int i = 0;
	for (i = 0; i < NUMBER_OF_BUFFERS; i++)
		alt_avalon_sgdma_construct_stream_to_mem_desc(
2000827c:	188d883a 	add	r6,r3,r2
				&receive_descriptors[dbufr][i],  // descriptor
				&receive_descriptors[dbufr][i + 1], // next descriptor
20008280:	d0a01017 	ldw	r2,-32704(gp)
20008284:	1085883a 	add	r2,r2,r2
20008288:	1087883a 	add	r3,r2,r2
2000828c:	d0a01704 	addi	r2,gp,-32676
20008290:	1885883a 	add	r2,r3,r2
20008294:	10c00017 	ldw	r3,0(r2)
20008298:	e0bffe17 	ldw	r2,-8(fp)
	if (dbufr > 1) {
		dbufr = 0;
	}
	int i = 0;
	for (i = 0; i < NUMBER_OF_BUFFERS; i++)
		alt_avalon_sgdma_construct_stream_to_mem_desc(
2000829c:	10800044 	addi	r2,r2,1
200082a0:	1004917a 	slli	r2,r2,5
200082a4:	188b883a 	add	r5,r3,r2
200082a8:	d0e01017 	ldw	r3,-32704(gp)
200082ac:	00800034 	movhi	r2,0
200082b0:	10819f04 	addi	r2,r2,1660
200082b4:	18c7883a 	add	r3,r3,r3
200082b8:	18c9883a 	add	r4,r3,r3
200082bc:	e0fffe17 	ldw	r3,-8(fp)
200082c0:	20c7883a 	add	r3,r4,r3
200082c4:	18c7883a 	add	r3,r3,r3
200082c8:	18c7883a 	add	r3,r3,r3
200082cc:	10c5883a 	add	r2,r2,r3
200082d0:	10800017 	ldw	r2,0(r2)
200082d4:	d8000015 	stw	zero,0(sp)
200082d8:	3009883a 	mov	r4,r6
200082dc:	100d883a 	mov	r6,r2
200082e0:	01c10004 	movi	r7,1024
200082e4:	000a1b80 	call	2000a1b8 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	dbufr++;
	if (dbufr > 1) {
		dbufr = 0;
	}
	int i = 0;
	for (i = 0; i < NUMBER_OF_BUFFERS; i++)
200082e8:	e0bffe17 	ldw	r2,-8(fp)
200082ec:	10800044 	addi	r2,r2,1
200082f0:	e0bffe15 	stw	r2,-8(fp)
200082f4:	e0bffe17 	ldw	r2,-8(fp)
200082f8:	10800110 	cmplti	r2,r2,4
200082fc:	103fd71e 	bne	r2,zero,2000825c <receive_callback_function+0x68>
				&receive_descriptors[dbufr][i + 1], // next descriptor
				receive_ptrs[dbufr][i],  // read buffer location
				(alt_u16) MAXIMUM_BUFFER_LENGTH,  // length of the buffer
				0);  // there is only one channel

	if (alt_avalon_sgdma_do_async_transfer(receive_dma,
20008300:	d1201417 	ldw	r4,-32688(gp)
20008304:	d0a01017 	ldw	r2,-32704(gp)
20008308:	1085883a 	add	r2,r2,r2
2000830c:	1087883a 	add	r3,r2,r2
20008310:	d0a01704 	addi	r2,gp,-32676
20008314:	1885883a 	add	r2,r3,r2
20008318:	10800017 	ldw	r2,0(r2)
2000831c:	100b883a 	mov	r5,r2
20008320:	0009dc40 	call	20009dc4 <alt_avalon_sgdma_do_async_transfer>
20008324:	10000326 	beq	r2,zero,20008334 <receive_callback_function+0x140>
			&receive_descriptors[dbufr][0]) != 0) {
		printf(
20008328:	01000034 	movhi	r4,0
2000832c:	21000004 	addi	r4,r4,0
20008330:	0008f000 	call	20008f00 <puts>
				"Writing the head of the receive descriptor list to the DMA failed\n");
	}

}
20008334:	e037883a 	mov	sp,fp
20008338:	dfc00117 	ldw	ra,4(sp)
2000833c:	df000017 	ldw	fp,0(sp)
20008340:	dec00204 	addi	sp,sp,8
20008344:	f800283a 	ret

20008348 <descriptor_allocation>:
 **********************************************************************************/
alt_u32 descriptor_allocation(alt_sgdma_descriptor ** transmit_descriptors,
		alt_sgdma_descriptor ** transmit_descriptors_copy,
		alt_sgdma_descriptor ** receive_descriptors,
		alt_sgdma_descriptor ** receive_descriptors_copy,
		alt_u32 number_of_buffers) {
20008348:	defff804 	addi	sp,sp,-32
2000834c:	dfc00715 	stw	ra,28(sp)
20008350:	df000615 	stw	fp,24(sp)
20008354:	df000604 	addi	fp,sp,24
20008358:	e13ffc15 	stw	r4,-16(fp)
2000835c:	e17ffd15 	stw	r5,-12(fp)
20008360:	e1bffe15 	stw	r6,-8(fp)
20008364:	e1ffff15 	stw	r7,-4(fp)
	 * - Third put this memory location into the pointer copy   *
	 *   to be freed before the program exits                   *
	 * - Forth slide the tempory pointer until it lies on a 32  *
	 *   byte boundary (descriptor master is 256 bits wide)     *
	 ************************************************************/
	temp_ptr_1 = malloc(
20008368:	e0800217 	ldw	r2,8(fp)
2000836c:	10800084 	addi	r2,r2,2
			(number_of_buffers + 2) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
20008370:	1004917a 	slli	r2,r2,5
	 * - Third put this memory location into the pointer copy   *
	 *   to be freed before the program exits                   *
	 * - Forth slide the tempory pointer until it lies on a 32  *
	 *   byte boundary (descriptor master is 256 bits wide)     *
	 ************************************************************/
	temp_ptr_1 = malloc(
20008374:	1009883a 	mov	r4,r2
20008378:	0008b900 	call	20008b90 <malloc>
2000837c:	e0bffa15 	stw	r2,-24(fp)
			(number_of_buffers + 2) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
	if (temp_ptr_1 == NULL) {
20008380:	e0bffa17 	ldw	r2,-24(fp)
20008384:	1000051e 	bne	r2,zero,2000839c <descriptor_allocation+0x54>
		printf("Failed to allocate memory for the transmit descriptors\n");
20008388:	01000034 	movhi	r4,0
2000838c:	21001104 	addi	r4,r4,68
20008390:	0008f000 	call	20008f00 <puts>
		return 1;
20008394:	00800044 	movi	r2,1
20008398:	00003806 	br	2000847c <descriptor_allocation+0x134>
	}
	*transmit_descriptors_copy = (alt_sgdma_descriptor *) temp_ptr_1;
2000839c:	e0bffd17 	ldw	r2,-12(fp)
200083a0:	e0fffa17 	ldw	r3,-24(fp)
200083a4:	10c00015 	stw	r3,0(r2)

	while ((((alt_u32) temp_ptr_1) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0) {
200083a8:	00000306 	br	200083b8 <descriptor_allocation+0x70>
		temp_ptr_1++;  // slide the pointer until 32 byte boundary is found
200083ac:	e0bffa17 	ldw	r2,-24(fp)
200083b0:	10800044 	addi	r2,r2,1
200083b4:	e0bffa15 	stw	r2,-24(fp)
		printf("Failed to allocate memory for the transmit descriptors\n");
		return 1;
	}
	*transmit_descriptors_copy = (alt_sgdma_descriptor *) temp_ptr_1;

	while ((((alt_u32) temp_ptr_1) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0) {
200083b8:	e0bffa17 	ldw	r2,-24(fp)
200083bc:	108007cc 	andi	r2,r2,31
200083c0:	103ffa1e 	bne	r2,zero,200083ac <descriptor_allocation+0x64>
		temp_ptr_1++;  // slide the pointer until 32 byte boundary is found
	}
	*transmit_descriptors = (alt_sgdma_descriptor *) temp_ptr_1;
200083c4:	e0bffc17 	ldw	r2,-16(fp)
200083c8:	e0fffa17 	ldw	r3,-24(fp)
200083cc:	10c00015 	stw	r3,0(r2)
	/**************************************************************/

	/* Clear out the null descriptor owned by hardware bit.  These locations
	 * came from the heap so we don't know what state the bytes are in (owned bit could be high).*/
	transmit_descriptors[number_of_buffers]->control = 0;
200083d0:	e0800217 	ldw	r2,8(fp)
200083d4:	1085883a 	add	r2,r2,r2
200083d8:	1085883a 	add	r2,r2,r2
200083dc:	1007883a 	mov	r3,r2
200083e0:	e0bffc17 	ldw	r2,-16(fp)
200083e4:	10c5883a 	add	r2,r2,r3
200083e8:	10800017 	ldw	r2,0(r2)
200083ec:	100007c5 	stb	zero,31(r2)
	 * - Third put this memory location into the pointer copy   *
	 *   to be freed before the program exits                   *
	 * - Forth slide the tempory pointer until it lies on a 32  *
	 *   byte boundary (descriptor master is 256 bits wide)     *
	 ************************************************************/
	temp_ptr_2 = malloc(
200083f0:	e0800217 	ldw	r2,8(fp)
200083f4:	10800084 	addi	r2,r2,2
			(number_of_buffers + 2) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
200083f8:	1004917a 	slli	r2,r2,5
	 * - Third put this memory location into the pointer copy   *
	 *   to be freed before the program exits                   *
	 * - Forth slide the tempory pointer until it lies on a 32  *
	 *   byte boundary (descriptor master is 256 bits wide)     *
	 ************************************************************/
	temp_ptr_2 = malloc(
200083fc:	1009883a 	mov	r4,r2
20008400:	0008b900 	call	20008b90 <malloc>
20008404:	e0bffb15 	stw	r2,-20(fp)
			(number_of_buffers + 2) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
	if (temp_ptr_2 == NULL) {
20008408:	e0bffb17 	ldw	r2,-20(fp)
2000840c:	1000051e 	bne	r2,zero,20008424 <descriptor_allocation+0xdc>
		printf("Failed to allocate memory for the receive descriptors\n");
20008410:	01000034 	movhi	r4,0
20008414:	21001f04 	addi	r4,r4,124
20008418:	0008f000 	call	20008f00 <puts>
		return 1;
2000841c:	00800044 	movi	r2,1
20008420:	00001606 	br	2000847c <descriptor_allocation+0x134>
	}
	*receive_descriptors_copy = (alt_sgdma_descriptor *) temp_ptr_2;
20008424:	e0bfff17 	ldw	r2,-4(fp)
20008428:	e0fffb17 	ldw	r3,-20(fp)
2000842c:	10c00015 	stw	r3,0(r2)

	while ((((alt_u32) temp_ptr_2) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0) {
20008430:	00000306 	br	20008440 <descriptor_allocation+0xf8>
		temp_ptr_2++;  // slide the pointer until 32 byte boundary is found
20008434:	e0bffb17 	ldw	r2,-20(fp)
20008438:	10800044 	addi	r2,r2,1
2000843c:	e0bffb15 	stw	r2,-20(fp)
		printf("Failed to allocate memory for the receive descriptors\n");
		return 1;
	}
	*receive_descriptors_copy = (alt_sgdma_descriptor *) temp_ptr_2;

	while ((((alt_u32) temp_ptr_2) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0) {
20008440:	e0bffb17 	ldw	r2,-20(fp)
20008444:	108007cc 	andi	r2,r2,31
20008448:	103ffa1e 	bne	r2,zero,20008434 <descriptor_allocation+0xec>
		temp_ptr_2++;  // slide the pointer until 32 byte boundary is found
	}
	*receive_descriptors = (alt_sgdma_descriptor *) temp_ptr_2;
2000844c:	e0bffe17 	ldw	r2,-8(fp)
20008450:	e0fffb17 	ldw	r3,-20(fp)
20008454:	10c00015 	stw	r3,0(r2)
	/**************************************************************/

	/* Clear out the null descriptor owned by hardware bit.  These locations
	 * came from the heap so we don't know what state the bytes are in (owned bit could be high).*/
	receive_descriptors[number_of_buffers]->control = 0;
20008458:	e0800217 	ldw	r2,8(fp)
2000845c:	1085883a 	add	r2,r2,r2
20008460:	1085883a 	add	r2,r2,r2
20008464:	1007883a 	mov	r3,r2
20008468:	e0bffe17 	ldw	r2,-8(fp)
2000846c:	10c5883a 	add	r2,r2,r3
20008470:	10800017 	ldw	r2,0(r2)
20008474:	100007c5 	stb	zero,31(r2)

	return 0;  // no failures in allocation
20008478:	0005883a 	mov	r2,zero
}
2000847c:	e037883a 	mov	sp,fp
20008480:	dfc00117 	ldw	ra,4(sp)
20008484:	df000017 	ldw	fp,0(sp)
20008488:	dec00204 	addi	sp,sp,8
2000848c:	f800283a 	ret

20008490 <readall>:

ssize_t readall(int fd, void * data, size_t count) {
20008490:	defff804 	addi	sp,sp,-32
20008494:	dfc00715 	stw	ra,28(sp)
20008498:	df000615 	stw	fp,24(sp)
2000849c:	df000604 	addi	fp,sp,24
200084a0:	e13ffd15 	stw	r4,-12(fp)
200084a4:	e17ffe15 	stw	r5,-8(fp)
200084a8:	e1bfff15 	stw	r6,-4(fp)

	ssize_t bytesRead;

	char * dataPtr = data;
200084ac:	e0bffe17 	ldw	r2,-8(fp)
200084b0:	e0bffa15 	stw	r2,-24(fp)

	size_t total = 0;
200084b4:	e03ffb15 	stw	zero,-20(fp)

	while (count) {
200084b8:	00001106 	br	20008500 <readall+0x70>

		bytesRead = read(fd, dataPtr, count);
200084bc:	e13ffd17 	ldw	r4,-12(fp)
200084c0:	e17ffa17 	ldw	r5,-24(fp)
200084c4:	e1bfff17 	ldw	r6,-4(fp)
200084c8:	0009a6c0 	call	20009a6c <read>
200084cc:	e0bffc15 	stw	r2,-16(fp)

		/* we should check bytesRead for < 0 to return errors

		 properly, but this is just sample code! */

		dataPtr += bytesRead;
200084d0:	e0bffc17 	ldw	r2,-16(fp)
200084d4:	e0fffa17 	ldw	r3,-24(fp)
200084d8:	1885883a 	add	r2,r3,r2
200084dc:	e0bffa15 	stw	r2,-24(fp)

		count -= bytesRead;
200084e0:	e0bffc17 	ldw	r2,-16(fp)
200084e4:	e0ffff17 	ldw	r3,-4(fp)
200084e8:	1885c83a 	sub	r2,r3,r2
200084ec:	e0bfff15 	stw	r2,-4(fp)

		total += bytesRead;
200084f0:	e0bffc17 	ldw	r2,-16(fp)
200084f4:	e0fffb17 	ldw	r3,-20(fp)
200084f8:	1885883a 	add	r2,r3,r2
200084fc:	e0bffb15 	stw	r2,-20(fp)

	char * dataPtr = data;

	size_t total = 0;

	while (count) {
20008500:	e0bfff17 	ldw	r2,-4(fp)
20008504:	103fed1e 	bne	r2,zero,200084bc <readall+0x2c>

		total += bytesRead;

	}

	return total;
20008508:	e0bffb17 	ldw	r2,-20(fp)

}
2000850c:	e037883a 	mov	sp,fp
20008510:	dfc00117 	ldw	ra,4(sp)
20008514:	df000017 	ldw	fp,0(sp)
20008518:	dec00204 	addi	sp,sp,8
2000851c:	f800283a 	ret

20008520 <main>:

int main(int argc, char **argv) {
20008520:	deffe104 	addi	sp,sp,-124
20008524:	dfc01e15 	stw	ra,120(sp)
20008528:	df001d15 	stw	fp,116(sp)
2000852c:	df001d04 	addi	fp,sp,116
20008530:	e13ffe15 	stw	r4,-8(fp)
20008534:	e17fff15 	stw	r5,-4(fp)

	char c;
	int uart_fd = open("/dev/uart", O_RDWR);
20008538:	01000034 	movhi	r4,0
2000853c:	21002d04 	addi	r4,r4,180
20008540:	01400084 	movi	r5,2
20008544:	00098cc0 	call	200098cc <open>
20008548:	e0bfeb15 	stw	r2,-84(fp)
	if (uart_fd == NULL) {
2000854c:	e0bfeb17 	ldw	r2,-84(fp)
20008550:	1000051e 	bne	r2,zero,20008568 <main+0x48>
		printf("Error opening uart\n");
20008554:	01000034 	movhi	r4,0
20008558:	21003004 	addi	r4,r4,192
2000855c:	0008f000 	call	20008f00 <puts>
		return 1;
20008560:	00800044 	movi	r2,1
20008564:	00018506 	br	20008b7c <main+0x65c>
	}
	alt_sgdma_dev *transmit_dma = alt_avalon_sgdma_open("/dev/sgdma_0");
20008568:	01000034 	movhi	r4,0
2000856c:	21003504 	addi	r4,r4,212
20008570:	0009f300 	call	20009f30 <alt_avalon_sgdma_open>
20008574:	e0bfec15 	stw	r2,-80(fp)
	receive_dma = alt_avalon_sgdma_open("/dev/sgdma_1");
20008578:	01000034 	movhi	r4,0
2000857c:	21003904 	addi	r4,r4,228
20008580:	0009f300 	call	20009f30 <alt_avalon_sgdma_open>
20008584:	d0a01415 	stw	r2,-32688(gp)
	alt_sgdma_descriptor *transmit_descriptors[2],
			*transmit_descriptors_copy[2];
//	alt_sgdma_descriptor *receive_descriptors[2], *receive_descriptors_copy[2];

	alt_u32 *transmit_ptr, *receive_ptr;
	if (transmit_dma == NULL) {
20008588:	e0bfec17 	ldw	r2,-80(fp)
2000858c:	1000051e 	bne	r2,zero,200085a4 <main+0x84>
		printf("Could not open transmit SG-DMA");
20008590:	01000034 	movhi	r4,0
20008594:	21003d04 	addi	r4,r4,244
20008598:	0008e340 	call	20008e34 <printf>
		return 1;
2000859c:	00800044 	movi	r2,1
200085a0:	00017606 	br	20008b7c <main+0x65c>
	}
	if (receive_dma == NULL) {
200085a4:	d0a01417 	ldw	r2,-32688(gp)
200085a8:	1000051e 	bne	r2,zero,200085c0 <main+0xa0>
		printf("Could not open the receive SG-DMA\n");
200085ac:	01000034 	movhi	r4,0
200085b0:	21004504 	addi	r4,r4,276
200085b4:	0008f000 	call	20008f00 <puts>
		return 1;
200085b8:	00800044 	movi	r2,1
200085bc:	00016f06 	br	20008b7c <main+0x65c>
	}

	alt_u32 return_code = descriptor_allocation(&transmit_descriptors[0],
200085c0:	e13ff204 	addi	r4,fp,-56
200085c4:	e0fff404 	addi	r3,fp,-48
200085c8:	00800104 	movi	r2,4
200085cc:	d8800015 	stw	r2,0(sp)
200085d0:	180b883a 	mov	r5,r3
200085d4:	d1a01704 	addi	r6,gp,-32676
200085d8:	d1e01504 	addi	r7,gp,-32684
200085dc:	00083480 	call	20008348 <descriptor_allocation>
200085e0:	e0bfed15 	stw	r2,-76(fp)
			&transmit_descriptors_copy[0], &receive_descriptors[0],
			&receive_descriptors_copy[0],
			NUMBER_OF_BUFFERS);

	if (return_code == 1) {
200085e4:	e0bfed17 	ldw	r2,-76(fp)
200085e8:	10800058 	cmpnei	r2,r2,1
200085ec:	1000051e 	bne	r2,zero,20008604 <main+0xe4>
		printf("Allocating the descriptor memory failed... exiting\n");
200085f0:	01000034 	movhi	r4,0
200085f4:	21004e04 	addi	r4,r4,312
200085f8:	0008f000 	call	20008f00 <puts>
		return 1;
200085fc:	00800044 	movi	r2,1
20008600:	00015e06 	br	20008b7c <main+0x65c>
	}

	return_code = descriptor_allocation(&transmit_descriptors[1],
20008604:	e0bff204 	addi	r2,fp,-56
20008608:	11000104 	addi	r4,r2,4
2000860c:	e0bff404 	addi	r2,fp,-48
20008610:	10c00104 	addi	r3,r2,4
20008614:	00800104 	movi	r2,4
20008618:	d8800015 	stw	r2,0(sp)
2000861c:	180b883a 	mov	r5,r3
20008620:	d1a01804 	addi	r6,gp,-32672
20008624:	d1e01604 	addi	r7,gp,-32680
20008628:	00083480 	call	20008348 <descriptor_allocation>
2000862c:	e0bfed15 	stw	r2,-76(fp)
			&transmit_descriptors_copy[1], &receive_descriptors[1],
			&receive_descriptors_copy[1],
			NUMBER_OF_BUFFERS);

	if (return_code == 1) {
20008630:	e0bfed17 	ldw	r2,-76(fp)
20008634:	10800058 	cmpnei	r2,r2,1
20008638:	1000051e 	bne	r2,zero,20008650 <main+0x130>
		printf("Allocating the descriptor memory failed... exiting\n");
2000863c:	01000034 	movhi	r4,0
20008640:	21004e04 	addi	r4,r4,312
20008644:	0008f000 	call	20008f00 <puts>
		return 1;
20008648:	00800044 	movi	r2,1
2000864c:	00014b06 	br	20008b7c <main+0x65c>
	}

	printf("Transmit descriptor: 0x%08x\n", transmit_descriptors[0]);
20008650:	e0bff217 	ldw	r2,-56(fp)
20008654:	01000034 	movhi	r4,0
20008658:	21005b04 	addi	r4,r4,364
2000865c:	100b883a 	mov	r5,r2
20008660:	0008e340 	call	20008e34 <printf>
	printf("Receive descriptor: 0x%08x\n", receive_descriptors[0]);
20008664:	d0a01717 	ldw	r2,-32676(gp)
20008668:	01000034 	movhi	r4,0
2000866c:	21006304 	addi	r4,r4,396
20008670:	100b883a 	mov	r5,r2
20008674:	0008e340 	call	20008e34 <printf>

	alt_avalon_sgdma_register_callback(transmit_dma,
20008678:	e13fec17 	ldw	r4,-80(fp)
2000867c:	01480074 	movhi	r5,8193
20008680:	29607204 	addi	r5,r5,-32312
20008684:	01800604 	movi	r6,24
20008688:	000f883a 	mov	r7,zero
2000868c:	0009ec00 	call	20009ec0 <alt_avalon_sgdma_register_callback>
			&transmit_callback_function,
			(ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK
					| ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK),
			NULL);

	alt_avalon_sgdma_register_callback(receive_dma, &receive_callback_function,
20008690:	d0a01417 	ldw	r2,-32688(gp)
20008694:	1009883a 	mov	r4,r2
20008698:	01480074 	movhi	r5,8193
2000869c:	29607d04 	addi	r5,r5,-32268
200086a0:	01800604 	movi	r6,24
200086a4:	000f883a 	mov	r7,zero
200086a8:	0009ec00 	call	20009ec0 <alt_avalon_sgdma_register_callback>
			(ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK
					| ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK),
			NULL);

	printf("Starting up the SGDMA engines\n");
200086ac:	01000034 	movhi	r4,0
200086b0:	21006a04 	addi	r4,r4,424
200086b4:	0008f000 	call	20008f00 <puts>

	alt_u32* transmit_ptrs[2][NUMBER_OF_BUFFERS];
	int i, j;
	for (j = 0; j < 2; j++) {
200086b8:	e03fe815 	stw	zero,-96(fp)
200086bc:	00005006 	br	20008800 <main+0x2e0>
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
200086c0:	e03fe715 	stw	zero,-100(fp)
200086c4:	00001906 	br	2000872c <main+0x20c>
			transmit_ptr = (alt_u32 *) malloc(MAXIMUM_BUFFER_LENGTH); // this descriptor will point at a buffer of length (temp_length)
200086c8:	01010004 	movi	r4,1024
200086cc:	0008b900 	call	20008b90 <malloc>
200086d0:	e0bfee15 	stw	r2,-72(fp)
			if (transmit_ptr == NULL) {
200086d4:	e0bfee17 	ldw	r2,-72(fp)
200086d8:	1000051e 	bne	r2,zero,200086f0 <main+0x1d0>
				printf("Allocating a transmit buffer region failed\n");
200086dc:	01000034 	movhi	r4,0
200086e0:	21007204 	addi	r4,r4,456
200086e4:	0008f000 	call	20008f00 <puts>
				return 1;
200086e8:	00800044 	movi	r2,1
200086ec:	00012306 	br	20008b7c <main+0x65c>
			}
			transmit_ptrs[j][i] = transmit_ptr;
200086f0:	e0bfe817 	ldw	r2,-96(fp)
200086f4:	1085883a 	add	r2,r2,r2
200086f8:	1087883a 	add	r3,r2,r2
200086fc:	e0bfe717 	ldw	r2,-100(fp)
20008700:	1885883a 	add	r2,r3,r2
20008704:	1085883a 	add	r2,r2,r2
20008708:	1085883a 	add	r2,r2,r2
2000870c:	e0ffe704 	addi	r3,fp,-100
20008710:	1885883a 	add	r2,r3,r2
20008714:	10800f04 	addi	r2,r2,60
20008718:	e0ffee17 	ldw	r3,-72(fp)
2000871c:	10c00015 	stw	r3,0(r2)
	printf("Starting up the SGDMA engines\n");

	alt_u32* transmit_ptrs[2][NUMBER_OF_BUFFERS];
	int i, j;
	for (j = 0; j < 2; j++) {
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
20008720:	e0bfe717 	ldw	r2,-100(fp)
20008724:	10800044 	addi	r2,r2,1
20008728:	e0bfe715 	stw	r2,-100(fp)
2000872c:	e0bfe717 	ldw	r2,-100(fp)
20008730:	10800110 	cmplti	r2,r2,4
20008734:	103fe41e 	bne	r2,zero,200086c8 <main+0x1a8>
				printf("Allocating a transmit buffer region failed\n");
				return 1;
			}
			transmit_ptrs[j][i] = transmit_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
20008738:	e03fe715 	stw	zero,-100(fp)
2000873c:	00002a06 	br	200087e8 <main+0x2c8>
			alt_avalon_sgdma_construct_mem_to_stream_desc(
					&transmit_descriptors[j][i],  // descriptor
20008740:	e0bfe817 	ldw	r2,-96(fp)
20008744:	1085883a 	add	r2,r2,r2
20008748:	1085883a 	add	r2,r2,r2
2000874c:	e0ffe704 	addi	r3,fp,-100
20008750:	1885883a 	add	r2,r3,r2
20008754:	10800b04 	addi	r2,r2,44
20008758:	10c00017 	ldw	r3,0(r2)
				return 1;
			}
			transmit_ptrs[j][i] = transmit_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
			alt_avalon_sgdma_construct_mem_to_stream_desc(
2000875c:	e0bfe717 	ldw	r2,-100(fp)
					&transmit_descriptors[j][i],  // descriptor
20008760:	1004917a 	slli	r2,r2,5
				return 1;
			}
			transmit_ptrs[j][i] = transmit_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
			alt_avalon_sgdma_construct_mem_to_stream_desc(
20008764:	1889883a 	add	r4,r3,r2
					&transmit_descriptors[j][i],  // descriptor
					&transmit_descriptors[j][i + 1], // next descriptor
20008768:	e0bfe817 	ldw	r2,-96(fp)
2000876c:	1085883a 	add	r2,r2,r2
20008770:	1085883a 	add	r2,r2,r2
20008774:	e0ffe704 	addi	r3,fp,-100
20008778:	1885883a 	add	r2,r3,r2
2000877c:	10800b04 	addi	r2,r2,44
20008780:	10c00017 	ldw	r3,0(r2)
20008784:	e0bfe717 	ldw	r2,-100(fp)
				return 1;
			}
			transmit_ptrs[j][i] = transmit_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
			alt_avalon_sgdma_construct_mem_to_stream_desc(
20008788:	10800044 	addi	r2,r2,1
2000878c:	1004917a 	slli	r2,r2,5
20008790:	188b883a 	add	r5,r3,r2
20008794:	e0bfe817 	ldw	r2,-96(fp)
20008798:	1085883a 	add	r2,r2,r2
2000879c:	1087883a 	add	r3,r2,r2
200087a0:	e0bfe717 	ldw	r2,-100(fp)
200087a4:	1885883a 	add	r2,r3,r2
200087a8:	1085883a 	add	r2,r2,r2
200087ac:	1085883a 	add	r2,r2,r2
200087b0:	e0ffe704 	addi	r3,fp,-100
200087b4:	1885883a 	add	r2,r3,r2
200087b8:	10800f04 	addi	r2,r2,60
200087bc:	10800017 	ldw	r2,0(r2)
200087c0:	d8000015 	stw	zero,0(sp)
200087c4:	d8000115 	stw	zero,4(sp)
200087c8:	d8000215 	stw	zero,8(sp)
200087cc:	d8000315 	stw	zero,12(sp)
200087d0:	100d883a 	mov	r6,r2
200087d4:	01c10004 	movi	r7,1024
200087d8:	000a2300 	call	2000a230 <alt_avalon_sgdma_construct_mem_to_stream_desc>
				printf("Allocating a transmit buffer region failed\n");
				return 1;
			}
			transmit_ptrs[j][i] = transmit_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
200087dc:	e0bfe717 	ldw	r2,-100(fp)
200087e0:	10800044 	addi	r2,r2,1
200087e4:	e0bfe715 	stw	r2,-100(fp)
200087e8:	e0bfe717 	ldw	r2,-100(fp)
200087ec:	10800110 	cmplti	r2,r2,4
200087f0:	103fd31e 	bne	r2,zero,20008740 <main+0x220>

	printf("Starting up the SGDMA engines\n");

	alt_u32* transmit_ptrs[2][NUMBER_OF_BUFFERS];
	int i, j;
	for (j = 0; j < 2; j++) {
200087f4:	e0bfe817 	ldw	r2,-96(fp)
200087f8:	10800044 	addi	r2,r2,1
200087fc:	e0bfe815 	stw	r2,-96(fp)
20008800:	e0bfe817 	ldw	r2,-96(fp)
20008804:	10800090 	cmplti	r2,r2,2
20008808:	103fad1e 	bne	r2,zero,200086c0 <main+0x1a0>
					0, // end of packet is enabled for the Avalon-ST interfaces,
					0);  // there is only one channel
		}
	}
//	alt_u32* receive_ptrs[2][NUMBER_OF_BUFFERS];
	for (j = 0; j < 2; j++) {
2000880c:	e03fe815 	stw	zero,-96(fp)
20008810:	00004c06 	br	20008944 <main+0x424>
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
20008814:	e03fe715 	stw	zero,-100(fp)
20008818:	00001906 	br	20008880 <main+0x360>
			receive_ptr = (alt_u32 *) malloc(MAXIMUM_BUFFER_LENGTH); // this descriptor will point at a buffer of length (temp_length)
2000881c:	01010004 	movi	r4,1024
20008820:	0008b900 	call	20008b90 <malloc>
20008824:	e0bfef15 	stw	r2,-68(fp)
			if (receive_ptr == NULL) {
20008828:	e0bfef17 	ldw	r2,-68(fp)
2000882c:	1000051e 	bne	r2,zero,20008844 <main+0x324>
				printf("Allocating a receive buffer region failed\n");
20008830:	01000034 	movhi	r4,0
20008834:	21007d04 	addi	r4,r4,500
20008838:	0008f000 	call	20008f00 <puts>
				return 1;
2000883c:	00800044 	movi	r2,1
20008840:	0000ce06 	br	20008b7c <main+0x65c>
			}
			receive_ptrs[j][i] = receive_ptr;
20008844:	00800034 	movhi	r2,0
20008848:	10819f04 	addi	r2,r2,1660
2000884c:	e0ffe817 	ldw	r3,-96(fp)
20008850:	18c7883a 	add	r3,r3,r3
20008854:	18c9883a 	add	r4,r3,r3
20008858:	e0ffe717 	ldw	r3,-100(fp)
2000885c:	20c7883a 	add	r3,r4,r3
20008860:	18c7883a 	add	r3,r3,r3
20008864:	18c7883a 	add	r3,r3,r3
20008868:	10c5883a 	add	r2,r2,r3
2000886c:	e0ffef17 	ldw	r3,-68(fp)
20008870:	10c00015 	stw	r3,0(r2)
					0);  // there is only one channel
		}
	}
//	alt_u32* receive_ptrs[2][NUMBER_OF_BUFFERS];
	for (j = 0; j < 2; j++) {
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
20008874:	e0bfe717 	ldw	r2,-100(fp)
20008878:	10800044 	addi	r2,r2,1
2000887c:	e0bfe715 	stw	r2,-100(fp)
20008880:	e0bfe717 	ldw	r2,-100(fp)
20008884:	10800110 	cmplti	r2,r2,4
20008888:	103fe41e 	bne	r2,zero,2000881c <main+0x2fc>
				printf("Allocating a receive buffer region failed\n");
				return 1;
			}
			receive_ptrs[j][i] = receive_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
2000888c:	e03fe715 	stw	zero,-100(fp)
20008890:	00002606 	br	2000892c <main+0x40c>
			alt_avalon_sgdma_construct_stream_to_mem_desc(
					&receive_descriptors[j][i],  // descriptor
20008894:	e0bfe817 	ldw	r2,-96(fp)
20008898:	1085883a 	add	r2,r2,r2
2000889c:	1087883a 	add	r3,r2,r2
200088a0:	d0a01704 	addi	r2,gp,-32676
200088a4:	1885883a 	add	r2,r3,r2
200088a8:	10c00017 	ldw	r3,0(r2)
				return 1;
			}
			receive_ptrs[j][i] = receive_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
			alt_avalon_sgdma_construct_stream_to_mem_desc(
200088ac:	e0bfe717 	ldw	r2,-100(fp)
					&receive_descriptors[j][i],  // descriptor
200088b0:	1004917a 	slli	r2,r2,5
				return 1;
			}
			receive_ptrs[j][i] = receive_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
			alt_avalon_sgdma_construct_stream_to_mem_desc(
200088b4:	188d883a 	add	r6,r3,r2
					&receive_descriptors[j][i],  // descriptor
					&receive_descriptors[j][i + 1], // next descriptor
200088b8:	e0bfe817 	ldw	r2,-96(fp)
200088bc:	1085883a 	add	r2,r2,r2
200088c0:	1087883a 	add	r3,r2,r2
200088c4:	d0a01704 	addi	r2,gp,-32676
200088c8:	1885883a 	add	r2,r3,r2
200088cc:	10c00017 	ldw	r3,0(r2)
200088d0:	e0bfe717 	ldw	r2,-100(fp)
				return 1;
			}
			receive_ptrs[j][i] = receive_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
			alt_avalon_sgdma_construct_stream_to_mem_desc(
200088d4:	10800044 	addi	r2,r2,1
200088d8:	1004917a 	slli	r2,r2,5
200088dc:	188b883a 	add	r5,r3,r2
200088e0:	00800034 	movhi	r2,0
200088e4:	10819f04 	addi	r2,r2,1660
200088e8:	e0ffe817 	ldw	r3,-96(fp)
200088ec:	18c7883a 	add	r3,r3,r3
200088f0:	18c9883a 	add	r4,r3,r3
200088f4:	e0ffe717 	ldw	r3,-100(fp)
200088f8:	20c7883a 	add	r3,r4,r3
200088fc:	18c7883a 	add	r3,r3,r3
20008900:	18c7883a 	add	r3,r3,r3
20008904:	10c5883a 	add	r2,r2,r3
20008908:	10800017 	ldw	r2,0(r2)
2000890c:	d8000015 	stw	zero,0(sp)
20008910:	3009883a 	mov	r4,r6
20008914:	100d883a 	mov	r6,r2
20008918:	01c10004 	movi	r7,1024
2000891c:	000a1b80 	call	2000a1b8 <alt_avalon_sgdma_construct_stream_to_mem_desc>
				printf("Allocating a receive buffer region failed\n");
				return 1;
			}
			receive_ptrs[j][i] = receive_ptr;
		}
		for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
20008920:	e0bfe717 	ldw	r2,-100(fp)
20008924:	10800044 	addi	r2,r2,1
20008928:	e0bfe715 	stw	r2,-100(fp)
2000892c:	e0bfe717 	ldw	r2,-100(fp)
20008930:	10800110 	cmplti	r2,r2,4
20008934:	103fd71e 	bne	r2,zero,20008894 <main+0x374>
					0, // end of packet is enabled for the Avalon-ST interfaces,
					0);  // there is only one channel
		}
	}
//	alt_u32* receive_ptrs[2][NUMBER_OF_BUFFERS];
	for (j = 0; j < 2; j++) {
20008938:	e0bfe817 	ldw	r2,-96(fp)
2000893c:	10800044 	addi	r2,r2,1
20008940:	e0bfe815 	stw	r2,-96(fp)
20008944:	e0bfe817 	ldw	r2,-96(fp)
20008948:	10800090 	cmplti	r2,r2,2
2000894c:	103fb11e 	bne	r2,zero,20008814 <main+0x2f4>
					(alt_u16) MAXIMUM_BUFFER_LENGTH,  // length of the buffer
					0);  // there is only one channel
		}
	}

	if (alt_avalon_sgdma_do_async_transfer(receive_dma,
20008950:	d1201417 	ldw	r4,-32688(gp)
20008954:	d0a01017 	ldw	r2,-32704(gp)
20008958:	1085883a 	add	r2,r2,r2
2000895c:	1087883a 	add	r3,r2,r2
20008960:	d0a01704 	addi	r2,gp,-32676
20008964:	1885883a 	add	r2,r3,r2
20008968:	10800017 	ldw	r2,0(r2)
2000896c:	100b883a 	mov	r5,r2
20008970:	0009dc40 	call	20009dc4 <alt_avalon_sgdma_do_async_transfer>
20008974:	10000526 	beq	r2,zero,2000898c <main+0x46c>
			&receive_descriptors[dbufr][0]) != 0) {
		printf(
20008978:	01000034 	movhi	r4,0
2000897c:	21000004 	addi	r4,r4,0
20008980:	0008f000 	call	20008f00 <puts>
				"Writing the head of the receive descriptor list to the DMA failed\n");
		return 1;
20008984:	00800044 	movi	r2,1
20008988:	00007c06 	br	20008b7c <main+0x65c>
	}

	int buffer_counter = 0;
2000898c:	e03fe915 	stw	zero,-92(fp)
	int dbuft = 0;
20008990:	e03fea15 	stw	zero,-88(fp)

	int char_count = 0;
20008994:	e03ff015 	stw	zero,-64(fp)

	while (1) {
		int num_read = readall(uart_fd, transmit_ptrs[dbuft][buffer_counter],
20008998:	e0bfea17 	ldw	r2,-88(fp)
2000899c:	1085883a 	add	r2,r2,r2
200089a0:	1087883a 	add	r3,r2,r2
200089a4:	e0bfe917 	ldw	r2,-92(fp)
200089a8:	1885883a 	add	r2,r3,r2
200089ac:	1085883a 	add	r2,r2,r2
200089b0:	1085883a 	add	r2,r2,r2
200089b4:	e0ffe704 	addi	r3,fp,-100
200089b8:	1885883a 	add	r2,r3,r2
200089bc:	10800f04 	addi	r2,r2,60
200089c0:	10800017 	ldw	r2,0(r2)
200089c4:	e13feb17 	ldw	r4,-84(fp)
200089c8:	100b883a 	mov	r5,r2
200089cc:	01810004 	movi	r6,1024
200089d0:	00084900 	call	20008490 <readall>
200089d4:	e0bff115 	stw	r2,-60(fp)
		MAXIMUM_BUFFER_LENGTH);
		if (num_read > 0) {
200089d8:	e0bff117 	ldw	r2,-60(fp)
200089dc:	00804b0e 	bge	zero,r2,20008b0c <main+0x5ec>
			alt_avalon_sgdma_construct_mem_to_stream_desc(
					&transmit_descriptors[dbuft][buffer_counter], // descriptor
200089e0:	e0bfea17 	ldw	r2,-88(fp)
200089e4:	1085883a 	add	r2,r2,r2
200089e8:	1085883a 	add	r2,r2,r2
200089ec:	e0ffe704 	addi	r3,fp,-100
200089f0:	1885883a 	add	r2,r3,r2
200089f4:	10800b04 	addi	r2,r2,44
200089f8:	10c00017 	ldw	r3,0(r2)

	while (1) {
		int num_read = readall(uart_fd, transmit_ptrs[dbuft][buffer_counter],
		MAXIMUM_BUFFER_LENGTH);
		if (num_read > 0) {
			alt_avalon_sgdma_construct_mem_to_stream_desc(
200089fc:	e0bfe917 	ldw	r2,-92(fp)
					&transmit_descriptors[dbuft][buffer_counter], // descriptor
20008a00:	1004917a 	slli	r2,r2,5

	while (1) {
		int num_read = readall(uart_fd, transmit_ptrs[dbuft][buffer_counter],
		MAXIMUM_BUFFER_LENGTH);
		if (num_read > 0) {
			alt_avalon_sgdma_construct_mem_to_stream_desc(
20008a04:	1889883a 	add	r4,r3,r2
					&transmit_descriptors[dbuft][buffer_counter], // descriptor
					&transmit_descriptors[dbuft][buffer_counter + 1], // next descriptor
20008a08:	e0bfea17 	ldw	r2,-88(fp)
20008a0c:	1085883a 	add	r2,r2,r2
20008a10:	1085883a 	add	r2,r2,r2
20008a14:	e0ffe704 	addi	r3,fp,-100
20008a18:	1885883a 	add	r2,r3,r2
20008a1c:	10800b04 	addi	r2,r2,44
20008a20:	10c00017 	ldw	r3,0(r2)
20008a24:	e0bfe917 	ldw	r2,-92(fp)

	while (1) {
		int num_read = readall(uart_fd, transmit_ptrs[dbuft][buffer_counter],
		MAXIMUM_BUFFER_LENGTH);
		if (num_read > 0) {
			alt_avalon_sgdma_construct_mem_to_stream_desc(
20008a28:	10800044 	addi	r2,r2,1
20008a2c:	1004917a 	slli	r2,r2,5
20008a30:	188b883a 	add	r5,r3,r2
20008a34:	e0bfea17 	ldw	r2,-88(fp)
20008a38:	1085883a 	add	r2,r2,r2
20008a3c:	1087883a 	add	r3,r2,r2
20008a40:	e0bfe917 	ldw	r2,-92(fp)
20008a44:	1885883a 	add	r2,r3,r2
20008a48:	1085883a 	add	r2,r2,r2
20008a4c:	1085883a 	add	r2,r2,r2
20008a50:	e0ffe704 	addi	r3,fp,-100
20008a54:	1885883a 	add	r2,r3,r2
20008a58:	10800f04 	addi	r2,r2,60
20008a5c:	10c00017 	ldw	r3,0(r2)
					&transmit_descriptors[dbuft][buffer_counter], // descriptor
					&transmit_descriptors[dbuft][buffer_counter + 1], // next descriptor
					transmit_ptrs[dbuft][buffer_counter], // read buffer location
					(alt_u16) num_read, // length of the buffer
20008a60:	e0bff117 	ldw	r2,-60(fp)

	while (1) {
		int num_read = readall(uart_fd, transmit_ptrs[dbuft][buffer_counter],
		MAXIMUM_BUFFER_LENGTH);
		if (num_read > 0) {
			alt_avalon_sgdma_construct_mem_to_stream_desc(
20008a64:	10bfffcc 	andi	r2,r2,65535
20008a68:	d8000015 	stw	zero,0(sp)
20008a6c:	d8000115 	stw	zero,4(sp)
20008a70:	d8000215 	stw	zero,8(sp)
20008a74:	d8000315 	stw	zero,12(sp)
20008a78:	180d883a 	mov	r6,r3
20008a7c:	100f883a 	mov	r7,r2
20008a80:	000a2300 	call	2000a230 <alt_avalon_sgdma_construct_mem_to_stream_desc>
					(alt_u16) num_read, // length of the buffer
					0, // reads are not from a fixed location
					0, // start of packet is enabled for the Avalon-ST interfaces
					0, // end of packet is enabled for the Avalon-ST interfaces,
					0);  // there is only one channel
			buffer_counter++;
20008a84:	e0bfe917 	ldw	r2,-92(fp)
20008a88:	10800044 	addi	r2,r2,1
20008a8c:	e0bfe915 	stw	r2,-92(fp)
			if (buffer_counter >= NUMBER_OF_BUFFERS) {
20008a90:	e0bfe917 	ldw	r2,-92(fp)
20008a94:	10800110 	cmplti	r2,r2,4
20008a98:	10001c1e 	bne	r2,zero,20008b0c <main+0x5ec>
				buffer_counter = 0;
20008a9c:	e03fe915 	stw	zero,-92(fp)
				dbuft++;
20008aa0:	e0bfea17 	ldw	r2,-88(fp)
20008aa4:	10800044 	addi	r2,r2,1
20008aa8:	e0bfea15 	stw	r2,-88(fp)
				if (dbuft > 1) {
20008aac:	e0bfea17 	ldw	r2,-88(fp)
20008ab0:	10800090 	cmplti	r2,r2,2
20008ab4:	1000011e 	bne	r2,zero,20008abc <main+0x59c>
					dbuft = 0;
20008ab8:	e03fea15 	stw	zero,-88(fp)
				}
				if (tx_done) {
20008abc:	d0a00003 	ldbu	r2,-32768(gp)
20008ac0:	10803fcc 	andi	r2,r2,255
20008ac4:	10001126 	beq	r2,zero,20008b0c <main+0x5ec>
					if (alt_avalon_sgdma_do_async_transfer(transmit_dma,
20008ac8:	e0bfea17 	ldw	r2,-88(fp)
20008acc:	1085883a 	add	r2,r2,r2
20008ad0:	1085883a 	add	r2,r2,r2
20008ad4:	e0ffe704 	addi	r3,fp,-100
20008ad8:	1885883a 	add	r2,r3,r2
20008adc:	10800b04 	addi	r2,r2,44
20008ae0:	10800017 	ldw	r2,0(r2)
20008ae4:	e13fec17 	ldw	r4,-80(fp)
20008ae8:	100b883a 	mov	r5,r2
20008aec:	0009dc40 	call	20009dc4 <alt_avalon_sgdma_do_async_transfer>
20008af0:	10000526 	beq	r2,zero,20008b08 <main+0x5e8>
							&transmit_descriptors[dbuft][0]) != 0) {
						printf(
20008af4:	01000034 	movhi	r4,0
20008af8:	21008804 	addi	r4,r4,544
20008afc:	0008f000 	call	20008f00 <puts>
								"Writing the head of the transmit descriptor list to the DMA failed\n");
						return 1;
20008b00:	00800044 	movi	r2,1
20008b04:	00001d06 	br	20008b7c <main+0x65c>
					}
					tx_done = 0;
20008b08:	d0200005 	stb	zero,-32768(gp)
		 }
		 }
		 }
		 }
		 */
		if (rx_done) {
20008b0c:	d0a00f03 	ldbu	r2,-32708(gp)
20008b10:	10803fcc 	andi	r2,r2,255
20008b14:	10001826 	beq	r2,zero,20008b78 <main+0x658>
			for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
20008b18:	e03fe715 	stw	zero,-100(fp)
20008b1c:	00001206 	br	20008b68 <main+0x648>
				write(uart_fd, receive_ptrs[dbufr][i],
20008b20:	d0e01017 	ldw	r3,-32704(gp)
20008b24:	00800034 	movhi	r2,0
20008b28:	10819f04 	addi	r2,r2,1660
20008b2c:	18c7883a 	add	r3,r3,r3
20008b30:	18c9883a 	add	r4,r3,r3
20008b34:	e0ffe717 	ldw	r3,-100(fp)
20008b38:	20c7883a 	add	r3,r4,r3
20008b3c:	18c7883a 	add	r3,r3,r3
20008b40:	18c7883a 	add	r3,r3,r3
20008b44:	10c5883a 	add	r2,r2,r3
20008b48:	10800017 	ldw	r2,0(r2)
20008b4c:	e13feb17 	ldw	r4,-84(fp)
20008b50:	100b883a 	mov	r5,r2
20008b54:	01810004 	movi	r6,1024
20008b58:	0009b880 	call	20009b88 <write>
		 }
		 }
		 }
		 */
		if (rx_done) {
			for (i = 0; i < NUMBER_OF_BUFFERS; i++) {
20008b5c:	e0bfe717 	ldw	r2,-100(fp)
20008b60:	10800044 	addi	r2,r2,1
20008b64:	e0bfe715 	stw	r2,-100(fp)
20008b68:	e0bfe717 	ldw	r2,-100(fp)
20008b6c:	10800110 	cmplti	r2,r2,4
20008b70:	103feb1e 	bne	r2,zero,20008b20 <main+0x600>
				write(uart_fd, receive_ptrs[dbufr][i],
				MAXIMUM_BUFFER_LENGTH);
			}
			rx_done = 0;
20008b74:	d0200f05 	stb	zero,-32708(gp)
		}
	}
20008b78:	003f8706 	br	20008998 <main+0x478>

	return 0;
}
20008b7c:	e037883a 	mov	sp,fp
20008b80:	dfc00117 	ldw	ra,4(sp)
20008b84:	df000017 	ldw	fp,0(sp)
20008b88:	dec00204 	addi	sp,sp,8
20008b8c:	f800283a 	ret

20008b90 <malloc>:
20008b90:	00800034 	movhi	r2,0
20008b94:	10817e04 	addi	r2,r2,1528
20008b98:	200b883a 	mov	r5,r4
20008b9c:	11000017 	ldw	r4,0(r2)
20008ba0:	0008c9c1 	jmpi	20008c9c <_malloc_r>

20008ba4 <free>:
20008ba4:	00800034 	movhi	r2,0
20008ba8:	10817e04 	addi	r2,r2,1528
20008bac:	200b883a 	mov	r5,r4
20008bb0:	11000017 	ldw	r4,0(r2)
20008bb4:	0008bb81 	jmpi	20008bb8 <_free_r>

20008bb8 <_free_r>:
20008bb8:	28003726 	beq	r5,zero,20008c98 <_free_r+0xe0>
20008bbc:	28ffff17 	ldw	r3,-4(r5)
20008bc0:	28bfff04 	addi	r2,r5,-4
20008bc4:	1800010e 	bge	r3,zero,20008bcc <_free_r+0x14>
20008bc8:	10c5883a 	add	r2,r2,r3
20008bcc:	01400034 	movhi	r5,0
20008bd0:	29419604 	addi	r5,r5,1624
20008bd4:	28c00017 	ldw	r3,0(r5)
20008bd8:	280d883a 	mov	r6,r5
20008bdc:	1800031e 	bne	r3,zero,20008bec <_free_r+0x34>
20008be0:	10000115 	stw	zero,4(r2)
20008be4:	28800015 	stw	r2,0(r5)
20008be8:	f800283a 	ret
20008bec:	10c00c2e 	bgeu	r2,r3,20008c20 <_free_r+0x68>
20008bf0:	11400017 	ldw	r5,0(r2)
20008bf4:	1149883a 	add	r4,r2,r5
20008bf8:	20c0041e 	bne	r4,r3,20008c0c <_free_r+0x54>
20008bfc:	20c00017 	ldw	r3,0(r4)
20008c00:	28c7883a 	add	r3,r5,r3
20008c04:	10c00015 	stw	r3,0(r2)
20008c08:	20c00117 	ldw	r3,4(r4)
20008c0c:	10c00115 	stw	r3,4(r2)
20008c10:	30800015 	stw	r2,0(r6)
20008c14:	f800283a 	ret
20008c18:	11400336 	bltu	r2,r5,20008c28 <_free_r+0x70>
20008c1c:	2807883a 	mov	r3,r5
20008c20:	19400117 	ldw	r5,4(r3)
20008c24:	283ffc1e 	bne	r5,zero,20008c18 <_free_r+0x60>
20008c28:	19c00017 	ldw	r7,0(r3)
20008c2c:	19cd883a 	add	r6,r3,r7
20008c30:	30800a1e 	bne	r6,r2,20008c5c <_free_r+0xa4>
20008c34:	10800017 	ldw	r2,0(r2)
20008c38:	3885883a 	add	r2,r7,r2
20008c3c:	18800015 	stw	r2,0(r3)
20008c40:	1889883a 	add	r4,r3,r2
20008c44:	2140141e 	bne	r4,r5,20008c98 <_free_r+0xe0>
20008c48:	29000017 	ldw	r4,0(r5)
20008c4c:	1105883a 	add	r2,r2,r4
20008c50:	18800015 	stw	r2,0(r3)
20008c54:	28800117 	ldw	r2,4(r5)
20008c58:	00000e06 	br	20008c94 <_free_r+0xdc>
20008c5c:	1180032e 	bgeu	r2,r6,20008c6c <_free_r+0xb4>
20008c60:	00800304 	movi	r2,12
20008c64:	20800015 	stw	r2,0(r4)
20008c68:	f800283a 	ret
20008c6c:	11800017 	ldw	r6,0(r2)
20008c70:	1189883a 	add	r4,r2,r6
20008c74:	2140061e 	bne	r4,r5,20008c90 <_free_r+0xd8>
20008c78:	29000017 	ldw	r4,0(r5)
20008c7c:	3109883a 	add	r4,r6,r4
20008c80:	11000015 	stw	r4,0(r2)
20008c84:	29000117 	ldw	r4,4(r5)
20008c88:	11000115 	stw	r4,4(r2)
20008c8c:	00000106 	br	20008c94 <_free_r+0xdc>
20008c90:	11400115 	stw	r5,4(r2)
20008c94:	18800115 	stw	r2,4(r3)
20008c98:	f800283a 	ret

20008c9c <_malloc_r>:
20008c9c:	defffb04 	addi	sp,sp,-20
20008ca0:	00bfff04 	movi	r2,-4
20008ca4:	dc000015 	stw	r16,0(sp)
20008ca8:	2c0000c4 	addi	r16,r5,3
20008cac:	80a0703a 	and	r16,r16,r2
20008cb0:	dc800215 	stw	r18,8(sp)
20008cb4:	dfc00415 	stw	ra,16(sp)
20008cb8:	dcc00315 	stw	r19,12(sp)
20008cbc:	dc400115 	stw	r17,4(sp)
20008cc0:	84000204 	addi	r16,r16,8
20008cc4:	00800304 	movi	r2,12
20008cc8:	2025883a 	mov	r18,r4
20008ccc:	8080022e 	bgeu	r16,r2,20008cd8 <_malloc_r+0x3c>
20008cd0:	1021883a 	mov	r16,r2
20008cd4:	00000506 	br	20008cec <_malloc_r+0x50>
20008cd8:	8000040e 	bge	r16,zero,20008cec <_malloc_r+0x50>
20008cdc:	00800304 	movi	r2,12
20008ce0:	90800015 	stw	r2,0(r18)
20008ce4:	0005883a 	mov	r2,zero
20008ce8:	00003c06 	br	20008ddc <_malloc_r+0x140>
20008cec:	817ffb36 	bltu	r16,r5,20008cdc <_malloc_r+0x40>
20008cf0:	01000034 	movhi	r4,0
20008cf4:	21019604 	addi	r4,r4,1624
20008cf8:	20800017 	ldw	r2,0(r4)
20008cfc:	1007883a 	mov	r3,r2
20008d00:	18000926 	beq	r3,zero,20008d28 <_malloc_r+0x8c>
20008d04:	19400017 	ldw	r5,0(r3)
20008d08:	2c0bc83a 	sub	r5,r5,r16
20008d0c:	28001716 	blt	r5,zero,20008d6c <_malloc_r+0xd0>
20008d10:	018002c4 	movi	r6,11
20008d14:	31400d2e 	bgeu	r6,r5,20008d4c <_malloc_r+0xb0>
20008d18:	19400015 	stw	r5,0(r3)
20008d1c:	1945883a 	add	r2,r3,r5
20008d20:	14000015 	stw	r16,0(r2)
20008d24:	1000231e 	bne	r2,zero,20008db4 <_malloc_r+0x118>
20008d28:	04400034 	movhi	r17,0
20008d2c:	8c419504 	addi	r17,r17,1620
20008d30:	88800017 	ldw	r2,0(r17)
20008d34:	1000101e 	bne	r2,zero,20008d78 <_malloc_r+0xdc>
20008d38:	9009883a 	mov	r4,r18
20008d3c:	000b883a 	mov	r5,zero
20008d40:	0008f140 	call	20008f14 <_sbrk_r>
20008d44:	88800015 	stw	r2,0(r17)
20008d48:	00000b06 	br	20008d78 <_malloc_r+0xdc>
20008d4c:	10c0031e 	bne	r2,r3,20008d5c <_malloc_r+0xc0>
20008d50:	10c00117 	ldw	r3,4(r2)
20008d54:	20c00015 	stw	r3,0(r4)
20008d58:	00001606 	br	20008db4 <_malloc_r+0x118>
20008d5c:	19000117 	ldw	r4,4(r3)
20008d60:	11000115 	stw	r4,4(r2)
20008d64:	1805883a 	mov	r2,r3
20008d68:	00001206 	br	20008db4 <_malloc_r+0x118>
20008d6c:	1805883a 	mov	r2,r3
20008d70:	18c00117 	ldw	r3,4(r3)
20008d74:	003fe206 	br	20008d00 <_malloc_r+0x64>
20008d78:	9009883a 	mov	r4,r18
20008d7c:	800b883a 	mov	r5,r16
20008d80:	0008f140 	call	20008f14 <_sbrk_r>
20008d84:	04ffffc4 	movi	r19,-1
20008d88:	14ffd426 	beq	r2,r19,20008cdc <_malloc_r+0x40>
20008d8c:	144000c4 	addi	r17,r2,3
20008d90:	00ffff04 	movi	r3,-4
20008d94:	88e2703a 	and	r17,r17,r3
20008d98:	88800526 	beq	r17,r2,20008db0 <_malloc_r+0x114>
20008d9c:	9009883a 	mov	r4,r18
20008da0:	888bc83a 	sub	r5,r17,r2
20008da4:	0008f140 	call	20008f14 <_sbrk_r>
20008da8:	14ffcc26 	beq	r2,r19,20008cdc <_malloc_r+0x40>
20008dac:	8805883a 	mov	r2,r17
20008db0:	14000015 	stw	r16,0(r2)
20008db4:	114002c4 	addi	r5,r2,11
20008db8:	00fffe04 	movi	r3,-8
20008dbc:	11000104 	addi	r4,r2,4
20008dc0:	28c6703a 	and	r3,r5,r3
20008dc4:	1909c83a 	sub	r4,r3,r4
20008dc8:	20000326 	beq	r4,zero,20008dd8 <_malloc_r+0x13c>
20008dcc:	110b883a 	add	r5,r2,r4
20008dd0:	0109c83a 	sub	r4,zero,r4
20008dd4:	29000015 	stw	r4,0(r5)
20008dd8:	1805883a 	mov	r2,r3
20008ddc:	dfc00417 	ldw	ra,16(sp)
20008de0:	dcc00317 	ldw	r19,12(sp)
20008de4:	dc800217 	ldw	r18,8(sp)
20008de8:	dc400117 	ldw	r17,4(sp)
20008dec:	dc000017 	ldw	r16,0(sp)
20008df0:	dec00504 	addi	sp,sp,20
20008df4:	f800283a 	ret

20008df8 <_printf_r>:
20008df8:	defffd04 	addi	sp,sp,-12
20008dfc:	dfc00015 	stw	ra,0(sp)
20008e00:	d9800115 	stw	r6,4(sp)
20008e04:	d9c00215 	stw	r7,8(sp)
20008e08:	20c00217 	ldw	r3,8(r4)
20008e0c:	280d883a 	mov	r6,r5
20008e10:	01480074 	movhi	r5,8193
20008e14:	29655504 	addi	r5,r5,-27308
20008e18:	19400115 	stw	r5,4(r3)
20008e1c:	21400217 	ldw	r5,8(r4)
20008e20:	d9c00104 	addi	r7,sp,4
20008e24:	0008fec0 	call	20008fec <___vfprintf_internal_r>
20008e28:	dfc00017 	ldw	ra,0(sp)
20008e2c:	dec00304 	addi	sp,sp,12
20008e30:	f800283a 	ret

20008e34 <printf>:
20008e34:	defffc04 	addi	sp,sp,-16
20008e38:	dfc00015 	stw	ra,0(sp)
20008e3c:	d9400115 	stw	r5,4(sp)
20008e40:	d9800215 	stw	r6,8(sp)
20008e44:	d9c00315 	stw	r7,12(sp)
20008e48:	00800034 	movhi	r2,0
20008e4c:	10817e04 	addi	r2,r2,1528
20008e50:	10800017 	ldw	r2,0(r2)
20008e54:	200b883a 	mov	r5,r4
20008e58:	01080074 	movhi	r4,8193
20008e5c:	10c00217 	ldw	r3,8(r2)
20008e60:	21255504 	addi	r4,r4,-27308
20008e64:	d9800104 	addi	r6,sp,4
20008e68:	19000115 	stw	r4,4(r3)
20008e6c:	11000217 	ldw	r4,8(r2)
20008e70:	00095300 	call	20009530 <__vfprintf_internal>
20008e74:	dfc00017 	ldw	ra,0(sp)
20008e78:	dec00404 	addi	sp,sp,16
20008e7c:	f800283a 	ret

20008e80 <_puts_r>:
20008e80:	defffd04 	addi	sp,sp,-12
20008e84:	dc000015 	stw	r16,0(sp)
20008e88:	2021883a 	mov	r16,r4
20008e8c:	2809883a 	mov	r4,r5
20008e90:	dfc00215 	stw	ra,8(sp)
20008e94:	dc400115 	stw	r17,4(sp)
20008e98:	2823883a 	mov	r17,r5
20008e9c:	0008f640 	call	20008f64 <strlen>
20008ea0:	81400217 	ldw	r5,8(r16)
20008ea4:	00c80074 	movhi	r3,8193
20008ea8:	18e55504 	addi	r3,r3,-27308
20008eac:	28c00115 	stw	r3,4(r5)
20008eb0:	8009883a 	mov	r4,r16
20008eb4:	880d883a 	mov	r6,r17
20008eb8:	100f883a 	mov	r7,r2
20008ebc:	00095540 	call	20009554 <__sfvwrite_small_dev>
20008ec0:	00ffffc4 	movi	r3,-1
20008ec4:	10c00926 	beq	r2,r3,20008eec <_puts_r+0x6c>
20008ec8:	81400217 	ldw	r5,8(r16)
20008ecc:	01800034 	movhi	r6,0
20008ed0:	8009883a 	mov	r4,r16
20008ed4:	28800117 	ldw	r2,4(r5)
20008ed8:	31809904 	addi	r6,r6,612
20008edc:	01c00044 	movi	r7,1
20008ee0:	103ee83a 	callr	r2
20008ee4:	10bfffe0 	cmpeqi	r2,r2,-1
20008ee8:	0085c83a 	sub	r2,zero,r2
20008eec:	dfc00217 	ldw	ra,8(sp)
20008ef0:	dc400117 	ldw	r17,4(sp)
20008ef4:	dc000017 	ldw	r16,0(sp)
20008ef8:	dec00304 	addi	sp,sp,12
20008efc:	f800283a 	ret

20008f00 <puts>:
20008f00:	00800034 	movhi	r2,0
20008f04:	10817e04 	addi	r2,r2,1528
20008f08:	200b883a 	mov	r5,r4
20008f0c:	11000017 	ldw	r4,0(r2)
20008f10:	0008e801 	jmpi	20008e80 <_puts_r>

20008f14 <_sbrk_r>:
20008f14:	defffd04 	addi	sp,sp,-12
20008f18:	dc000015 	stw	r16,0(sp)
20008f1c:	04000034 	movhi	r16,0
20008f20:	dc400115 	stw	r17,4(sp)
20008f24:	84019704 	addi	r16,r16,1628
20008f28:	2023883a 	mov	r17,r4
20008f2c:	2809883a 	mov	r4,r5
20008f30:	dfc00215 	stw	ra,8(sp)
20008f34:	80000015 	stw	zero,0(r16)
20008f38:	0009b1c0 	call	20009b1c <sbrk>
20008f3c:	00ffffc4 	movi	r3,-1
20008f40:	10c0031e 	bne	r2,r3,20008f50 <_sbrk_r+0x3c>
20008f44:	80c00017 	ldw	r3,0(r16)
20008f48:	18000126 	beq	r3,zero,20008f50 <_sbrk_r+0x3c>
20008f4c:	88c00015 	stw	r3,0(r17)
20008f50:	dfc00217 	ldw	ra,8(sp)
20008f54:	dc400117 	ldw	r17,4(sp)
20008f58:	dc000017 	ldw	r16,0(sp)
20008f5c:	dec00304 	addi	sp,sp,12
20008f60:	f800283a 	ret

20008f64 <strlen>:
20008f64:	2005883a 	mov	r2,r4
20008f68:	10c00007 	ldb	r3,0(r2)
20008f6c:	18000226 	beq	r3,zero,20008f78 <strlen+0x14>
20008f70:	10800044 	addi	r2,r2,1
20008f74:	003ffc06 	br	20008f68 <strlen+0x4>
20008f78:	1105c83a 	sub	r2,r2,r4
20008f7c:	f800283a 	ret

20008f80 <print_repeat>:
20008f80:	defffb04 	addi	sp,sp,-20
20008f84:	dc800315 	stw	r18,12(sp)
20008f88:	dc400215 	stw	r17,8(sp)
20008f8c:	dc000115 	stw	r16,4(sp)
20008f90:	dfc00415 	stw	ra,16(sp)
20008f94:	2025883a 	mov	r18,r4
20008f98:	2823883a 	mov	r17,r5
20008f9c:	d9800005 	stb	r6,0(sp)
20008fa0:	3821883a 	mov	r16,r7
20008fa4:	04000a0e 	bge	zero,r16,20008fd0 <print_repeat+0x50>
20008fa8:	88800117 	ldw	r2,4(r17)
20008fac:	9009883a 	mov	r4,r18
20008fb0:	880b883a 	mov	r5,r17
20008fb4:	d80d883a 	mov	r6,sp
20008fb8:	01c00044 	movi	r7,1
20008fbc:	103ee83a 	callr	r2
20008fc0:	843fffc4 	addi	r16,r16,-1
20008fc4:	103ff726 	beq	r2,zero,20008fa4 <print_repeat+0x24>
20008fc8:	00bfffc4 	movi	r2,-1
20008fcc:	00000106 	br	20008fd4 <print_repeat+0x54>
20008fd0:	0005883a 	mov	r2,zero
20008fd4:	dfc00417 	ldw	ra,16(sp)
20008fd8:	dc800317 	ldw	r18,12(sp)
20008fdc:	dc400217 	ldw	r17,8(sp)
20008fe0:	dc000117 	ldw	r16,4(sp)
20008fe4:	dec00504 	addi	sp,sp,20
20008fe8:	f800283a 	ret

20008fec <___vfprintf_internal_r>:
20008fec:	deffe404 	addi	sp,sp,-112
20008ff0:	d8c00804 	addi	r3,sp,32
20008ff4:	df001a15 	stw	fp,104(sp)
20008ff8:	ddc01915 	stw	r23,100(sp)
20008ffc:	dd801815 	stw	r22,96(sp)
20009000:	dd401715 	stw	r21,92(sp)
20009004:	dd001615 	stw	r20,88(sp)
20009008:	dcc01515 	stw	r19,84(sp)
2000900c:	dc801415 	stw	r18,80(sp)
20009010:	dc401315 	stw	r17,76(sp)
20009014:	dc001215 	stw	r16,72(sp)
20009018:	dfc01b15 	stw	ra,108(sp)
2000901c:	2027883a 	mov	r19,r4
20009020:	2839883a 	mov	fp,r5
20009024:	382f883a 	mov	r23,r7
20009028:	d9800f15 	stw	r6,60(sp)
2000902c:	0021883a 	mov	r16,zero
20009030:	d8000e15 	stw	zero,56(sp)
20009034:	002d883a 	mov	r22,zero
20009038:	0029883a 	mov	r20,zero
2000903c:	0025883a 	mov	r18,zero
20009040:	0023883a 	mov	r17,zero
20009044:	d8000c15 	stw	zero,48(sp)
20009048:	d8000b15 	stw	zero,44(sp)
2000904c:	002b883a 	mov	r21,zero
20009050:	d8c00915 	stw	r3,36(sp)
20009054:	d8c00f17 	ldw	r3,60(sp)
20009058:	19000003 	ldbu	r4,0(r3)
2000905c:	20803fcc 	andi	r2,r4,255
20009060:	1080201c 	xori	r2,r2,128
20009064:	10bfe004 	addi	r2,r2,-128
20009068:	10012426 	beq	r2,zero,200094fc <___vfprintf_internal_r+0x510>
2000906c:	00c00044 	movi	r3,1
20009070:	a8c01426 	beq	r21,r3,200090c4 <___vfprintf_internal_r+0xd8>
20009074:	1d400216 	blt	r3,r21,20009080 <___vfprintf_internal_r+0x94>
20009078:	a8000626 	beq	r21,zero,20009094 <___vfprintf_internal_r+0xa8>
2000907c:	00011b06 	br	200094ec <___vfprintf_internal_r+0x500>
20009080:	01400084 	movi	r5,2
20009084:	a9401d26 	beq	r21,r5,200090fc <___vfprintf_internal_r+0x110>
20009088:	014000c4 	movi	r5,3
2000908c:	a9402926 	beq	r21,r5,20009134 <___vfprintf_internal_r+0x148>
20009090:	00011606 	br	200094ec <___vfprintf_internal_r+0x500>
20009094:	01400944 	movi	r5,37
20009098:	11410326 	beq	r2,r5,200094a8 <___vfprintf_internal_r+0x4bc>
2000909c:	e0800117 	ldw	r2,4(fp)
200090a0:	d9000005 	stb	r4,0(sp)
200090a4:	e00b883a 	mov	r5,fp
200090a8:	9809883a 	mov	r4,r19
200090ac:	d80d883a 	mov	r6,sp
200090b0:	01c00044 	movi	r7,1
200090b4:	103ee83a 	callr	r2
200090b8:	1000de1e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
200090bc:	84000044 	addi	r16,r16,1
200090c0:	00010a06 	br	200094ec <___vfprintf_internal_r+0x500>
200090c4:	01400c04 	movi	r5,48
200090c8:	11410026 	beq	r2,r5,200094cc <___vfprintf_internal_r+0x4e0>
200090cc:	01400944 	movi	r5,37
200090d0:	11400a1e 	bne	r2,r5,200090fc <___vfprintf_internal_r+0x110>
200090d4:	d8800005 	stb	r2,0(sp)
200090d8:	e0800117 	ldw	r2,4(fp)
200090dc:	9809883a 	mov	r4,r19
200090e0:	e00b883a 	mov	r5,fp
200090e4:	d80d883a 	mov	r6,sp
200090e8:	a80f883a 	mov	r7,r21
200090ec:	103ee83a 	callr	r2
200090f0:	1000d01e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
200090f4:	84000044 	addi	r16,r16,1
200090f8:	0000fb06 	br	200094e8 <___vfprintf_internal_r+0x4fc>
200090fc:	217ff404 	addi	r5,r4,-48
20009100:	29403fcc 	andi	r5,r5,255
20009104:	00c00244 	movi	r3,9
20009108:	19400736 	bltu	r3,r5,20009128 <___vfprintf_internal_r+0x13c>
2000910c:	00bfffc4 	movi	r2,-1
20009110:	88800226 	beq	r17,r2,2000911c <___vfprintf_internal_r+0x130>
20009114:	8c4002a4 	muli	r17,r17,10
20009118:	00000106 	br	20009120 <___vfprintf_internal_r+0x134>
2000911c:	0023883a 	mov	r17,zero
20009120:	8963883a 	add	r17,r17,r5
20009124:	0000ea06 	br	200094d0 <___vfprintf_internal_r+0x4e4>
20009128:	01400b84 	movi	r5,46
2000912c:	1140ec26 	beq	r2,r5,200094e0 <___vfprintf_internal_r+0x4f4>
20009130:	05400084 	movi	r21,2
20009134:	213ff404 	addi	r4,r4,-48
20009138:	21003fcc 	andi	r4,r4,255
2000913c:	00c00244 	movi	r3,9
20009140:	19000736 	bltu	r3,r4,20009160 <___vfprintf_internal_r+0x174>
20009144:	00bfffc4 	movi	r2,-1
20009148:	90800226 	beq	r18,r2,20009154 <___vfprintf_internal_r+0x168>
2000914c:	948002a4 	muli	r18,r18,10
20009150:	00000106 	br	20009158 <___vfprintf_internal_r+0x16c>
20009154:	0025883a 	mov	r18,zero
20009158:	9125883a 	add	r18,r18,r4
2000915c:	0000e306 	br	200094ec <___vfprintf_internal_r+0x500>
20009160:	00c01b04 	movi	r3,108
20009164:	10c0dc26 	beq	r2,r3,200094d8 <___vfprintf_internal_r+0x4ec>
20009168:	013fffc4 	movi	r4,-1
2000916c:	91000226 	beq	r18,r4,20009178 <___vfprintf_internal_r+0x18c>
20009170:	d8000b15 	stw	zero,44(sp)
20009174:	00000106 	br	2000917c <___vfprintf_internal_r+0x190>
20009178:	04800044 	movi	r18,1
2000917c:	01001a44 	movi	r4,105
20009180:	11001626 	beq	r2,r4,200091dc <___vfprintf_internal_r+0x1f0>
20009184:	20800916 	blt	r4,r2,200091ac <___vfprintf_internal_r+0x1c0>
20009188:	010018c4 	movi	r4,99
2000918c:	11009226 	beq	r2,r4,200093d8 <___vfprintf_internal_r+0x3ec>
20009190:	01001904 	movi	r4,100
20009194:	11001126 	beq	r2,r4,200091dc <___vfprintf_internal_r+0x1f0>
20009198:	01001604 	movi	r4,88
2000919c:	1100d21e 	bne	r2,r4,200094e8 <___vfprintf_internal_r+0x4fc>
200091a0:	00c00044 	movi	r3,1
200091a4:	d8c00e15 	stw	r3,56(sp)
200091a8:	00001406 	br	200091fc <___vfprintf_internal_r+0x210>
200091ac:	01001cc4 	movi	r4,115
200091b0:	1100a226 	beq	r2,r4,2000943c <___vfprintf_internal_r+0x450>
200091b4:	20800416 	blt	r4,r2,200091c8 <___vfprintf_internal_r+0x1dc>
200091b8:	01001bc4 	movi	r4,111
200091bc:	1100ca1e 	bne	r2,r4,200094e8 <___vfprintf_internal_r+0x4fc>
200091c0:	05000204 	movi	r20,8
200091c4:	00000e06 	br	20009200 <___vfprintf_internal_r+0x214>
200091c8:	01001d44 	movi	r4,117
200091cc:	11000c26 	beq	r2,r4,20009200 <___vfprintf_internal_r+0x214>
200091d0:	01001e04 	movi	r4,120
200091d4:	11000926 	beq	r2,r4,200091fc <___vfprintf_internal_r+0x210>
200091d8:	0000c306 	br	200094e8 <___vfprintf_internal_r+0x4fc>
200091dc:	b8800104 	addi	r2,r23,4
200091e0:	b0000726 	beq	r22,zero,20009200 <___vfprintf_internal_r+0x214>
200091e4:	d8800d15 	stw	r2,52(sp)
200091e8:	bdc00017 	ldw	r23,0(r23)
200091ec:	b800080e 	bge	r23,zero,20009210 <___vfprintf_internal_r+0x224>
200091f0:	05efc83a 	sub	r23,zero,r23
200091f4:	02400044 	movi	r9,1
200091f8:	00000606 	br	20009214 <___vfprintf_internal_r+0x228>
200091fc:	05000404 	movi	r20,16
20009200:	b8c00104 	addi	r3,r23,4
20009204:	d8c00d15 	stw	r3,52(sp)
20009208:	bdc00017 	ldw	r23,0(r23)
2000920c:	002d883a 	mov	r22,zero
20009210:	0013883a 	mov	r9,zero
20009214:	002b883a 	mov	r21,zero
20009218:	dd4d883a 	add	r6,sp,r21
2000921c:	b8001626 	beq	r23,zero,20009278 <___vfprintf_internal_r+0x28c>
20009220:	b809883a 	mov	r4,r23
20009224:	a00b883a 	mov	r5,r20
20009228:	d9801015 	stw	r6,64(sp)
2000922c:	da401115 	stw	r9,68(sp)
20009230:	00097740 	call	20009774 <__udivsi3>
20009234:	a089383a 	mul	r4,r20,r2
20009238:	00c00244 	movi	r3,9
2000923c:	d9801017 	ldw	r6,64(sp)
20009240:	b92fc83a 	sub	r23,r23,r4
20009244:	da401117 	ldw	r9,68(sp)
20009248:	1dc00216 	blt	r3,r23,20009254 <___vfprintf_internal_r+0x268>
2000924c:	bdc00c04 	addi	r23,r23,48
20009250:	00000506 	br	20009268 <___vfprintf_internal_r+0x27c>
20009254:	d8c00e17 	ldw	r3,56(sp)
20009258:	18000226 	beq	r3,zero,20009264 <___vfprintf_internal_r+0x278>
2000925c:	bdc00dc4 	addi	r23,r23,55
20009260:	00000106 	br	20009268 <___vfprintf_internal_r+0x27c>
20009264:	bdc015c4 	addi	r23,r23,87
20009268:	35c00005 	stb	r23,0(r6)
2000926c:	ad400044 	addi	r21,r21,1
20009270:	102f883a 	mov	r23,r2
20009274:	003fe806 	br	20009218 <___vfprintf_internal_r+0x22c>
20009278:	36c7c83a 	sub	r3,r6,sp
2000927c:	d8c00a15 	stw	r3,40(sp)
20009280:	90c5c83a 	sub	r2,r18,r3
20009284:	302f883a 	mov	r23,r6
20009288:	00800e0e 	bge	zero,r2,200092c4 <___vfprintf_internal_r+0x2d8>
2000928c:	302b883a 	mov	r21,r6
20009290:	3085883a 	add	r2,r6,r2
20009294:	01400c04 	movi	r5,48
20009298:	d8c00917 	ldw	r3,36(sp)
2000929c:	a809883a 	mov	r4,r21
200092a0:	a8c0052e 	bgeu	r21,r3,200092b8 <___vfprintf_internal_r+0x2cc>
200092a4:	ad400044 	addi	r21,r21,1
200092a8:	21400005 	stb	r5,0(r4)
200092ac:	a82f883a 	mov	r23,r21
200092b0:	a8bff91e 	bne	r21,r2,20009298 <___vfprintf_internal_r+0x2ac>
200092b4:	00000106 	br	200092bc <___vfprintf_internal_r+0x2d0>
200092b8:	a82f883a 	mov	r23,r21
200092bc:	aeebc83a 	sub	r21,r21,sp
200092c0:	dd400a15 	stw	r21,40(sp)
200092c4:	d8c00a17 	ldw	r3,40(sp)
200092c8:	1a51883a 	add	r8,r3,r9
200092cc:	d8c00b17 	ldw	r3,44(sp)
200092d0:	8a2bc83a 	sub	r21,r17,r8
200092d4:	18001726 	beq	r3,zero,20009334 <___vfprintf_internal_r+0x348>
200092d8:	48000a26 	beq	r9,zero,20009304 <___vfprintf_internal_r+0x318>
200092dc:	00800b44 	movi	r2,45
200092e0:	d8800805 	stb	r2,32(sp)
200092e4:	e0800117 	ldw	r2,4(fp)
200092e8:	9809883a 	mov	r4,r19
200092ec:	e00b883a 	mov	r5,fp
200092f0:	d9800804 	addi	r6,sp,32
200092f4:	01c00044 	movi	r7,1
200092f8:	103ee83a 	callr	r2
200092fc:	10004d1e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
20009300:	84000044 	addi	r16,r16,1
20009304:	0540070e 	bge	zero,r21,20009324 <___vfprintf_internal_r+0x338>
20009308:	9809883a 	mov	r4,r19
2000930c:	e00b883a 	mov	r5,fp
20009310:	01800c04 	movi	r6,48
20009314:	a80f883a 	mov	r7,r21
20009318:	0008f800 	call	20008f80 <print_repeat>
2000931c:	1000451e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
20009320:	8561883a 	add	r16,r16,r21
20009324:	d8c00a17 	ldw	r3,40(sp)
20009328:	b811883a 	mov	r8,r23
2000932c:	1debc83a 	sub	r21,r3,r23
20009330:	00002206 	br	200093bc <___vfprintf_internal_r+0x3d0>
20009334:	0540090e 	bge	zero,r21,2000935c <___vfprintf_internal_r+0x370>
20009338:	9809883a 	mov	r4,r19
2000933c:	e00b883a 	mov	r5,fp
20009340:	01800804 	movi	r6,32
20009344:	a80f883a 	mov	r7,r21
20009348:	da401115 	stw	r9,68(sp)
2000934c:	0008f800 	call	20008f80 <print_repeat>
20009350:	da401117 	ldw	r9,68(sp)
20009354:	1000371e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
20009358:	8561883a 	add	r16,r16,r21
2000935c:	483ff126 	beq	r9,zero,20009324 <___vfprintf_internal_r+0x338>
20009360:	00800b44 	movi	r2,45
20009364:	d8800805 	stb	r2,32(sp)
20009368:	e0800117 	ldw	r2,4(fp)
2000936c:	9809883a 	mov	r4,r19
20009370:	e00b883a 	mov	r5,fp
20009374:	d9800804 	addi	r6,sp,32
20009378:	01c00044 	movi	r7,1
2000937c:	103ee83a 	callr	r2
20009380:	10002c1e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
20009384:	84000044 	addi	r16,r16,1
20009388:	003fe606 	br	20009324 <___vfprintf_internal_r+0x338>
2000938c:	423fffc4 	addi	r8,r8,-1
20009390:	40800003 	ldbu	r2,0(r8)
20009394:	9809883a 	mov	r4,r19
20009398:	e00b883a 	mov	r5,fp
2000939c:	d8800805 	stb	r2,32(sp)
200093a0:	e0800117 	ldw	r2,4(fp)
200093a4:	d9800804 	addi	r6,sp,32
200093a8:	da001015 	stw	r8,64(sp)
200093ac:	01c00044 	movi	r7,1
200093b0:	103ee83a 	callr	r2
200093b4:	da001017 	ldw	r8,64(sp)
200093b8:	10001e1e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
200093bc:	8205c83a 	sub	r2,r16,r8
200093c0:	4549883a 	add	r4,r8,r21
200093c4:	b885883a 	add	r2,r23,r2
200093c8:	013ff016 	blt	zero,r4,2000938c <___vfprintf_internal_r+0x3a0>
200093cc:	1021883a 	mov	r16,r2
200093d0:	ddc00d17 	ldw	r23,52(sp)
200093d4:	00004406 	br	200094e8 <___vfprintf_internal_r+0x4fc>
200093d8:	00800044 	movi	r2,1
200093dc:	1440080e 	bge	r2,r17,20009400 <___vfprintf_internal_r+0x414>
200093e0:	8d7fffc4 	addi	r21,r17,-1
200093e4:	9809883a 	mov	r4,r19
200093e8:	e00b883a 	mov	r5,fp
200093ec:	01800804 	movi	r6,32
200093f0:	a80f883a 	mov	r7,r21
200093f4:	0008f800 	call	20008f80 <print_repeat>
200093f8:	10000e1e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
200093fc:	8561883a 	add	r16,r16,r21
20009400:	b8800017 	ldw	r2,0(r23)
20009404:	9809883a 	mov	r4,r19
20009408:	e00b883a 	mov	r5,fp
2000940c:	d8800005 	stb	r2,0(sp)
20009410:	e0800117 	ldw	r2,4(fp)
20009414:	d80d883a 	mov	r6,sp
20009418:	01c00044 	movi	r7,1
2000941c:	bd400104 	addi	r21,r23,4
20009420:	103ee83a 	callr	r2
20009424:	1000031e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
20009428:	84000044 	addi	r16,r16,1
2000942c:	a82f883a 	mov	r23,r21
20009430:	00002d06 	br	200094e8 <___vfprintf_internal_r+0x4fc>
20009434:	00bfffc4 	movi	r2,-1
20009438:	00003106 	br	20009500 <___vfprintf_internal_r+0x514>
2000943c:	bd400017 	ldw	r21,0(r23)
20009440:	b8c00104 	addi	r3,r23,4
20009444:	d8c00a15 	stw	r3,40(sp)
20009448:	a809883a 	mov	r4,r21
2000944c:	0008f640 	call	20008f64 <strlen>
20009450:	8893c83a 	sub	r9,r17,r2
20009454:	102f883a 	mov	r23,r2
20009458:	0240090e 	bge	zero,r9,20009480 <___vfprintf_internal_r+0x494>
2000945c:	480f883a 	mov	r7,r9
20009460:	9809883a 	mov	r4,r19
20009464:	e00b883a 	mov	r5,fp
20009468:	01800804 	movi	r6,32
2000946c:	da401115 	stw	r9,68(sp)
20009470:	0008f800 	call	20008f80 <print_repeat>
20009474:	da401117 	ldw	r9,68(sp)
20009478:	103fee1e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
2000947c:	8261883a 	add	r16,r16,r9
20009480:	e0800117 	ldw	r2,4(fp)
20009484:	9809883a 	mov	r4,r19
20009488:	e00b883a 	mov	r5,fp
2000948c:	a80d883a 	mov	r6,r21
20009490:	b80f883a 	mov	r7,r23
20009494:	103ee83a 	callr	r2
20009498:	103fe61e 	bne	r2,zero,20009434 <___vfprintf_internal_r+0x448>
2000949c:	85e1883a 	add	r16,r16,r23
200094a0:	ddc00a17 	ldw	r23,40(sp)
200094a4:	00001006 	br	200094e8 <___vfprintf_internal_r+0x4fc>
200094a8:	05800044 	movi	r22,1
200094ac:	04bfffc4 	movi	r18,-1
200094b0:	d8000e15 	stw	zero,56(sp)
200094b4:	05000284 	movi	r20,10
200094b8:	9023883a 	mov	r17,r18
200094bc:	d8000c15 	stw	zero,48(sp)
200094c0:	d8000b15 	stw	zero,44(sp)
200094c4:	b02b883a 	mov	r21,r22
200094c8:	00000806 	br	200094ec <___vfprintf_internal_r+0x500>
200094cc:	dd400b15 	stw	r21,44(sp)
200094d0:	05400084 	movi	r21,2
200094d4:	00000506 	br	200094ec <___vfprintf_internal_r+0x500>
200094d8:	00c00044 	movi	r3,1
200094dc:	d8c00c15 	stw	r3,48(sp)
200094e0:	054000c4 	movi	r21,3
200094e4:	00000106 	br	200094ec <___vfprintf_internal_r+0x500>
200094e8:	002b883a 	mov	r21,zero
200094ec:	d8c00f17 	ldw	r3,60(sp)
200094f0:	18c00044 	addi	r3,r3,1
200094f4:	d8c00f15 	stw	r3,60(sp)
200094f8:	003ed606 	br	20009054 <___vfprintf_internal_r+0x68>
200094fc:	8005883a 	mov	r2,r16
20009500:	dfc01b17 	ldw	ra,108(sp)
20009504:	df001a17 	ldw	fp,104(sp)
20009508:	ddc01917 	ldw	r23,100(sp)
2000950c:	dd801817 	ldw	r22,96(sp)
20009510:	dd401717 	ldw	r21,92(sp)
20009514:	dd001617 	ldw	r20,88(sp)
20009518:	dcc01517 	ldw	r19,84(sp)
2000951c:	dc801417 	ldw	r18,80(sp)
20009520:	dc401317 	ldw	r17,76(sp)
20009524:	dc001217 	ldw	r16,72(sp)
20009528:	dec01c04 	addi	sp,sp,112
2000952c:	f800283a 	ret

20009530 <__vfprintf_internal>:
20009530:	2007883a 	mov	r3,r4
20009534:	01000034 	movhi	r4,0
20009538:	21017e04 	addi	r4,r4,1528
2000953c:	21000017 	ldw	r4,0(r4)
20009540:	2805883a 	mov	r2,r5
20009544:	300f883a 	mov	r7,r6
20009548:	180b883a 	mov	r5,r3
2000954c:	100d883a 	mov	r6,r2
20009550:	0008fec1 	jmpi	20008fec <___vfprintf_internal_r>

20009554 <__sfvwrite_small_dev>:
20009554:	2880000b 	ldhu	r2,0(r5)
20009558:	defffa04 	addi	sp,sp,-24
2000955c:	dc000015 	stw	r16,0(sp)
20009560:	dfc00515 	stw	ra,20(sp)
20009564:	dd000415 	stw	r20,16(sp)
20009568:	dcc00315 	stw	r19,12(sp)
2000956c:	dc800215 	stw	r18,8(sp)
20009570:	dc400115 	stw	r17,4(sp)
20009574:	1080020c 	andi	r2,r2,8
20009578:	2821883a 	mov	r16,r5
2000957c:	10001726 	beq	r2,zero,200095dc <__sfvwrite_small_dev+0x88>
20009580:	2880008f 	ldh	r2,2(r5)
20009584:	10001216 	blt	r2,zero,200095d0 <__sfvwrite_small_dev+0x7c>
20009588:	2027883a 	mov	r19,r4
2000958c:	3025883a 	mov	r18,r6
20009590:	3823883a 	mov	r17,r7
20009594:	05010004 	movi	r20,1024
20009598:	04400b0e 	bge	zero,r17,200095c8 <__sfvwrite_small_dev+0x74>
2000959c:	8140008f 	ldh	r5,2(r16)
200095a0:	880f883a 	mov	r7,r17
200095a4:	a440010e 	bge	r20,r17,200095ac <__sfvwrite_small_dev+0x58>
200095a8:	01c10004 	movi	r7,1024
200095ac:	9809883a 	mov	r4,r19
200095b0:	900d883a 	mov	r6,r18
200095b4:	00096000 	call	20009600 <_write_r>
200095b8:	0080050e 	bge	zero,r2,200095d0 <__sfvwrite_small_dev+0x7c>
200095bc:	88a3c83a 	sub	r17,r17,r2
200095c0:	90a5883a 	add	r18,r18,r2
200095c4:	003ff406 	br	20009598 <__sfvwrite_small_dev+0x44>
200095c8:	0005883a 	mov	r2,zero
200095cc:	00000406 	br	200095e0 <__sfvwrite_small_dev+0x8c>
200095d0:	8080000b 	ldhu	r2,0(r16)
200095d4:	10801014 	ori	r2,r2,64
200095d8:	8080000d 	sth	r2,0(r16)
200095dc:	00bfffc4 	movi	r2,-1
200095e0:	dfc00517 	ldw	ra,20(sp)
200095e4:	dd000417 	ldw	r20,16(sp)
200095e8:	dcc00317 	ldw	r19,12(sp)
200095ec:	dc800217 	ldw	r18,8(sp)
200095f0:	dc400117 	ldw	r17,4(sp)
200095f4:	dc000017 	ldw	r16,0(sp)
200095f8:	dec00604 	addi	sp,sp,24
200095fc:	f800283a 	ret

20009600 <_write_r>:
20009600:	defffd04 	addi	sp,sp,-12
20009604:	dc000015 	stw	r16,0(sp)
20009608:	04000034 	movhi	r16,0
2000960c:	dc400115 	stw	r17,4(sp)
20009610:	84019704 	addi	r16,r16,1628
20009614:	2023883a 	mov	r17,r4
20009618:	2809883a 	mov	r4,r5
2000961c:	300b883a 	mov	r5,r6
20009620:	380d883a 	mov	r6,r7
20009624:	dfc00215 	stw	ra,8(sp)
20009628:	80000015 	stw	zero,0(r16)
2000962c:	0009b880 	call	20009b88 <write>
20009630:	00ffffc4 	movi	r3,-1
20009634:	10c0031e 	bne	r2,r3,20009644 <_write_r+0x44>
20009638:	80c00017 	ldw	r3,0(r16)
2000963c:	18000126 	beq	r3,zero,20009644 <_write_r+0x44>
20009640:	88c00015 	stw	r3,0(r17)
20009644:	dfc00217 	ldw	ra,8(sp)
20009648:	dc400117 	ldw	r17,4(sp)
2000964c:	dc000017 	ldw	r16,0(sp)
20009650:	dec00304 	addi	sp,sp,12
20009654:	f800283a 	ret

20009658 <udivmodsi4>:
20009658:	2900182e 	bgeu	r5,r4,200096bc <udivmodsi4+0x64>
2000965c:	28001716 	blt	r5,zero,200096bc <udivmodsi4+0x64>
20009660:	00800804 	movi	r2,32
20009664:	00c00044 	movi	r3,1
20009668:	00000206 	br	20009674 <udivmodsi4+0x1c>
2000966c:	10001126 	beq	r2,zero,200096b4 <udivmodsi4+0x5c>
20009670:	28000516 	blt	r5,zero,20009688 <udivmodsi4+0x30>
20009674:	294b883a 	add	r5,r5,r5
20009678:	10bfffc4 	addi	r2,r2,-1
2000967c:	18c7883a 	add	r3,r3,r3
20009680:	293ffa36 	bltu	r5,r4,2000966c <udivmodsi4+0x14>
20009684:	18000b26 	beq	r3,zero,200096b4 <udivmodsi4+0x5c>
20009688:	0005883a 	mov	r2,zero
2000968c:	21400236 	bltu	r4,r5,20009698 <udivmodsi4+0x40>
20009690:	2149c83a 	sub	r4,r4,r5
20009694:	10c4b03a 	or	r2,r2,r3
20009698:	1806d07a 	srli	r3,r3,1
2000969c:	280ad07a 	srli	r5,r5,1
200096a0:	183ffa1e 	bne	r3,zero,2000968c <udivmodsi4+0x34>
200096a4:	3000011e 	bne	r6,zero,200096ac <udivmodsi4+0x54>
200096a8:	f800283a 	ret
200096ac:	2005883a 	mov	r2,r4
200096b0:	f800283a 	ret
200096b4:	0005883a 	mov	r2,zero
200096b8:	003ffa06 	br	200096a4 <udivmodsi4+0x4c>
200096bc:	00c00044 	movi	r3,1
200096c0:	003ff106 	br	20009688 <udivmodsi4+0x30>

200096c4 <__divsi3>:
200096c4:	defffe04 	addi	sp,sp,-8
200096c8:	dfc00115 	stw	ra,4(sp)
200096cc:	dc000015 	stw	r16,0(sp)
200096d0:	20000b16 	blt	r4,zero,20009700 <__divsi3+0x3c>
200096d4:	0021883a 	mov	r16,zero
200096d8:	28000c16 	blt	r5,zero,2000970c <__divsi3+0x48>
200096dc:	000d883a 	mov	r6,zero
200096e0:	00096580 	call	20009658 <udivmodsi4>
200096e4:	0407c83a 	sub	r3,zero,r16
200096e8:	1884f03a 	xor	r2,r3,r2
200096ec:	1405883a 	add	r2,r2,r16
200096f0:	dfc00117 	ldw	ra,4(sp)
200096f4:	dc000017 	ldw	r16,0(sp)
200096f8:	dec00204 	addi	sp,sp,8
200096fc:	f800283a 	ret
20009700:	0109c83a 	sub	r4,zero,r4
20009704:	04000044 	movi	r16,1
20009708:	283ff40e 	bge	r5,zero,200096dc <__divsi3+0x18>
2000970c:	014bc83a 	sub	r5,zero,r5
20009710:	8400005c 	xori	r16,r16,1
20009714:	003ff106 	br	200096dc <__divsi3+0x18>

20009718 <__modsi3>:
20009718:	defffd04 	addi	sp,sp,-12
2000971c:	dfc00215 	stw	ra,8(sp)
20009720:	dc400115 	stw	r17,4(sp)
20009724:	dc000015 	stw	r16,0(sp)
20009728:	20000c16 	blt	r4,zero,2000975c <__modsi3+0x44>
2000972c:	0023883a 	mov	r17,zero
20009730:	0021883a 	mov	r16,zero
20009734:	28000d16 	blt	r5,zero,2000976c <__modsi3+0x54>
20009738:	01800044 	movi	r6,1
2000973c:	00096580 	call	20009658 <udivmodsi4>
20009740:	1404f03a 	xor	r2,r2,r16
20009744:	8885883a 	add	r2,r17,r2
20009748:	dfc00217 	ldw	ra,8(sp)
2000974c:	dc400117 	ldw	r17,4(sp)
20009750:	dc000017 	ldw	r16,0(sp)
20009754:	dec00304 	addi	sp,sp,12
20009758:	f800283a 	ret
2000975c:	0109c83a 	sub	r4,zero,r4
20009760:	04400044 	movi	r17,1
20009764:	043fffc4 	movi	r16,-1
20009768:	283ff30e 	bge	r5,zero,20009738 <__modsi3+0x20>
2000976c:	014bc83a 	sub	r5,zero,r5
20009770:	003ff106 	br	20009738 <__modsi3+0x20>

20009774 <__udivsi3>:
20009774:	000d883a 	mov	r6,zero
20009778:	00096581 	jmpi	20009658 <udivmodsi4>

2000977c <__umodsi3>:
2000977c:	01800044 	movi	r6,1
20009780:	00096581 	jmpi	20009658 <udivmodsi4>

20009784 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
20009784:	deffff04 	addi	sp,sp,-4
20009788:	01000034 	movhi	r4,0
2000978c:	01480074 	movhi	r5,8193
20009790:	dfc00015 	stw	ra,0(sp)
20009794:	2100ac04 	addi	r4,r4,688
20009798:	296b5904 	addi	r5,r5,-21148

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
2000979c:	2140061e 	bne	r4,r5,200097b8 <alt_load+0x34>
200097a0:	01080074 	movhi	r4,8193
200097a4:	01480074 	movhi	r5,8193
200097a8:	21200804 	addi	r4,r4,-32736
200097ac:	29600804 	addi	r5,r5,-32736
200097b0:	2140141e 	bne	r4,r5,20009804 <alt_load+0x80>
200097b4:	00000d06 	br	200097ec <alt_load+0x68>
200097b8:	00c00034 	movhi	r3,0
200097bc:	18c18b04 	addi	r3,r3,1580
200097c0:	00bfff04 	movi	r2,-4
200097c4:	1907c83a 	sub	r3,r3,r4
200097c8:	1886703a 	and	r3,r3,r2
200097cc:	0005883a 	mov	r2,zero
  {
    while( to != end )
200097d0:	10fff326 	beq	r2,r3,200097a0 <alt_load+0x1c>
200097d4:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
200097d8:	39c00017 	ldw	r7,0(r7)
200097dc:	110d883a 	add	r6,r2,r4
200097e0:	10800104 	addi	r2,r2,4
200097e4:	31c00015 	stw	r7,0(r6)
200097e8:	003ff906 	br	200097d0 <alt_load+0x4c>
200097ec:	01000034 	movhi	r4,0
200097f0:	01400034 	movhi	r5,0
200097f4:	21000004 	addi	r4,r4,0
200097f8:	29400004 	addi	r5,r5,0

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
200097fc:	2140121e 	bne	r4,r5,20009848 <alt_load+0xc4>
20009800:	00000d06 	br	20009838 <alt_load+0xb4>
20009804:	00c80074 	movhi	r3,8193
20009808:	18e06304 	addi	r3,r3,-32372
2000980c:	00bfff04 	movi	r2,-4
20009810:	1907c83a 	sub	r3,r3,r4
20009814:	1886703a 	and	r3,r3,r2
20009818:	0005883a 	mov	r2,zero
  {
    while( to != end )
2000981c:	10fff326 	beq	r2,r3,200097ec <alt_load+0x68>
20009820:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
20009824:	39c00017 	ldw	r7,0(r7)
20009828:	110d883a 	add	r6,r2,r4
2000982c:	10800104 	addi	r2,r2,4
20009830:	31c00015 	stw	r7,0(r6)
20009834:	003ff906 	br	2000981c <alt_load+0x98>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
20009838:	000a5d40 	call	2000a5d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
2000983c:	dfc00017 	ldw	ra,0(sp)
20009840:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
20009844:	000a7c41 	jmpi	2000a7c4 <alt_icache_flush_all>
20009848:	00c00034 	movhi	r3,0
2000984c:	18c0ac04 	addi	r3,r3,688
20009850:	00bfff04 	movi	r2,-4
20009854:	1907c83a 	sub	r3,r3,r4
20009858:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
2000985c:	0005883a 	mov	r2,zero
  {
    while( to != end )
20009860:	10fff526 	beq	r2,r3,20009838 <alt_load+0xb4>
20009864:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
20009868:	39c00017 	ldw	r7,0(r7)
2000986c:	110d883a 	add	r6,r2,r4
20009870:	10800104 	addi	r2,r2,4
20009874:	31c00015 	stw	r7,0(r6)
20009878:	003ff906 	br	20009860 <alt_load+0xdc>

2000987c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2000987c:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
20009880:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
20009884:	dfc00115 	stw	ra,4(sp)
20009888:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2000988c:	0009c100 	call	20009c10 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
20009890:	0009c300 	call	20009c30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
20009894:	01000034 	movhi	r4,0
20009898:	21009a04 	addi	r4,r4,616
2000989c:	200b883a 	mov	r5,r4
200098a0:	200d883a 	mov	r6,r4
200098a4:	000a94c0 	call	2000a94c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
200098a8:	d1201e17 	ldw	r4,-32648(gp)
200098ac:	d1601d17 	ldw	r5,-32652(gp)
200098b0:	d1a01c17 	ldw	r6,-32656(gp)
200098b4:	00085200 	call	20008520 <main>
  close(STDOUT_FILENO);
200098b8:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
200098bc:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
200098c0:	000a50c0 	call	2000a50c <close>
  exit (result);
200098c4:	8009883a 	mov	r4,r16
200098c8:	000ab640 	call	2000ab64 <exit>

200098cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
200098cc:	defff904 	addi	sp,sp,-28
200098d0:	dc000015 	stw	r16,0(sp)
200098d4:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
200098d8:	01400034 	movhi	r5,0
200098dc:	29418304 	addi	r5,r5,1548
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
200098e0:	dd400515 	stw	r21,20(sp)
200098e4:	dd000415 	stw	r20,16(sp)
200098e8:	dc800215 	stw	r18,8(sp)
200098ec:	dc400115 	stw	r17,4(sp)
200098f0:	dfc00615 	stw	ra,24(sp)
200098f4:	dcc00315 	stw	r19,12(sp)
200098f8:	2023883a 	mov	r17,r4
200098fc:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
20009900:	000a6580 	call	2000a658 <alt_find_dev>
20009904:	1029883a 	mov	r20,r2
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  int status = -ENODEV;
  int isafs = 0;
20009908:	002b883a 	mov	r21,zero
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2000990c:	1000051e 	bne	r2,zero,20009924 <open+0x58>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20009910:	8809883a 	mov	r4,r17
20009914:	000a6cc0 	call	2000a6cc <alt_find_file>
20009918:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
2000991c:	10003b26 	beq	r2,zero,20009a0c <open+0x140>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
20009920:	05400044 	movi	r21,1
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
20009924:	a009883a 	mov	r4,r20
20009928:	000a7780 	call	2000a778 <alt_get_fd>
2000992c:	1027883a 	mov	r19,r2
20009930:	10003916 	blt	r2,zero,20009a18 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20009934:	12000324 	muli	r8,r2,12
20009938:	00c00034 	movhi	r3,0
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2000993c:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20009940:	18c11204 	addi	r3,r3,1096
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20009944:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20009948:	40c9883a 	add	r4,r8,r3
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2000994c:	814a703a 	and	r5,r16,r5
20009950:	42000204 	addi	r8,r8,8
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
20009954:	a8000626 	beq	r21,zero,20009970 <open+0xa4>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20009958:	1a07883a 	add	r3,r3,r8
2000995c:	19400015 	stw	r5,0(r3)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
20009960:	a0800317 	ldw	r2,12(r20)
20009964:	1000141e 	bne	r2,zero,200099b8 <open+0xec>
20009968:	9805883a 	mov	r2,r19
2000996c:	00002e06 	br	20009a28 <open+0x15c>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20009970:	00800034 	movhi	r2,0

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20009974:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20009978:	10818204 	addi	r2,r2,1544

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
2000997c:	1a11883a 	add	r8,r3,r8
20009980:	41400015 	stw	r5,0(r8)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20009984:	200d883a 	mov	r6,r4
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20009988:	11400017 	ldw	r5,0(r2)
2000998c:	0005883a 	mov	r2,zero
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20009990:	1a000017 	ldw	r8,0(r3)
20009994:	31c00017 	ldw	r7,0(r6)
20009998:	41c0031e 	bne	r8,r7,200099a8 <open+0xdc>
2000999c:	19c00217 	ldw	r7,8(r3)
200099a0:	3800010e 	bge	r7,zero,200099a8 <open+0xdc>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
200099a4:	19001e1e 	bne	r3,r4,20009a20 <open+0x154>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
200099a8:	10800044 	addi	r2,r2,1
200099ac:	18c00304 	addi	r3,r3,12
200099b0:	28bff72e 	bgeu	r5,r2,20009990 <open+0xc4>
200099b4:	003fea06 	br	20009960 <open+0x94>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
200099b8:	800d883a 	mov	r6,r16
200099bc:	880b883a 	mov	r5,r17
200099c0:	900f883a 	mov	r7,r18
200099c4:	103ee83a 	callr	r2
200099c8:	1021883a 	mov	r16,r2
200099cc:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
200099d0:	8000150e 	bge	r16,zero,20009a28 <open+0x15c>
  {
    alt_release_fd (index);  
200099d4:	9809883a 	mov	r4,r19
200099d8:	0009af80 	call	20009af8 <alt_release_fd>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
200099dc:	00800034 	movhi	r2,0
200099e0:	10818704 	addi	r2,r2,1564
200099e4:	10800017 	ldw	r2,0(r2)
200099e8:	10000226 	beq	r2,zero,200099f4 <open+0x128>
200099ec:	103ee83a 	callr	r2
200099f0:	00000206 	br	200099fc <open+0x130>
200099f4:	00800034 	movhi	r2,0
200099f8:	10819704 	addi	r2,r2,1628
    ALT_ERRNO = -status;
200099fc:	0421c83a 	sub	r16,zero,r16
20009a00:	14000015 	stw	r16,0(r2)
    return -1;
20009a04:	00bfffc4 	movi	r2,-1
20009a08:	00000706 	br	20009a28 <open+0x15c>
      }
    }
  }
  else
  {
    status = -ENODEV;
20009a0c:	043ffb44 	movi	r16,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20009a10:	04ffffc4 	movi	r19,-1
20009a14:	003fef06 	br	200099d4 <open+0x108>
20009a18:	1021883a 	mov	r16,r2
20009a1c:	003fed06 	br	200099d4 <open+0x108>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
20009a20:	043ffcc4 	movi	r16,-13
20009a24:	003feb06 	br	200099d4 <open+0x108>
  }
  
  /* return the reference upon success */

  return index;
}
20009a28:	dfc00617 	ldw	ra,24(sp)
20009a2c:	dd400517 	ldw	r21,20(sp)
20009a30:	dd000417 	ldw	r20,16(sp)
20009a34:	dcc00317 	ldw	r19,12(sp)
20009a38:	dc800217 	ldw	r18,8(sp)
20009a3c:	dc400117 	ldw	r17,4(sp)
20009a40:	dc000017 	ldw	r16,0(sp)
20009a44:	dec00704 	addi	sp,sp,28
20009a48:	f800283a 	ret

20009a4c <alt_get_errno>:
20009a4c:	00800034 	movhi	r2,0
20009a50:	10818704 	addi	r2,r2,1564
20009a54:	10800017 	ldw	r2,0(r2)
20009a58:	10000126 	beq	r2,zero,20009a60 <alt_get_errno+0x14>
20009a5c:	1000683a 	jmp	r2
}
20009a60:	00800034 	movhi	r2,0
20009a64:	10819704 	addi	r2,r2,1628
20009a68:	f800283a 	ret

20009a6c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
20009a6c:	defffe04 	addi	sp,sp,-8
20009a70:	dfc00115 	stw	ra,4(sp)
20009a74:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20009a78:	20001616 	blt	r4,zero,20009ad4 <read+0x68>
20009a7c:	20800324 	muli	r2,r4,12
20009a80:	00c00034 	movhi	r3,0
20009a84:	18c11204 	addi	r3,r3,1096
20009a88:	10c9883a 	add	r4,r2,r3
  
  if (fd)
20009a8c:	20001126 	beq	r4,zero,20009ad4 <read+0x68>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20009a90:	20800217 	ldw	r2,8(r4)
20009a94:	00c00044 	movi	r3,1
20009a98:	108000cc 	andi	r2,r2,3
20009a9c:	10c00a26 	beq	r2,r3,20009ac8 <read+0x5c>
        (fd->dev->read))
20009aa0:	20800017 	ldw	r2,0(r4)
20009aa4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20009aa8:	10000726 	beq	r2,zero,20009ac8 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
20009aac:	103ee83a 	callr	r2
20009ab0:	1021883a 	mov	r16,r2
20009ab4:	10000b0e 	bge	r2,zero,20009ae4 <read+0x78>
        {
          ALT_ERRNO = -rval;
20009ab8:	0009a4c0 	call	20009a4c <alt_get_errno>
20009abc:	0421c83a 	sub	r16,zero,r16
20009ac0:	14000015 	stw	r16,0(r2)
20009ac4:	00000606 	br	20009ae0 <read+0x74>
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
20009ac8:	0009a4c0 	call	20009a4c <alt_get_errno>
20009acc:	00c00344 	movi	r3,13
20009ad0:	00000206 	br	20009adc <read+0x70>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
20009ad4:	0009a4c0 	call	20009a4c <alt_get_errno>
20009ad8:	00c01444 	movi	r3,81
20009adc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
20009ae0:	043fffc4 	movi	r16,-1
}
20009ae4:	8005883a 	mov	r2,r16
20009ae8:	dfc00117 	ldw	ra,4(sp)
20009aec:	dc000017 	ldw	r16,0(sp)
20009af0:	dec00204 	addi	sp,sp,8
20009af4:	f800283a 	ret

20009af8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
20009af8:	00800084 	movi	r2,2
20009afc:	1100060e 	bge	r2,r4,20009b18 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
20009b00:	21000324 	muli	r4,r4,12
20009b04:	00800034 	movhi	r2,0
20009b08:	10811204 	addi	r2,r2,1096
20009b0c:	1107883a 	add	r3,r2,r4
20009b10:	18000215 	stw	zero,8(r3)
    alt_fd_list[fd].dev      = 0;
20009b14:	18000015 	stw	zero,0(r3)
20009b18:	f800283a 	ret

20009b1c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20009b1c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20009b20:	00bfff84 	movi	r2,-2
20009b24:	2884703a 	and	r2,r5,r2
20009b28:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20009b2c:	d0a00317 	ldw	r2,-32756(gp)
20009b30:	00ffff04 	movi	r3,-4
20009b34:	108000c4 	addi	r2,r2,3
20009b38:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
20009b3c:	00c80034 	movhi	r3,8192
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20009b40:	d0a00315 	stw	r2,-32756(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
20009b44:	1109883a 	add	r4,r2,r4
20009b48:	18c00004 	addi	r3,r3,0
20009b4c:	1900032e 	bgeu	r3,r4,20009b5c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20009b50:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
20009b54:	00bfffc4 	movi	r2,-1
20009b58:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
20009b5c:	d1200315 	stw	r4,-32756(gp)
20009b60:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
20009b64:	f800283a 	ret

20009b68 <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
20009b68:	00800034 	movhi	r2,0
20009b6c:	10818704 	addi	r2,r2,1564
20009b70:	10800017 	ldw	r2,0(r2)
20009b74:	10000126 	beq	r2,zero,20009b7c <alt_get_errno+0x14>
20009b78:	1000683a 	jmp	r2
}
20009b7c:	00800034 	movhi	r2,0
20009b80:	10819704 	addi	r2,r2,1628
20009b84:	f800283a 	ret

20009b88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
20009b88:	defffe04 	addi	sp,sp,-8
20009b8c:	dfc00115 	stw	ra,4(sp)
20009b90:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20009b94:	20001516 	blt	r4,zero,20009bec <write+0x64>
20009b98:	20800324 	muli	r2,r4,12
20009b9c:	00c00034 	movhi	r3,0
20009ba0:	18c11204 	addi	r3,r3,1096
20009ba4:	10c9883a 	add	r4,r2,r3
  
  if (fd)
20009ba8:	20001026 	beq	r4,zero,20009bec <write+0x64>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
20009bac:	20800217 	ldw	r2,8(r4)
20009bb0:	108000cc 	andi	r2,r2,3
20009bb4:	10000a26 	beq	r2,zero,20009be0 <write+0x58>
20009bb8:	20800017 	ldw	r2,0(r4)
20009bbc:	10800617 	ldw	r2,24(r2)
20009bc0:	10000726 	beq	r2,zero,20009be0 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
20009bc4:	103ee83a 	callr	r2
20009bc8:	1021883a 	mov	r16,r2
20009bcc:	10000b0e 	bge	r2,zero,20009bfc <write+0x74>
      {
        ALT_ERRNO = -rval;
20009bd0:	0009b680 	call	20009b68 <alt_get_errno>
20009bd4:	0421c83a 	sub	r16,zero,r16
20009bd8:	14000015 	stw	r16,0(r2)
20009bdc:	00000606 	br	20009bf8 <write+0x70>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
20009be0:	0009b680 	call	20009b68 <alt_get_errno>
20009be4:	00c00344 	movi	r3,13
20009be8:	00000206 	br	20009bf4 <write+0x6c>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
20009bec:	0009b680 	call	20009b68 <alt_get_errno>
20009bf0:	00c01444 	movi	r3,81
20009bf4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
20009bf8:	043fffc4 	movi	r16,-1
}
20009bfc:	8005883a 	mov	r2,r16
20009c00:	dfc00117 	ldw	ra,4(sp)
20009c04:	dc000017 	ldw	r16,0(sp)
20009c08:	dec00204 	addi	sp,sp,8
20009c0c:	f800283a 	ret

20009c10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
20009c10:	deffff04 	addi	sp,sp,-4
20009c14:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
20009c18:	000aab00 	call	2000aab0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
20009c1c:	00800044 	movi	r2,1
20009c20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
20009c24:	dfc00017 	ldw	ra,0(sp)
20009c28:	dec00104 	addi	sp,sp,4
20009c2c:	f800283a 	ret

20009c30 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
20009c30:	01080074 	movhi	r4,8193
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20009c34:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
20009c38:	01c0fa04 	movi	r7,1000
20009c3c:	01800044 	movi	r6,1
20009c40:	21042804 	addi	r4,r4,4256
20009c44:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20009c48:	dfc00115 	stw	ra,4(sp)
20009c4c:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
20009c50:	000a3780 	call	2000a378 <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
20009c54:	04000034 	movhi	r16,0
20009c58:	84018304 	addi	r16,r16,1548
20009c5c:	01000034 	movhi	r4,0
20009c60:	800b883a 	mov	r5,r16
20009c64:	21010704 	addi	r4,r4,1052
20009c68:	000a5e00 	call	2000a5e0 <alt_dev_llist_insert>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_0, sgdma_0);
20009c6c:	01000034 	movhi	r4,0
20009c70:	2100fb04 	addi	r4,r4,1004
20009c74:	000b883a 	mov	r5,zero
20009c78:	01800084 	movi	r6,2
20009c7c:	000a2b80 	call	2000a2b8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_1, sgdma_1);
20009c80:	01000034 	movhi	r4,0
20009c84:	2100ef04 	addi	r4,r4,956
20009c88:	000b883a 	mov	r5,zero
20009c8c:	018000c4 	movi	r6,3
20009c90:	000a2b80 	call	2000a2b8 <alt_avalon_sgdma_init>
20009c94:	01000034 	movhi	r4,0
20009c98:	2100e404 	addi	r4,r4,912
20009c9c:	800b883a 	mov	r5,r16
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
}
20009ca0:	dfc00117 	ldw	ra,4(sp)
20009ca4:	dc000017 	ldw	r16,0(sp)
20009ca8:	dec00204 	addi	sp,sp,8
20009cac:	000a5e01 	jmpi	2000a5e0 <alt_dev_llist_insert>

20009cb0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
20009cb0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
20009cb4:	21000017 	ldw	r4,0(r4)
20009cb8:	11c00217 	ldw	r7,8(r2)
20009cbc:	21000a04 	addi	r4,r4,40
20009cc0:	0009cd81 	jmpi	20009cd8 <altera_avalon_jtag_uart_read>

20009cc4 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
20009cc4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
20009cc8:	21000017 	ldw	r4,0(r4)
20009ccc:	11c00217 	ldw	r7,8(r2)
20009cd0:	21000a04 	addi	r4,r4,40
20009cd4:	0009d341 	jmpi	20009d34 <altera_avalon_jtag_uart_write>

20009cd8 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
20009cd8:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
20009cdc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
20009ce0:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
20009ce4:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
20009ce8:	11800b2e 	bgeu	r2,r6,20009d18 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
20009cec:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
20009cf0:	1a60000c 	andi	r9,r3,32768
20009cf4:	48000326 	beq	r9,zero,20009d04 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
20009cf8:	10c00005 	stb	r3,0(r2)
20009cfc:	10800044 	addi	r2,r2,1
20009d00:	003ff906 	br	20009ce8 <altera_avalon_jtag_uart_read+0x10>
    else if (ptr != buffer)
20009d04:	11400226 	beq	r2,r5,20009d10 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
20009d08:	1145c83a 	sub	r2,r2,r5
20009d0c:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
20009d10:	403ff526 	beq	r8,zero,20009ce8 <altera_avalon_jtag_uart_read+0x10>
20009d14:	00000106 	br	20009d1c <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
20009d18:	117ffb1e 	bne	r2,r5,20009d08 <altera_avalon_jtag_uart_read+0x30>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
20009d1c:	39d0000c 	andi	r7,r7,16384
20009d20:	3800021e 	bne	r7,zero,20009d2c <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
20009d24:	00bffec4 	movi	r2,-5
20009d28:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
20009d2c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
20009d30:	f800283a 	ret

20009d34 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
20009d34:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
20009d38:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
20009d3c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
20009d40:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
20009d44:	2980072e 	bgeu	r5,r6,20009d64 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
20009d48:	38c00037 	ldwio	r3,0(r7)
20009d4c:	18ffffec 	andhi	r3,r3,65535
20009d50:	183ffc26 	beq	r3,zero,20009d44 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
20009d54:	28c00007 	ldb	r3,0(r5)
20009d58:	20c00035 	stwio	r3,0(r4)
20009d5c:	29400044 	addi	r5,r5,1
20009d60:	003ff806 	br	20009d44 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
20009d64:	f800283a 	ret

20009d68 <alt_avalon_sgdma_irq>:
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
20009d68:	20800317 	ldw	r2,12(r4)
20009d6c:	10800404 	addi	r2,r2,16
20009d70:	10c00037 	ldwio	r3,0(r2)
20009d74:	18e00034 	orhi	r3,r3,32768
20009d78:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
20009d7c:	20800317 	ldw	r2,12(r4)
20009d80:	10800437 	ldwio	r2,16(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
20009d84:	20c00917 	ldw	r3,36(r4)
20009d88:	18000d26 	beq	r3,zero,20009dc0 <alt_avalon_sgdma_irq+0x58>
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
20009d8c:	defffe04 	addi	sp,sp,-8
20009d90:	dfc00115 	stw	ra,4(sp)
20009d94:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20009d98:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20009d9c:	00bfff84 	movi	r2,-2
20009da0:	8084703a 	and	r2,r16,r2
20009da4:	1001703a 	wrctl	status,r2
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
20009da8:	21000a17 	ldw	r4,40(r4)
20009dac:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20009db0:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
20009db4:	dfc00117 	ldw	ra,4(sp)
20009db8:	dc000017 	ldw	r16,0(sp)
20009dbc:	dec00204 	addi	sp,sp,8
20009dc0:	f800283a 	ret

20009dc4 <alt_avalon_sgdma_do_async_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
20009dc4:	20c00317 	ldw	r3,12(r4)
20009dc8:	18800037 	ldwio	r2,0(r3)
20009dcc:	1080040c 	andi	r2,r2,16
20009dd0:	1000191e 	bne	r2,zero,20009e38 <alt_avalon_sgdma_do_async_transfer+0x74>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
20009dd4:	18c00404 	addi	r3,r3,16
20009dd8:	19c00037 	ldwio	r7,0(r3)
20009ddc:	01bff7c4 	movi	r6,-33
20009de0:	398c703a 	and	r6,r7,r6
20009de4:	19800035 	stwio	r6,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
20009de8:	20c00317 	ldw	r3,12(r4)
20009dec:	01803fc4 	movi	r6,255
20009df0:	19800035 	stwio	r6,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
20009df4:	20c00317 	ldw	r3,12(r4)
20009df8:	19400835 	stwio	r5,32(r3)
20009dfc:	20c00317 	ldw	r3,12(r4)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
20009e00:	21400917 	ldw	r5,36(r4)
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
20009e04:	18c00404 	addi	r3,r3,16
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
20009e08:	28000526 	beq	r5,zero,20009e20 <alt_avalon_sgdma_do_async_transfer+0x5c>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
20009e0c:	19400037 	ldwio	r5,0(r3)
20009e10:	21000b17 	ldw	r4,44(r4)
20009e14:	21001814 	ori	r4,r4,96

    control |= (dev->chain_control                          |
20009e18:	2148b03a 	or	r4,r4,r5
20009e1c:	00000406 	br	20009e30 <alt_avalon_sgdma_do_async_transfer+0x6c>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
20009e20:	19400037 	ldwio	r5,0(r3)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
20009e24:	013ffbc4 	movi	r4,-17
20009e28:	2908703a 	and	r4,r5,r4
20009e2c:	21001814 	ori	r4,r4,96

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
20009e30:	19000035 	stwio	r4,0(r3)
20009e34:	f800283a 	ret
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
20009e38:	00bffc04 	movi	r2,-16
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
20009e3c:	f800283a 	ret

20009e40 <alt_avalon_sgdma_do_sync_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
20009e40:	20c00317 	ldw	r3,12(r4)
20009e44:	18800037 	ldwio	r2,0(r3)
20009e48:	1080040c 	andi	r2,r2,16
20009e4c:	103ffc1e 	bne	r2,zero,20009e40 <alt_avalon_sgdma_do_sync_transfer>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
20009e50:	18c00404 	addi	r3,r3,16
20009e54:	19800037 	ldwio	r6,0(r3)
20009e58:	00bff7c4 	movi	r2,-33
20009e5c:	308c703a 	and	r6,r6,r2
20009e60:	19800035 	stwio	r6,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
20009e64:	20c00317 	ldw	r3,12(r4)
20009e68:	01803fc4 	movi	r6,255
20009e6c:	19800035 	stwio	r6,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
20009e70:	20c00317 	ldw	r3,12(r4)
20009e74:	19400835 	stwio	r5,32(r3)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
20009e78:	20c00317 	ldw	r3,12(r4)
20009e7c:	18c00404 	addi	r3,r3,16
20009e80:	19400037 	ldwio	r5,0(r3)
20009e84:	29401814 	ori	r5,r5,96
20009e88:	19400035 	stwio	r5,0(r3)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
20009e8c:	20c00317 	ldw	r3,12(r4)
20009e90:	19400037 	ldwio	r5,0(r3)
20009e94:	2940040c 	andi	r5,r5,16
20009e98:	283ffc1e 	bne	r5,zero,20009e8c <alt_avalon_sgdma_do_sync_transfer+0x4c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
20009e9c:	18c00404 	addi	r3,r3,16
20009ea0:	19400037 	ldwio	r5,0(r3)
20009ea4:	2884703a 	and	r2,r5,r2
20009ea8:	18800035 	stwio	r2,0(r3)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
20009eac:	20c00317 	ldw	r3,12(r4)
20009eb0:	18800037 	ldwio	r2,0(r3)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
20009eb4:	01003fc4 	movi	r4,255
20009eb8:	19000035 	stwio	r4,0(r3)

  return status;
}
20009ebc:	f800283a 	ret

20009ec0 <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
20009ec0:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
20009ec4:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
20009ec8:	21800b15 	stw	r6,44(r4)
20009ecc:	f800283a 	ret

20009ed0 <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
20009ed0:	20800317 	ldw	r2,12(r4)
20009ed4:	10800404 	addi	r2,r2,16
20009ed8:	10c00037 	ldwio	r3,0(r2)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
20009edc:	18c00814 	ori	r3,r3,32
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
20009ee0:	10c00035 	stwio	r3,0(r2)
20009ee4:	f800283a 	ret

20009ee8 <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
20009ee8:	20800317 	ldw	r2,12(r4)
20009eec:	10800404 	addi	r2,r2,16
20009ef0:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
20009ef4:	00fff7c4 	movi	r3,-33
20009ef8:	20c6703a 	and	r3,r4,r3
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
20009efc:	10c00035 	stwio	r3,0(r2)
20009f00:	f800283a 	ret

20009f04 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
20009f04:	208007a3 	ldbuio	r2,30(r4)
20009f08:	10801fcc 	andi	r2,r2,127
20009f0c:	1000041e 	bne	r2,zero,20009f20 <alt_avalon_sgdma_check_descriptor_status+0x1c>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
20009f10:	208007e3 	ldbuio	r2,31(r4)
20009f14:	1080200c 	andi	r2,r2,128
20009f18:	1000031e 	bne	r2,zero,20009f28 <alt_avalon_sgdma_check_descriptor_status+0x24>
20009f1c:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
20009f20:	00bffec4 	movi	r2,-5
20009f24:	f800283a 	ret
  }

  if( IORD_8DIRECT(&desc->control, 0) &
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
20009f28:	00bfe244 	movi	r2,-119
  }

    return 0;
}
20009f2c:	f800283a 	ret

20009f30 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
20009f30:	defffe04 	addi	sp,sp,-8
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
20009f34:	d1600404 	addi	r5,gp,-32752
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
20009f38:	dc000015 	stw	r16,0(sp)
20009f3c:	dfc00115 	stw	ra,4(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
20009f40:	000a6580 	call	2000a658 <alt_find_dev>
20009f44:	1021883a 	mov	r16,r2

  if (NULL == dev) {
20009f48:	10000a1e 	bne	r2,zero,20009f74 <alt_avalon_sgdma_open+0x44>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
20009f4c:	00800034 	movhi	r2,0
20009f50:	10818704 	addi	r2,r2,1564
20009f54:	10800017 	ldw	r2,0(r2)
20009f58:	10000226 	beq	r2,zero,20009f64 <alt_avalon_sgdma_open+0x34>
20009f5c:	103ee83a 	callr	r2
20009f60:	00000206 	br	20009f6c <alt_avalon_sgdma_open+0x3c>
20009f64:	00800034 	movhi	r2,0
20009f68:	10819704 	addi	r2,r2,1628
    ALT_ERRNO = ENODEV;
20009f6c:	00c004c4 	movi	r3,19
20009f70:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
20009f74:	8005883a 	mov	r2,r16
20009f78:	dfc00117 	ldw	ra,4(sp)
20009f7c:	dc000017 	ldw	r16,0(sp)
20009f80:	dec00204 	addi	sp,sp,8
20009f84:	f800283a 	ret

20009f88 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
20009f88:	20c00317 	ldw	r3,12(r4)
20009f8c:	18c00404 	addi	r3,r3,16
20009f90:	19000037 	ldwio	r4,0(r3)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
20009f94:	00a00434 	movhi	r2,32784
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
20009f98:	280a953a 	slli	r5,r5,20
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
20009f9c:	10bfffc4 	addi	r2,r2,-1
20009fa0:	2084703a 	and	r2,r4,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
20009fa4:	295ffc2c 	andhi	r5,r5,32752
20009fa8:	29400134 	orhi	r5,r5,4

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
20009fac:	288ab03a 	or	r5,r5,r2
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
20009fb0:	19400035 	stwio	r5,0(r3)
20009fb4:	f800283a 	ret

20009fb8 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
20009fb8:	20800317 	ldw	r2,12(r4)
20009fbc:	10800404 	addi	r2,r2,16
20009fc0:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
20009fc4:	00ffff34 	movhi	r3,65532
20009fc8:	18ffffc4 	addi	r3,r3,-1
20009fcc:	20c6703a 	and	r3,r4,r3

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
20009fd0:	10c00035 	stwio	r3,0(r2)
20009fd4:	f800283a 	ret

20009fd8 <alt_avalon_sgdma_construct_descriptor_burst>:
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
20009fd8:	288007c3 	ldbu	r2,31(r5)
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
20009fdc:	d8c00617 	ldw	r3,24(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
20009fe0:	10801fcc 	andi	r2,r2,127
20009fe4:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
20009fe8:	3004d23a 	srli	r2,r6,8
20009fec:	21800005 	stb	r6,0(r4)
  desc->write_addr               = write_addr;
20009ff0:	21c00205 	stb	r7,8(r4)
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
20009ff4:	20800045 	stb	r2,1(r4)
20009ff8:	3004d43a 	srli	r2,r6,16
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
20009ffc:	21400405 	stb	r5,16(r4)
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
2000a000:	300cd63a 	srli	r6,r6,24
2000a004:	20800085 	stb	r2,2(r4)
  desc->write_addr               = write_addr;
2000a008:	3804d23a 	srli	r2,r7,8
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
2000a00c:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
2000a010:	20000105 	stb	zero,4(r4)
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
2000a014:	20800245 	stb	r2,9(r4)
2000a018:	3804d43a 	srli	r2,r7,16
2000a01c:	380ed63a 	srli	r7,r7,24
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
2000a020:	20000145 	stb	zero,5(r4)
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
2000a024:	20800285 	stb	r2,10(r4)
  desc->next                     = (alt_u32 *) next;
2000a028:	2804d23a 	srli	r2,r5,8
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
2000a02c:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
2000a030:	20000185 	stb	zero,6(r4)
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
2000a034:	20800445 	stb	r2,17(r4)
2000a038:	2804d43a 	srli	r2,r5,16
2000a03c:	280ad63a 	srli	r5,r5,24
  desc->read_addr_pad            = 0x0;
2000a040:	200001c5 	stb	zero,7(r4)
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
2000a044:	20800485 	stb	r2,18(r4)
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
2000a048:	d880000b 	ldhu	r2,0(sp)
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
2000a04c:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
2000a050:	20000305 	stb	zero,12(r4)
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
2000a054:	20800605 	stb	r2,24(r4)
2000a058:	1004d23a 	srli	r2,r2,8

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
2000a05c:	20000345 	stb	zero,13(r4)
2000a060:	20000385 	stb	zero,14(r4)
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
2000a064:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
  desc->status                   = 0x0;

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
2000a068:	d8800417 	ldw	r2,16(sp)

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
2000a06c:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
2000a070:	20000505 	stb	zero,20(r4)
  desc->bytes_to_transfer        = length_or_eop;
  desc->actual_bytes_transferred = 0;
  desc->status                   = 0x0;

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
2000a074:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
2000a078:	d8800517 	ldw	r2,20(sp)
  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  desc->next_pad                 = 0x0;
2000a07c:	20000545 	stb	zero,21(r4)
2000a080:	20000585 	stb	zero,22(r4)
2000a084:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
  desc->actual_bytes_transferred = 0;
2000a088:	20000705 	stb	zero,28(r4)
2000a08c:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
2000a090:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
  desc->write_burst              = write_burst;
2000a094:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
2000a098:	d8800117 	ldw	r2,4(sp)
2000a09c:	d9400317 	ldw	r5,12(sp)
2000a0a0:	1004c03a 	cmpne	r2,r2,zero
2000a0a4:	11bfe004 	addi	r6,r2,-128
2000a0a8:	d8800217 	ldw	r2,8(sp)
2000a0ac:	280ac03a 	cmpne	r5,r5,zero
2000a0b0:	280a90ba 	slli	r5,r5,2
2000a0b4:	1004c03a 	cmpne	r2,r2,zero
2000a0b8:	1004907a 	slli	r2,r2,1
2000a0bc:	1184b03a 	or	r2,r2,r6
2000a0c0:	114ab03a 	or	r5,r2,r5
2000a0c4:	18803fcc 	andi	r2,r3,255
2000a0c8:	10000326 	beq	r2,zero,2000a0d8 <alt_avalon_sgdma_construct_descriptor_burst+0x100>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
2000a0cc:	18c003cc 	andi	r3,r3,15
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
2000a0d0:	180490fa 	slli	r2,r3,3
2000a0d4:	00000106 	br	2000a0dc <alt_avalon_sgdma_construct_descriptor_burst+0x104>
2000a0d8:	0005883a 	mov	r2,zero
2000a0dc:	2884b03a 	or	r2,r5,r2
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
2000a0e0:	01400804 	movi	r5,32
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
2000a0e4:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
2000a0e8:	000a5d01 	jmpi	2000a5d0 <alt_dcache_flush>

2000a0ec <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
2000a0ec:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
2000a0f0:	d880080b 	ldhu	r2,32(sp)
2000a0f4:	d8000115 	stw	zero,4(sp)
2000a0f8:	d8000615 	stw	zero,24(sp)
2000a0fc:	d8800015 	stw	r2,0(sp)
2000a100:	d8800917 	ldw	r2,36(sp)
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
2000a104:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
2000a108:	d8800215 	stw	r2,8(sp)
2000a10c:	d8800a17 	ldw	r2,40(sp)
2000a110:	d8800315 	stw	r2,12(sp)
2000a114:	d8800b17 	ldw	r2,44(sp)
2000a118:	d8800415 	stw	r2,16(sp)
2000a11c:	d8800c17 	ldw	r2,48(sp)
2000a120:	d8800515 	stw	r2,20(sp)
2000a124:	0009fd80 	call	20009fd8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
2000a128:	dfc00717 	ldw	ra,28(sp)
2000a12c:	dec00804 	addi	sp,sp,32
2000a130:	f800283a 	ret

2000a134 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
2000a134:	defffa04 	addi	sp,sp,-24
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
2000a138:	d880060b 	ldhu	r2,24(sp)
2000a13c:	d8000315 	stw	zero,12(sp)
2000a140:	d8000415 	stw	zero,16(sp)
2000a144:	d8800015 	stw	r2,0(sp)
2000a148:	d8800717 	ldw	r2,28(sp)
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
2000a14c:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
2000a150:	d8800115 	stw	r2,4(sp)
2000a154:	d8800817 	ldw	r2,32(sp)
2000a158:	d8800215 	stw	r2,8(sp)
2000a15c:	000a0ec0 	call	2000a0ec <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
2000a160:	dfc00517 	ldw	ra,20(sp)
2000a164:	dec00604 	addi	sp,sp,24
2000a168:	f800283a 	ret

2000a16c <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
2000a16c:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
2000a170:	d8c00817 	ldw	r3,32(sp)
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
2000a174:	3005883a 	mov	r2,r6
  alt_avalon_sgdma_construct_descriptor_burst(
2000a178:	39ffffcc 	andi	r7,r7,65535
2000a17c:	d8c00315 	stw	r3,12(sp)
2000a180:	d8c00917 	ldw	r3,36(sp)
2000a184:	d9c00015 	stw	r7,0(sp)
2000a188:	d8000115 	stw	zero,4(sp)
2000a18c:	d8000215 	stw	zero,8(sp)
2000a190:	d8000415 	stw	zero,16(sp)
2000a194:	d8c00515 	stw	r3,20(sp)
2000a198:	d8000615 	stw	zero,24(sp)
2000a19c:	000d883a 	mov	r6,zero
2000a1a0:	100f883a 	mov	r7,r2
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
2000a1a4:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
2000a1a8:	0009fd80 	call	20009fd8 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
2000a1ac:	dfc00717 	ldw	ra,28(sp)
2000a1b0:	dec00804 	addi	sp,sp,32
2000a1b4:	f800283a 	ret

2000a1b8 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
2000a1b8:	defffd04 	addi	sp,sp,-12
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
2000a1bc:	d8800317 	ldw	r2,12(sp)
2000a1c0:	d8000115 	stw	zero,4(sp)
2000a1c4:	39ffffcc 	andi	r7,r7,65535
2000a1c8:	d8800015 	stw	r2,0(sp)
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
2000a1cc:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
2000a1d0:	000a16c0 	call	2000a16c <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
2000a1d4:	dfc00217 	ldw	ra,8(sp)
2000a1d8:	dec00304 	addi	sp,sp,12
2000a1dc:	f800283a 	ret

2000a1e0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
2000a1e0:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
2000a1e4:	d8800a17 	ldw	r2,40(sp)
2000a1e8:	39ffffcc 	andi	r7,r7,65535
2000a1ec:	d9c00015 	stw	r7,0(sp)
2000a1f0:	d8800115 	stw	r2,4(sp)
2000a1f4:	d8800817 	ldw	r2,32(sp)
2000a1f8:	d8000515 	stw	zero,20(sp)
2000a1fc:	000f883a 	mov	r7,zero
2000a200:	d8800215 	stw	r2,8(sp)
2000a204:	d8800917 	ldw	r2,36(sp)
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
2000a208:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
2000a20c:	d8800315 	stw	r2,12(sp)
2000a210:	d8800b17 	ldw	r2,44(sp)
2000a214:	d8800415 	stw	r2,16(sp)
2000a218:	d8800c03 	ldbu	r2,48(sp)
2000a21c:	d8800615 	stw	r2,24(sp)
2000a220:	0009fd80 	call	20009fd8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
2000a224:	dfc00717 	ldw	ra,28(sp)
2000a228:	dec00804 	addi	sp,sp,32
2000a22c:	f800283a 	ret

2000a230 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
2000a230:	defffa04 	addi	sp,sp,-24
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
2000a234:	d8800617 	ldw	r2,24(sp)
2000a238:	d8000315 	stw	zero,12(sp)
2000a23c:	39ffffcc 	andi	r7,r7,65535
2000a240:	d8800015 	stw	r2,0(sp)
2000a244:	d8800717 	ldw	r2,28(sp)
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
2000a248:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
2000a24c:	d8800115 	stw	r2,4(sp)
2000a250:	d8800817 	ldw	r2,32(sp)
2000a254:	d8800215 	stw	r2,8(sp)
2000a258:	d8800903 	ldbu	r2,36(sp)
2000a25c:	d8800415 	stw	r2,16(sp)
2000a260:	000a1e00 	call	2000a1e0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
2000a264:	dfc00517 	ldw	ra,20(sp)
2000a268:	dec00604 	addi	sp,sp,24
2000a26c:	f800283a 	ret

2000a270 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
2000a270:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
2000a274:	d880080b 	ldhu	r2,32(sp)
2000a278:	d8000415 	stw	zero,16(sp)
2000a27c:	d8000515 	stw	zero,20(sp)
2000a280:	d8800015 	stw	r2,0(sp)
2000a284:	d8800917 	ldw	r2,36(sp)
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
2000a288:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
2000a28c:	d8800115 	stw	r2,4(sp)
2000a290:	d8800a17 	ldw	r2,40(sp)
2000a294:	d8800215 	stw	r2,8(sp)
2000a298:	d8800b17 	ldw	r2,44(sp)
2000a29c:	d8800315 	stw	r2,12(sp)
2000a2a0:	d8800c03 	ldbu	r2,48(sp)
2000a2a4:	d8800615 	stw	r2,24(sp)
2000a2a8:	0009fd80 	call	20009fd8 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
2000a2ac:	dfc00717 	ldw	ra,28(sp)
2000a2b0:	dec00804 	addi	sp,sp,32
2000a2b4:	f800283a 	ret

2000a2b8 <alt_avalon_sgdma_init>:

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
2000a2b8:	20c00317 	ldw	r3,12(r4)
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
2000a2bc:	defffb04 	addi	sp,sp,-20
2000a2c0:	dc800315 	stw	r18,12(sp)
2000a2c4:	dc400215 	stw	r17,8(sp)
2000a2c8:	dc000115 	stw	r16,4(sp)
2000a2cc:	dfc00415 	stw	ra,16(sp)
2000a2d0:	2021883a 	mov	r16,r4
2000a2d4:	2825883a 	mov	r18,r5
2000a2d8:	3023883a 	mov	r17,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
2000a2dc:	00800074 	movhi	r2,1
2000a2e0:	18800435 	stwio	r2,16(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
2000a2e4:	20c00317 	ldw	r3,12(r4)
2000a2e8:	18800435 	stwio	r2,16(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
2000a2ec:	20800317 	ldw	r2,12(r4)
2000a2f0:	10000435 	stwio	zero,16(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
2000a2f4:	20800317 	ldw	r2,12(r4)
2000a2f8:	00c03fc4 	movi	r3,255
2000a2fc:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
2000a300:	d1600404 	addi	r5,gp,-32752
2000a304:	000a5e00 	call	2000a5e0 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
2000a308:	01880074 	movhi	r6,8193
2000a30c:	d8000015 	stw	zero,0(sp)
2000a310:	9009883a 	mov	r4,r18
2000a314:	880b883a 	mov	r5,r17
2000a318:	31a75a04 	addi	r6,r6,-25240
2000a31c:	800f883a 	mov	r7,r16
2000a320:	000a7d00 	call	2000a7d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
2000a324:	dfc00417 	ldw	ra,16(sp)
2000a328:	dc800317 	ldw	r18,12(sp)
2000a32c:	dc400217 	ldw	r17,8(sp)
2000a330:	dc000117 	ldw	r16,4(sp)
2000a334:	dec00504 	addi	sp,sp,20
2000a338:	f800283a 	ret

2000a33c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
2000a33c:	defffe04 	addi	sp,sp,-8
2000a340:	dfc00115 	stw	ra,4(sp)
2000a344:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
2000a348:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
2000a34c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2000a350:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2000a354:	00bfff84 	movi	r2,-2
2000a358:	8084703a 	and	r2,r16,r2
2000a35c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
2000a360:	000a9f80 	call	2000a9f8 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2000a364:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
2000a368:	dfc00117 	ldw	ra,4(sp)
2000a36c:	dc000017 	ldw	r16,0(sp)
2000a370:	dec00204 	addi	sp,sp,8
2000a374:	f800283a 	ret

2000a378 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
2000a378:	00c00034 	movhi	r3,0
2000a37c:	18c19d04 	addi	r3,r3,1652
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
2000a380:	2005883a 	mov	r2,r4
2000a384:	2809883a 	mov	r4,r5
2000a388:	19400017 	ldw	r5,0(r3)
2000a38c:	defffe04 	addi	sp,sp,-8
2000a390:	dfc00115 	stw	ra,4(sp)
2000a394:	2800011e 	bne	r5,zero,2000a39c <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
2000a398:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
2000a39c:	00c001c4 	movi	r3,7
2000a3a0:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
2000a3a4:	300b883a 	mov	r5,r6
2000a3a8:	01880074 	movhi	r6,8193
2000a3ac:	d8000015 	stw	zero,0(sp)
2000a3b0:	31a8cf04 	addi	r6,r6,-23748
2000a3b4:	100f883a 	mov	r7,r2
2000a3b8:	000a7d00 	call	2000a7d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
2000a3bc:	dfc00117 	ldw	ra,4(sp)
2000a3c0:	dec00204 	addi	sp,sp,8
2000a3c4:	f800283a 	ret

2000a3c8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2000a3c8:	2005883a 	mov	r2,r4
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
2000a3cc:	21000017 	ldw	r4,0(r4)
2000a3d0:	11c00217 	ldw	r7,8(r2)
2000a3d4:	21000a04 	addi	r4,r4,40
2000a3d8:	000a3f01 	jmpi	2000a3f0 <altera_avalon_uart_read>

2000a3dc <altera_avalon_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2000a3dc:	2005883a 	mov	r2,r4
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
2000a3e0:	21000017 	ldw	r4,0(r4)
2000a3e4:	11c00217 	ldw	r7,8(r2)
2000a3e8:	21000a04 	addi	r4,r4,40
2000a3ec:	000a47c1 	jmpi	2000a47c <altera_avalon_uart_write>

2000a3f0 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
2000a3f0:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
2000a3f4:	20c00017 	ldw	r3,0(r4)
2000a3f8:	18c00204 	addi	r3,r3,8
2000a3fc:	18800037 	ldwio	r2,0(r3)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
2000a400:	18000035 	stwio	zero,0(r3)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
2000a404:	10c0200c 	andi	r3,r2,128
2000a408:	1800021e 	bne	r3,zero,2000a414 <altera_avalon_uart_read+0x24>
      {
        return 1;
      }
    }
  }
  while (block);
2000a40c:	383ff926 	beq	r7,zero,2000a3f4 <altera_avalon_uart_read+0x4>
2000a410:	00000706 	br	2000a430 <altera_avalon_uart_read+0x40>

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
2000a414:	20c00017 	ldw	r3,0(r4)
2000a418:	18c00037 	ldwio	r3,0(r3)
2000a41c:	28c00005 	stb	r3,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
2000a420:	108000cc 	andi	r2,r2,3
2000a424:	103ff91e 	bne	r2,zero,2000a40c <altera_avalon_uart_read+0x1c>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
2000a428:	00800044 	movi	r2,1
2000a42c:	f800283a 	ret
2000a430:	00800034 	movhi	r2,0
2000a434:	10818704 	addi	r2,r2,1564
2000a438:	10800017 	ldw	r2,0(r2)
2000a43c:	10000926 	beq	r2,zero,2000a464 <altera_avalon_uart_read+0x74>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
2000a440:	deffff04 	addi	sp,sp,-4
2000a444:	dfc00015 	stw	ra,0(sp)
2000a448:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
2000a44c:	00c002c4 	movi	r3,11
2000a450:	10c00015 	stw	r3,0(r2)
 
  return 0;
2000a454:	0005883a 	mov	r2,zero
}
2000a458:	dfc00017 	ldw	ra,0(sp)
2000a45c:	dec00104 	addi	sp,sp,4
2000a460:	f800283a 	ret
2000a464:	00800034 	movhi	r2,0
2000a468:	10819704 	addi	r2,r2,1628
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
2000a46c:	00c002c4 	movi	r3,11
2000a470:	10c00015 	stw	r3,0(r2)
 
  return 0;
2000a474:	0005883a 	mov	r2,zero
}
2000a478:	f800283a 	ret

2000a47c <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
2000a47c:	defffd04 	addi	sp,sp,-12
2000a480:	dc400115 	stw	r17,4(sp)
2000a484:	dc000015 	stw	r16,0(sp)
2000a488:	dfc00215 	stw	ra,8(sp)
2000a48c:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
2000a490:	39d0000c 	andi	r7,r7,16384
  count = len;
2000a494:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
2000a498:	20800017 	ldw	r2,0(r4)
2000a49c:	10c00237 	ldwio	r3,8(r2)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
2000a4a0:	18c0100c 	andi	r3,r3,64
2000a4a4:	18000526 	beq	r3,zero,2000a4bc <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
2000a4a8:	28c00044 	addi	r3,r5,1
2000a4ac:	29400007 	ldb	r5,0(r5)
2000a4b0:	11400135 	stwio	r5,4(r2)
      count--;
2000a4b4:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
2000a4b8:	180b883a 	mov	r5,r3
      count--;
    }
  }
  while (block && count);
2000a4bc:	3800021e 	bne	r7,zero,2000a4c8 <altera_avalon_uart_write+0x4c>
2000a4c0:	803ff51e 	bne	r16,zero,2000a498 <altera_avalon_uart_write+0x1c>
2000a4c4:	00000b06 	br	2000a4f4 <altera_avalon_uart_write+0x78>

  if (count)
2000a4c8:	80000a26 	beq	r16,zero,2000a4f4 <altera_avalon_uart_write+0x78>
2000a4cc:	00800034 	movhi	r2,0
2000a4d0:	10818704 	addi	r2,r2,1564
2000a4d4:	10800017 	ldw	r2,0(r2)
2000a4d8:	10000226 	beq	r2,zero,2000a4e4 <altera_avalon_uart_write+0x68>
2000a4dc:	103ee83a 	callr	r2
2000a4e0:	00000206 	br	2000a4ec <altera_avalon_uart_write+0x70>
2000a4e4:	00800034 	movhi	r2,0
2000a4e8:	10819704 	addi	r2,r2,1628
  {
    ALT_ERRNO = EWOULDBLOCK;
2000a4ec:	00c002c4 	movi	r3,11
2000a4f0:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
2000a4f4:	8c05c83a 	sub	r2,r17,r16
2000a4f8:	dfc00217 	ldw	ra,8(sp)
2000a4fc:	dc400117 	ldw	r17,4(sp)
2000a500:	dc000017 	ldw	r16,0(sp)
2000a504:	dec00304 	addi	sp,sp,12
2000a508:	f800283a 	ret

2000a50c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
2000a50c:	defffd04 	addi	sp,sp,-12
2000a510:	dc400115 	stw	r17,4(sp)
2000a514:	dfc00215 	stw	ra,8(sp)
2000a518:	dc000015 	stw	r16,0(sp)
2000a51c:	2023883a 	mov	r17,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2000a520:	20001b16 	blt	r4,zero,2000a590 <close+0x84>
2000a524:	21000324 	muli	r4,r4,12
2000a528:	00800034 	movhi	r2,0
2000a52c:	10811204 	addi	r2,r2,1096
2000a530:	2089883a 	add	r4,r4,r2

  if (fd)
2000a534:	20001626 	beq	r4,zero,2000a590 <close+0x84>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2000a538:	20c00017 	ldw	r3,0(r4)
2000a53c:	18c00417 	ldw	r3,16(r3)
2000a540:	18000326 	beq	r3,zero,2000a550 <close+0x44>
2000a544:	183ee83a 	callr	r3
2000a548:	1021883a 	mov	r16,r2
2000a54c:	00000106 	br	2000a554 <close+0x48>
2000a550:	0021883a 	mov	r16,zero

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
2000a554:	8809883a 	mov	r4,r17
2000a558:	0009af80 	call	20009af8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
2000a55c:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
2000a560:	8000160e 	bge	r16,zero,2000a5bc <close+0xb0>
2000a564:	00800034 	movhi	r2,0
2000a568:	10818704 	addi	r2,r2,1564
2000a56c:	10800017 	ldw	r2,0(r2)
2000a570:	10000226 	beq	r2,zero,2000a57c <close+0x70>
2000a574:	103ee83a 	callr	r2
2000a578:	00000206 	br	2000a584 <close+0x78>
2000a57c:	00800034 	movhi	r2,0
2000a580:	10819704 	addi	r2,r2,1628
    {
      ALT_ERRNO = -rval;
2000a584:	0421c83a 	sub	r16,zero,r16
2000a588:	14000015 	stw	r16,0(r2)
2000a58c:	00000a06 	br	2000a5b8 <close+0xac>
2000a590:	00800034 	movhi	r2,0
2000a594:	10818704 	addi	r2,r2,1564
2000a598:	10800017 	ldw	r2,0(r2)
2000a59c:	10000226 	beq	r2,zero,2000a5a8 <close+0x9c>
2000a5a0:	103ee83a 	callr	r2
2000a5a4:	00000206 	br	2000a5b0 <close+0xa4>
2000a5a8:	00800034 	movhi	r2,0
2000a5ac:	10819704 	addi	r2,r2,1628
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
2000a5b0:	00c01444 	movi	r3,81
2000a5b4:	10c00015 	stw	r3,0(r2)
    return -1;
2000a5b8:	00bfffc4 	movi	r2,-1
  }
}
2000a5bc:	dfc00217 	ldw	ra,8(sp)
2000a5c0:	dc400117 	ldw	r17,4(sp)
2000a5c4:	dc000017 	ldw	r16,0(sp)
2000a5c8:	dec00304 	addi	sp,sp,12
2000a5cc:	f800283a 	ret

2000a5d0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
2000a5d0:	f800283a 	ret

2000a5d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2000a5d4:	f800283a 	ret

2000a5d8 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
2000a5d8:	3005883a 	mov	r2,r6
2000a5dc:	f800283a 	ret

2000a5e0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2000a5e0:	20000226 	beq	r4,zero,2000a5ec <alt_dev_llist_insert+0xc>
2000a5e4:	20800217 	ldw	r2,8(r4)
2000a5e8:	1000131e 	bne	r2,zero,2000a638 <alt_dev_llist_insert+0x58>
2000a5ec:	00800034 	movhi	r2,0
2000a5f0:	10818704 	addi	r2,r2,1564
2000a5f4:	10800017 	ldw	r2,0(r2)
2000a5f8:	10000926 	beq	r2,zero,2000a620 <alt_dev_llist_insert+0x40>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2000a5fc:	deffff04 	addi	sp,sp,-4
2000a600:	dfc00015 	stw	ra,0(sp)
2000a604:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
2000a608:	00c00584 	movi	r3,22
2000a60c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
2000a610:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
2000a614:	dfc00017 	ldw	ra,0(sp)
2000a618:	dec00104 	addi	sp,sp,4
2000a61c:	f800283a 	ret
2000a620:	00800034 	movhi	r2,0
2000a624:	10819704 	addi	r2,r2,1628
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
2000a628:	00c00584 	movi	r3,22
2000a62c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
2000a630:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
2000a634:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
2000a638:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2000a63c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
2000a640:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
2000a644:	28800017 	ldw	r2,0(r5)
2000a648:	11000115 	stw	r4,4(r2)
  list->next           = entry;
2000a64c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
2000a650:	0005883a 	mov	r2,zero
2000a654:	f800283a 	ret

2000a658 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
2000a658:	defffb04 	addi	sp,sp,-20
2000a65c:	dcc00315 	stw	r19,12(sp)
2000a660:	dc800215 	stw	r18,8(sp)
2000a664:	dc400115 	stw	r17,4(sp)
2000a668:	dc000015 	stw	r16,0(sp)
2000a66c:	dfc00415 	stw	ra,16(sp)
2000a670:	2027883a 	mov	r19,r4
2000a674:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
2000a678:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
2000a67c:	0008f640 	call	20008f64 <strlen>
2000a680:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2000a684:	84400726 	beq	r16,r17,2000a6a4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2000a688:	81000217 	ldw	r4,8(r16)
2000a68c:	980b883a 	mov	r5,r19
2000a690:	900d883a 	mov	r6,r18
2000a694:	000ab840 	call	2000ab84 <memcmp>
2000a698:	10000426 	beq	r2,zero,2000a6ac <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
2000a69c:	84000017 	ldw	r16,0(r16)
2000a6a0:	003ff806 	br	2000a684 <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
2000a6a4:	0005883a 	mov	r2,zero
2000a6a8:	00000106 	br	2000a6b0 <alt_find_dev+0x58>
2000a6ac:	8005883a 	mov	r2,r16
}
2000a6b0:	dfc00417 	ldw	ra,16(sp)
2000a6b4:	dcc00317 	ldw	r19,12(sp)
2000a6b8:	dc800217 	ldw	r18,8(sp)
2000a6bc:	dc400117 	ldw	r17,4(sp)
2000a6c0:	dc000017 	ldw	r16,0(sp)
2000a6c4:	dec00504 	addi	sp,sp,20
2000a6c8:	f800283a 	ret

2000a6cc <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2000a6cc:	00800034 	movhi	r2,0
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2000a6d0:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2000a6d4:	10818504 	addi	r2,r2,1556
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2000a6d8:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2000a6dc:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2000a6e0:	dd000415 	stw	r20,16(sp)
2000a6e4:	dcc00315 	stw	r19,12(sp)
2000a6e8:	dc800215 	stw	r18,8(sp)
2000a6ec:	dfc00515 	stw	ra,20(sp)
2000a6f0:	dc400115 	stw	r17,4(sp)
2000a6f4:	2027883a 	mov	r19,r4
2000a6f8:	1025883a 	mov	r18,r2
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
2000a6fc:	05000bc4 	movi	r20,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2000a700:	84801226 	beq	r16,r18,2000a74c <alt_find_file+0x80>
  {
    len = strlen(next->name);
2000a704:	84400217 	ldw	r17,8(r16)
2000a708:	8809883a 	mov	r4,r17
2000a70c:	0008f640 	call	20008f64 <strlen>
    
    if (next->name[len-1] == '/')
2000a710:	8887883a 	add	r3,r17,r2
2000a714:	18ffffc7 	ldb	r3,-1(r3)
2000a718:	1d00011e 	bne	r3,r20,2000a720 <alt_find_file+0x54>
    {
      len -= 1;
2000a71c:	10bfffc4 	addi	r2,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2000a720:	9887883a 	add	r3,r19,r2
2000a724:	18c00007 	ldb	r3,0(r3)
2000a728:	1d000126 	beq	r3,r20,2000a730 <alt_find_file+0x64>
2000a72c:	1800051e 	bne	r3,zero,2000a744 <alt_find_file+0x78>
        !memcmp (next->name, name, len))
2000a730:	8809883a 	mov	r4,r17
2000a734:	980b883a 	mov	r5,r19
2000a738:	100d883a 	mov	r6,r2
2000a73c:	000ab840 	call	2000ab84 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2000a740:	10000426 	beq	r2,zero,2000a754 <alt_find_file+0x88>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
2000a744:	84000017 	ldw	r16,0(r16)
2000a748:	003fed06 	br	2000a700 <alt_find_file+0x34>
  }
  
  /* No match found */
  
  return NULL;     
2000a74c:	0005883a 	mov	r2,zero
2000a750:	00000106 	br	2000a758 <alt_find_file+0x8c>
2000a754:	8005883a 	mov	r2,r16
}
2000a758:	dfc00517 	ldw	ra,20(sp)
2000a75c:	dd000417 	ldw	r20,16(sp)
2000a760:	dcc00317 	ldw	r19,12(sp)
2000a764:	dc800217 	ldw	r18,8(sp)
2000a768:	dc400117 	ldw	r17,4(sp)
2000a76c:	dc000017 	ldw	r16,0(sp)
2000a770:	dec00604 	addi	sp,sp,24
2000a774:	f800283a 	ret

2000a778 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2000a778:	01800034 	movhi	r6,0
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2000a77c:	0005883a 	mov	r2,zero
2000a780:	31811204 	addi	r6,r6,1096
2000a784:	01400804 	movi	r5,32
2000a788:	10c00324 	muli	r3,r2,12
2000a78c:	1987883a 	add	r3,r3,r6
  {
    if (!alt_fd_list[i].dev)
2000a790:	19c00017 	ldw	r7,0(r3)
2000a794:	3800071e 	bne	r7,zero,2000a7b4 <alt_get_fd+0x3c>
    {
      alt_fd_list[i].dev = dev;
2000a798:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
2000a79c:	00c00034 	movhi	r3,0
2000a7a0:	18c18204 	addi	r3,r3,1544
2000a7a4:	19000017 	ldw	r4,0(r3)
2000a7a8:	2080050e 	bge	r4,r2,2000a7c0 <alt_get_fd+0x48>
      {
        alt_max_fd = i;
2000a7ac:	18800015 	stw	r2,0(r3)
      }
      rc = i;
      goto alt_get_fd_exit;
2000a7b0:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2000a7b4:	10800044 	addi	r2,r2,1
2000a7b8:	117ff31e 	bne	r2,r5,2000a788 <alt_get_fd+0x10>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
2000a7bc:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
2000a7c0:	f800283a 	ret

2000a7c4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2000a7c4:	0009883a 	mov	r4,zero
2000a7c8:	01420004 	movi	r5,2048
2000a7cc:	000aab81 	jmpi	2000aab8 <alt_icache_flush>

2000a7d0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2000a7d0:	000a86c1 	jmpi	2000a86c <alt_iic_isr_register>

2000a7d4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2000a7d4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2000a7d8:	00bfff84 	movi	r2,-2
2000a7dc:	3084703a 	and	r2,r6,r2
2000a7e0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
2000a7e4:	00800034 	movhi	r2,0
2000a7e8:	10819b04 	addi	r2,r2,1644
2000a7ec:	01000044 	movi	r4,1
2000a7f0:	10c00017 	ldw	r3,0(r2)
2000a7f4:	214a983a 	sll	r5,r4,r5
2000a7f8:	28cab03a 	or	r5,r5,r3
2000a7fc:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2000a800:	10800017 	ldw	r2,0(r2)
2000a804:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2000a808:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
2000a80c:	0005883a 	mov	r2,zero
2000a810:	f800283a 	ret

2000a814 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2000a814:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2000a818:	00bfff84 	movi	r2,-2
2000a81c:	3084703a 	and	r2,r6,r2
2000a820:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
2000a824:	00800034 	movhi	r2,0
2000a828:	10819b04 	addi	r2,r2,1644
2000a82c:	013fff84 	movi	r4,-2
2000a830:	10c00017 	ldw	r3,0(r2)
2000a834:	214a183a 	rol	r5,r4,r5
2000a838:	28ca703a 	and	r5,r5,r3
2000a83c:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2000a840:	10800017 	ldw	r2,0(r2)
2000a844:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2000a848:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
2000a84c:	0005883a 	mov	r2,zero
2000a850:	f800283a 	ret

2000a854 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2000a854:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
2000a858:	00c00044 	movi	r3,1
2000a85c:	194a983a 	sll	r5,r3,r5
2000a860:	1144703a 	and	r2,r2,r5
}
2000a864:	1004c03a 	cmpne	r2,r2,zero
2000a868:	f800283a 	ret

2000a86c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
2000a86c:	00c007c4 	movi	r3,31
2000a870:	19401616 	blt	r3,r5,2000a8cc <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2000a874:	defffe04 	addi	sp,sp,-8
2000a878:	dfc00115 	stw	ra,4(sp)
2000a87c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2000a880:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2000a884:	00ffff84 	movi	r3,-2
2000a888:	80c6703a 	and	r3,r16,r3
2000a88c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
2000a890:	280490fa 	slli	r2,r5,3
2000a894:	00c00034 	movhi	r3,0
2000a898:	18c1a704 	addi	r3,r3,1692
2000a89c:	1891883a 	add	r8,r3,r2
2000a8a0:	41800015 	stw	r6,0(r8)
    alt_irq[id].context = isr_context;
2000a8a4:	41c00115 	stw	r7,4(r8)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2000a8a8:	30000226 	beq	r6,zero,2000a8b4 <alt_iic_isr_register+0x48>
2000a8ac:	000a7d40 	call	2000a7d4 <alt_ic_irq_enable>
2000a8b0:	00000106 	br	2000a8b8 <alt_iic_isr_register+0x4c>
2000a8b4:	000a8140 	call	2000a814 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2000a8b8:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
2000a8bc:	dfc00117 	ldw	ra,4(sp)
2000a8c0:	dc000017 	ldw	r16,0(sp)
2000a8c4:	dec00204 	addi	sp,sp,8
2000a8c8:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
2000a8cc:	00bffa84 	movi	r2,-22
2000a8d0:	f800283a 	ret

2000a8d4 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
2000a8d4:	defffe04 	addi	sp,sp,-8
2000a8d8:	dc000015 	stw	r16,0(sp)
2000a8dc:	2021883a 	mov	r16,r4
{
  int old;

  old = open (name, flags, mode);
2000a8e0:	2809883a 	mov	r4,r5
2000a8e4:	300b883a 	mov	r5,r6
2000a8e8:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
2000a8ec:	dfc00115 	stw	ra,4(sp)
{
  int old;

  old = open (name, flags, mode);
2000a8f0:	00098cc0 	call	200098cc <open>

  if (old >= 0)
2000a8f4:	10001116 	blt	r2,zero,2000a93c <alt_open_fd.constprop.0+0x68>
  {
    fd->dev      = alt_fd_list[old].dev;
2000a8f8:	10c00324 	muli	r3,r2,12
2000a8fc:	01000034 	movhi	r4,0
2000a900:	21011204 	addi	r4,r4,1096
2000a904:	20cb883a 	add	r5,r4,r3
2000a908:	29400017 	ldw	r5,0(r5)
2000a90c:	81400015 	stw	r5,0(r16)
    fd->priv     = alt_fd_list[old].priv;
2000a910:	20cb883a 	add	r5,r4,r3
    fd->fd_flags = alt_fd_list[old].fd_flags;
2000a914:	20c7883a 	add	r3,r4,r3
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
2000a918:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2000a91c:	18c00217 	ldw	r3,8(r3)

    alt_release_fd (old);
2000a920:	1009883a 	mov	r4,r2
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
2000a924:	81400115 	stw	r5,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2000a928:	80c00215 	stw	r3,8(r16)

    alt_release_fd (old);
  }
} 
2000a92c:	dfc00117 	ldw	ra,4(sp)
2000a930:	dc000017 	ldw	r16,0(sp)
2000a934:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
2000a938:	0009af81 	jmpi	20009af8 <alt_release_fd>
  }
} 
2000a93c:	dfc00117 	ldw	ra,4(sp)
2000a940:	dc000017 	ldw	r16,0(sp)
2000a944:	dec00204 	addi	sp,sp,8
2000a948:	f800283a 	ret

2000a94c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2000a94c:	defffb04 	addi	sp,sp,-20
2000a950:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2000a954:	04000034 	movhi	r16,0
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2000a958:	2005883a 	mov	r2,r4
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2000a95c:	84011504 	addi	r16,r16,1108
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2000a960:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2000a964:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2000a968:	dcc00315 	stw	r19,12(sp)
2000a96c:	dc800215 	stw	r18,8(sp)
2000a970:	2827883a 	mov	r19,r5
2000a974:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2000a978:	100b883a 	mov	r5,r2
2000a97c:	8009883a 	mov	r4,r16
2000a980:	880d883a 	mov	r6,r17
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2000a984:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2000a988:	000a8d40 	call	2000a8d4 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2000a98c:	813ffd04 	addi	r4,r16,-12
2000a990:	980b883a 	mov	r5,r19
2000a994:	000d883a 	mov	r6,zero
2000a998:	000a8d40 	call	2000a8d4 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2000a99c:	81000304 	addi	r4,r16,12
2000a9a0:	900b883a 	mov	r5,r18
2000a9a4:	880d883a 	mov	r6,r17
}  
2000a9a8:	dfc00417 	ldw	ra,16(sp)
2000a9ac:	dcc00317 	ldw	r19,12(sp)
2000a9b0:	dc800217 	ldw	r18,8(sp)
2000a9b4:	dc400117 	ldw	r17,4(sp)
2000a9b8:	dc000017 	ldw	r16,0(sp)
2000a9bc:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2000a9c0:	000a8d41 	jmpi	2000a8d4 <alt_open_fd.constprop.0>

2000a9c4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2000a9c4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2000a9c8:	00bfff84 	movi	r2,-2
2000a9cc:	1884703a 	and	r2,r3,r2
2000a9d0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
2000a9d4:	21400117 	ldw	r5,4(r4)
2000a9d8:	20800017 	ldw	r2,0(r4)
2000a9dc:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
2000a9e0:	21400117 	ldw	r5,4(r4)
2000a9e4:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
2000a9e8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
2000a9ec:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2000a9f0:	1801703a 	wrctl	status,r3
2000a9f4:	f800283a 	ret

2000a9f8 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
2000a9f8:	d0a02017 	ldw	r2,-32640(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
2000a9fc:	defffb04 	addi	sp,sp,-20
2000aa00:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
2000aa04:	d4200d17 	ldw	r16,-32716(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
2000aa08:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
2000aa0c:	dc800215 	stw	r18,8(sp)
2000aa10:	dc400115 	stw	r17,4(sp)
2000aa14:	dfc00415 	stw	ra,16(sp)
2000aa18:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
2000aa1c:	d0a02015 	stw	r2,-32640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2000aa20:	d4600d04 	addi	r17,gp,-32716
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
2000aa24:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2000aa28:	84401a26 	beq	r16,r17,2000aa94 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
2000aa2c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
2000aa30:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
2000aa34:	10000326 	beq	r2,zero,2000aa44 <alt_tick+0x4c>
2000aa38:	d0a02017 	ldw	r2,-32640(gp)
2000aa3c:	1000011e 	bne	r2,zero,2000aa44 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
2000aa40:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
2000aa44:	d0e02017 	ldw	r3,-32640(gp)
2000aa48:	80800217 	ldw	r2,8(r16)
2000aa4c:	18800f36 	bltu	r3,r2,2000aa8c <alt_tick+0x94>
2000aa50:	80800403 	ldbu	r2,16(r16)
2000aa54:	10000d1e 	bne	r2,zero,2000aa8c <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
2000aa58:	80800317 	ldw	r2,12(r16)
2000aa5c:	81000517 	ldw	r4,20(r16)
2000aa60:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
2000aa64:	1000031e 	bne	r2,zero,2000aa74 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
2000aa68:	8009883a 	mov	r4,r16
2000aa6c:	000a9c40 	call	2000a9c4 <alt_alarm_stop>
2000aa70:	00000606 	br	2000aa8c <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
2000aa74:	80c00217 	ldw	r3,8(r16)
2000aa78:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
2000aa7c:	d0e02017 	ldw	r3,-32640(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
2000aa80:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
2000aa84:	10c0012e 	bgeu	r2,r3,2000aa8c <alt_tick+0x94>
        {
          alarm->rollover = 1;
2000aa88:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
2000aa8c:	9821883a 	mov	r16,r19
2000aa90:	003fe506 	br	2000aa28 <alt_tick+0x30>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
2000aa94:	dfc00417 	ldw	ra,16(sp)
2000aa98:	dcc00317 	ldw	r19,12(sp)
2000aa9c:	dc800217 	ldw	r18,8(sp)
2000aaa0:	dc400117 	ldw	r17,4(sp)
2000aaa4:	dc000017 	ldw	r16,0(sp)
2000aaa8:	dec00504 	addi	sp,sp,20
2000aaac:	f800283a 	ret

2000aab0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
2000aab0:	000170fa 	wrctl	ienable,zero
2000aab4:	f800283a 	ret

2000aab8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
2000aab8:	00820004 	movi	r2,2048
2000aabc:	1140012e 	bgeu	r2,r5,2000aac4 <alt_icache_flush+0xc>
2000aac0:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
2000aac4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2000aac8:	2005883a 	mov	r2,r4
2000aacc:	1140032e 	bgeu	r2,r5,2000aadc <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2000aad0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2000aad4:	10800804 	addi	r2,r2,32
2000aad8:	003ffc06 	br	2000aacc <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2000aadc:	210007cc 	andi	r4,r4,31
2000aae0:	20000126 	beq	r4,zero,2000aae8 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
2000aae4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2000aae8:	0000203a 	flushp
2000aaec:	f800283a 	ret

2000aaf0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
2000aaf0:	213ffe84 	addi	r4,r4,-6
2000aaf4:	008003c4 	movi	r2,15
2000aaf8:	11001636 	bltu	r2,r4,2000ab54 <alt_exception_cause_generated_bad_addr+0x64>
2000aafc:	200890ba 	slli	r4,r4,2
2000ab00:	00880074 	movhi	r2,8193
2000ab04:	10aac504 	addi	r2,r2,-21740
2000ab08:	2089883a 	add	r4,r4,r2
2000ab0c:	20800017 	ldw	r2,0(r4)
2000ab10:	1000683a 	jmp	r2
2000ab14:	2000ab5c 	xori	zero,r4,685
2000ab18:	2000ab5c 	xori	zero,r4,685
2000ab1c:	2000ab54 	ori	zero,r4,685
2000ab20:	2000ab54 	ori	zero,r4,685
2000ab24:	2000ab54 	ori	zero,r4,685
2000ab28:	2000ab5c 	xori	zero,r4,685
2000ab2c:	2000ab54 	ori	zero,r4,685
2000ab30:	2000ab54 	ori	zero,r4,685
2000ab34:	2000ab5c 	xori	zero,r4,685
2000ab38:	2000ab5c 	xori	zero,r4,685
2000ab3c:	2000ab54 	ori	zero,r4,685
2000ab40:	2000ab5c 	xori	zero,r4,685
2000ab44:	2000ab54 	ori	zero,r4,685
2000ab48:	2000ab54 	ori	zero,r4,685
2000ab4c:	2000ab54 	ori	zero,r4,685
2000ab50:	2000ab5c 	xori	zero,r4,685
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
2000ab54:	0005883a 	mov	r2,zero
2000ab58:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
2000ab5c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
2000ab60:	f800283a 	ret

2000ab64 <exit>:
2000ab64:	defffe04 	addi	sp,sp,-8
2000ab68:	000b883a 	mov	r5,zero
2000ab6c:	dc000015 	stw	r16,0(sp)
2000ab70:	dfc00115 	stw	ra,4(sp)
2000ab74:	2021883a 	mov	r16,r4
2000ab78:	000abb40 	call	2000abb4 <__call_exitprocs>
2000ab7c:	8009883a 	mov	r4,r16
2000ab80:	000ad500 	call	2000ad50 <_exit>

2000ab84 <memcmp>:
2000ab84:	218d883a 	add	r6,r4,r6
2000ab88:	21800826 	beq	r4,r6,2000abac <memcmp+0x28>
2000ab8c:	20800003 	ldbu	r2,0(r4)
2000ab90:	28c00003 	ldbu	r3,0(r5)
2000ab94:	10c00226 	beq	r2,r3,2000aba0 <memcmp+0x1c>
2000ab98:	10c5c83a 	sub	r2,r2,r3
2000ab9c:	f800283a 	ret
2000aba0:	21000044 	addi	r4,r4,1
2000aba4:	29400044 	addi	r5,r5,1
2000aba8:	003ff706 	br	2000ab88 <memcmp+0x4>
2000abac:	0005883a 	mov	r2,zero
2000abb0:	f800283a 	ret

2000abb4 <__call_exitprocs>:
2000abb4:	00800034 	movhi	r2,0
2000abb8:	10817d04 	addi	r2,r2,1524
2000abbc:	10800017 	ldw	r2,0(r2)
2000abc0:	defff304 	addi	sp,sp,-52
2000abc4:	ddc00a15 	stw	r23,40(sp)
2000abc8:	d8800015 	stw	r2,0(sp)
2000abcc:	05c80074 	movhi	r23,8193
2000abd0:	10800c04 	addi	r2,r2,48
2000abd4:	dc800515 	stw	r18,20(sp)
2000abd8:	dfc00c15 	stw	ra,48(sp)
2000abdc:	df000b15 	stw	fp,44(sp)
2000abe0:	dd800915 	stw	r22,36(sp)
2000abe4:	dd400815 	stw	r21,32(sp)
2000abe8:	dd000715 	stw	r20,28(sp)
2000abec:	dcc00615 	stw	r19,24(sp)
2000abf0:	dc400415 	stw	r17,16(sp)
2000abf4:	dc000315 	stw	r16,12(sp)
2000abf8:	d9000115 	stw	r4,4(sp)
2000abfc:	2825883a 	mov	r18,r5
2000ac00:	d8800215 	stw	r2,8(sp)
2000ac04:	bde2e904 	addi	r23,r23,-29788
2000ac08:	d8800017 	ldw	r2,0(sp)
2000ac0c:	dc400217 	ldw	r17,8(sp)
2000ac10:	14c00c17 	ldw	r19,48(r2)
2000ac14:	98004226 	beq	r19,zero,2000ad20 <__call_exitprocs+0x16c>
2000ac18:	9c000117 	ldw	r16,4(r19)
2000ac1c:	00900034 	movhi	r2,16384
2000ac20:	10bfffc4 	addi	r2,r2,-1
2000ac24:	9d002217 	ldw	r20,136(r19)
2000ac28:	857fffc4 	addi	r21,r16,-1
2000ac2c:	80a1883a 	add	r16,r16,r2
2000ac30:	8421883a 	add	r16,r16,r16
2000ac34:	8421883a 	add	r16,r16,r16
2000ac38:	a42d883a 	add	r22,r20,r16
2000ac3c:	84000204 	addi	r16,r16,8
2000ac40:	9c21883a 	add	r16,r19,r16
2000ac44:	a8002616 	blt	r21,zero,2000ace0 <__call_exitprocs+0x12c>
2000ac48:	90000326 	beq	r18,zero,2000ac58 <__call_exitprocs+0xa4>
2000ac4c:	a0002026 	beq	r20,zero,2000acd0 <__call_exitprocs+0x11c>
2000ac50:	b1002017 	ldw	r4,128(r22)
2000ac54:	24801e1e 	bne	r4,r18,2000acd0 <__call_exitprocs+0x11c>
2000ac58:	99000117 	ldw	r4,4(r19)
2000ac5c:	82000017 	ldw	r8,0(r16)
2000ac60:	213fffc4 	addi	r4,r4,-1
2000ac64:	a900021e 	bne	r21,r4,2000ac70 <__call_exitprocs+0xbc>
2000ac68:	9d400115 	stw	r21,4(r19)
2000ac6c:	00000106 	br	2000ac74 <__call_exitprocs+0xc0>
2000ac70:	80000015 	stw	zero,0(r16)
2000ac74:	40001626 	beq	r8,zero,2000acd0 <__call_exitprocs+0x11c>
2000ac78:	9f000117 	ldw	fp,4(r19)
2000ac7c:	a0000526 	beq	r20,zero,2000ac94 <__call_exitprocs+0xe0>
2000ac80:	00800044 	movi	r2,1
2000ac84:	1552983a 	sll	r9,r2,r21
2000ac88:	a1404017 	ldw	r5,256(r20)
2000ac8c:	494a703a 	and	r5,r9,r5
2000ac90:	2800021e 	bne	r5,zero,2000ac9c <__call_exitprocs+0xe8>
2000ac94:	403ee83a 	callr	r8
2000ac98:	00000906 	br	2000acc0 <__call_exitprocs+0x10c>
2000ac9c:	a1004117 	ldw	r4,260(r20)
2000aca0:	4908703a 	and	r4,r9,r4
2000aca4:	2000041e 	bne	r4,zero,2000acb8 <__call_exitprocs+0x104>
2000aca8:	d9000117 	ldw	r4,4(sp)
2000acac:	b1400017 	ldw	r5,0(r22)
2000acb0:	403ee83a 	callr	r8
2000acb4:	00000206 	br	2000acc0 <__call_exitprocs+0x10c>
2000acb8:	b1000017 	ldw	r4,0(r22)
2000acbc:	403ee83a 	callr	r8
2000acc0:	99000117 	ldw	r4,4(r19)
2000acc4:	e13fd01e 	bne	fp,r4,2000ac08 <__call_exitprocs+0x54>
2000acc8:	89000017 	ldw	r4,0(r17)
2000accc:	24ffce1e 	bne	r4,r19,2000ac08 <__call_exitprocs+0x54>
2000acd0:	ad7fffc4 	addi	r21,r21,-1
2000acd4:	b5bfff04 	addi	r22,r22,-4
2000acd8:	843fff04 	addi	r16,r16,-4
2000acdc:	003fd906 	br	2000ac44 <__call_exitprocs+0x90>
2000ace0:	b8000f26 	beq	r23,zero,2000ad20 <__call_exitprocs+0x16c>
2000ace4:	99400117 	ldw	r5,4(r19)
2000ace8:	99000017 	ldw	r4,0(r19)
2000acec:	2800091e 	bne	r5,zero,2000ad14 <__call_exitprocs+0x160>
2000acf0:	20000826 	beq	r4,zero,2000ad14 <__call_exitprocs+0x160>
2000acf4:	89000015 	stw	r4,0(r17)
2000acf8:	a0000226 	beq	r20,zero,2000ad04 <__call_exitprocs+0x150>
2000acfc:	a009883a 	mov	r4,r20
2000ad00:	0008ba40 	call	20008ba4 <free>
2000ad04:	9809883a 	mov	r4,r19
2000ad08:	0008ba40 	call	20008ba4 <free>
2000ad0c:	8cc00017 	ldw	r19,0(r17)
2000ad10:	003fc006 	br	2000ac14 <__call_exitprocs+0x60>
2000ad14:	9823883a 	mov	r17,r19
2000ad18:	2027883a 	mov	r19,r4
2000ad1c:	003fbd06 	br	2000ac14 <__call_exitprocs+0x60>
2000ad20:	dfc00c17 	ldw	ra,48(sp)
2000ad24:	df000b17 	ldw	fp,44(sp)
2000ad28:	ddc00a17 	ldw	r23,40(sp)
2000ad2c:	dd800917 	ldw	r22,36(sp)
2000ad30:	dd400817 	ldw	r21,32(sp)
2000ad34:	dd000717 	ldw	r20,28(sp)
2000ad38:	dcc00617 	ldw	r19,24(sp)
2000ad3c:	dc800517 	ldw	r18,20(sp)
2000ad40:	dc400417 	ldw	r17,16(sp)
2000ad44:	dc000317 	ldw	r16,12(sp)
2000ad48:	dec00d04 	addi	sp,sp,52
2000ad4c:	f800283a 	ret

2000ad50 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
2000ad50:	20000226 	beq	r4,zero,2000ad5c <_exit+0xc>
    ALT_SIM_FAIL();
2000ad54:	002af070 	cmpltui	zero,zero,43969
2000ad58:	00000106 	br	2000ad60 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
2000ad5c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
2000ad60:	003fff06 	br	2000ad60 <_exit+0x10>
