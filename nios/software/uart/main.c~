#include "alt_types.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_sgdma.h"
#include "altera_avalon_sgdma_regs.h"
#include "sys/alt_irq.h"
#include "system.h"
#include <stdio.h>
#include <unistd.h>

#define NUMBER_OF_BUFFERS 2
#define MINIMUM_BUFFER_LENGTH 64
#define MAXIMUM_BUFFER_LENGTH 1500

volatile alt_u8 tx_done = 0;

void transmit_callback_function(void * context) {
	tx_done++; /* main will be polling for this value being 1 */
}

alt_u32 create_test_data(alt_sgdma_descriptor * transmit_descriptors,
		alt_u32 number_of_buffers, alt_u32 minimum_buffer_length,
		alt_u32 maximum_buffer_length) {

	alt_u32 buffer_counter, contents_counter, temp_length;
	alt_u32 *transmit_ptr, *receive_ptr;
	alt_u8 *transmit_ptr_copy, *receive_ptr_copy; // will use these to fill up the tx buffers and clear the rx buffers
	alt_u32 temp_data = 0;

	/*  Initialization of the buffer memories and the transmit+receive descriptors */
	for (buffer_counter = 0; buffer_counter < number_of_buffers;
			buffer_counter++) {
		/*  Generate a random buffer length between within MINIMUM_BUFFER_LENGTH and MAXIMUM_BUFFER_LENGTH */
		if (minimum_buffer_length == maximum_buffer_length) // if you don't want a random length set these equal
				{
			temp_length = minimum_buffer_length;
		} else {
			if (minimum_buffer_length > maximum_buffer_length) {
				printf(
						"Please set the maximum buffer length to be larger than\n");
				printf(
						"the minimum buffer length (in includes_and_settigns.h)\n");
				return 1;
			}
			temp_length = (rand()
					% (maximum_buffer_length - minimum_buffer_length))
					+ minimum_buffer_length;
		}

		transmit_ptr = (alt_u32 *) malloc(temp_length); // this descriptor will point at a buffer of length (temp_length)
		if (transmit_ptr == NULL) {
			printf("Allocating a transmit buffer region failed\n");
			return 1;
		}

		/* This will populate sequential data (modulo 256) in each transmit buffer a byte at a time.
		 * The recieve buffers are also cleared with zeros so that each time this software is run
		 * the data can be reverified.  Before this function returns a flush will be performed to
		 * make sure none of these writes are still in the data cache.
		 */
		transmit_ptr_copy = (alt_u8 *) transmit_ptr;
		for (contents_counter = 0; contents_counter < temp_length;
				contents_counter++) {
			transmit_ptr_copy[contents_counter] = (alt_u8) (temp_data & 0xFF);
			temp_data++;
		}

		/* This will create a descriptor that is capable of transmitting data from an Avalon-MM buffer
		 * to a packet enabled Avalon-ST FIFO component */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
				&transmit_descriptors[buffer_counter],  // descriptor
				&transmit_descriptors[buffer_counter + 1], // next descriptor
				transmit_ptr,  // read buffer location
				(alt_u16) temp_length,  // length of the buffer
				0, // reads are not from a fixed location
				0, // start of packet is enabled for the Avalon-ST interfaces
				0, // end of packet is enabled for the Avalon-ST interfaces,
				0);  // there is only one channel

	}

	alt_dcache_flush_all(); // make sure all the transmit buffers and cleared receive buffers go out to main memory

	return 0;  // no failures creating data buffers
}

alt_u32 transmit(alt_sgdma_dev *transmit_dma,
		alt_sgdma_descriptor * transmit_descriptors, alt_u32 *transmit_ptr,
		alt_u32 temp_length) {
	int buffer_counter = 0;
	alt_avalon_sgdma_construct_mem_to_stream_desc(
			&transmit_descriptors[buffer_counter],  // descriptor
			&transmit_descriptors[buffer_counter + 1], // next descriptor
			transmit_ptr,  // read buffer location
			(alt_u16) temp_length,  // length of the buffer
			0, // reads are not from a fixed location
			0, // start of packet is enabled for the Avalon-ST interfaces
			0, // end of packet is enabled for the Avalon-ST interfaces,
			0);  // there is only one channel

	/* Prime the SGDMA engines with the descriptor lists (first one, it's a linked list) */
	if (alt_avalon_sgdma_do_async_transfer(transmit_dma,
			&transmit_descriptors[0]) != 0) {
		printf(
				"Writing the head of the transmit descriptor list to the DMA failed\n");
		return 1;
	}
}

alt_u32 descriptor_allocation(alt_sgdma_descriptor ** transmit_descriptors,
		alt_sgdma_descriptor ** transmit_descriptors_copy,
		alt_u32 number_of_buffers) {
	/* Allocate some big buffers to hold all descriptors which will slide until
	 * the first 32 byte boundary is found */
	void * temp_ptr_1;

	/**************************************************************
	 * Allocation of the transmit descriptors                   *
	 * - First allocate a large buffer to the temporary pointer *
	 * - Second check for sucessful memory allocation           *
	 * - Third put this memory location into the pointer copy   *
	 *   to be freed before the program exits                   *
	 * - Forth slide the tempory pointer until it lies on a 32  *
	 *   byte boundary (descriptor master is 256 bits wide)     *
	 ************************************************************/
	temp_ptr_1 = malloc(
			(number_of_buffers + 2) * ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE);
	if (temp_ptr_1 == NULL) {
		printf("Failed to allocate memory for the transmit descriptors\n");
		return 1;
	}
	*transmit_descriptors_copy = (alt_sgdma_descriptor *) temp_ptr_1;

	while ((((alt_u32) temp_ptr_1) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0) {
		temp_ptr_1++;  // slide the pointer until 32 byte boundary is found
	}
	*transmit_descriptors = (alt_sgdma_descriptor *) temp_ptr_1;
	/**************************************************************/

	/* Clear out the null descriptor owned by hardware bit.  These locations
	 * came from the heap so we don't know what state the bytes are in (owned bit could be high).*/
	transmit_descriptors[number_of_buffers]->control = 0;

	return 0;  // no failures in allocation
}

int main(int argc, char **argv) {

	char c;
	alt_sgdma_dev *transmit_dma = alt_avalon_sgdma_open("/dev/sgdma_0");
	alt_sgdma_descriptor *transmit_descriptors, *transmit_descriptors_copy;
	alt_u32 *transmit_ptr;
	if (transmit_dma == NULL) {
		printf("Could not open transmit SG-DMA");
		return 1;
	}
	alt_u32 return_code = descriptor_allocation(&transmit_descriptors,
			&transmit_descriptors_copy,
			NUMBER_OF_BUFFERS);

	if (return_code == 1) {
		printf("Allocating the descriptor memory failed... exiting\n");
		return 1;
	}

	printf("Transmit descriptor: 0x%08x\n", transmit_descriptors);

	return_code = create_test_data(transmit_descriptors,
	NUMBER_OF_BUFFERS,
	MINIMUM_BUFFER_LENGTH,
	MAXIMUM_BUFFER_LENGTH);
	if (return_code == 1) {
		printf("Allocating the data buffers failed... exiting\n");
		return 1;
	}

	alt_avalon_sgdma_register_callback(transmit_dma,
			&transmit_callback_function,
			(ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK
					| ALTERA_AVALON_SGDMA_CONTROL_IE_CHAIN_COMPLETED_MSK),
			NULL);

	printf("Starting up the SGDMA engines\n");

	transmit_ptr = (alt_u32 *) malloc(MAXIMUM_BUFFER_LENGTH); // this descriptor will point at a buffer of length (temp_length)
	if (transmit_ptr == NULL) {
		printf("Allocating a transmit buffer region failed\n");
		return 1;
	}
	int i = 0;

	while (1) {
		while (!(IORD(UART_BASE,2) & 0x80))
			;
		transmit_ptr[i++] = c= IORD(UART_BASE, 0);
		if (i >= MAXIMUM_BUFFER_LENGTH) {
			transmit(transmit_dma, transmit_descriptors, transmit_ptr, i);
			while (tx_done == 0) {
			}
			tx_done = 0;
			i=0;
		}
		while (!(IORD(UART_BASE,2) & 0x40))
			;
		IOWR(UART_BASE, 1, c);
	}

	return 0;
}
